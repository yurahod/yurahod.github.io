[
    {
        "academy": "9",
        "line": "Free HackTheBox Course on getting into the right mindset to learn.\n",
        "machine": "Academy: Learning Process",
        "tag": ""
    },
    {
        "academy": "15",
        "line": "Free HackTheBox Course on using the Academy Platform\n",
        "machine": "Academy: Intro to Academy",
        "tag": ""
    },
    {
        "academy": "17",
        "line": "HackTheBox Course on Hacking Wordpress.  This cost 100 cubes, which is ~$10\n",
        "machine": "Academy: Hacking Wordpress",
        "tag": ""
    },
    {
        "academy": "19",
        "line": "HackTheBox Course on using NMAP to its fullest.  This cost 50 cubes, which is ~$5\n",
        "machine": "Academy: Network Enumeration with Nmap",
        "tag": ""
    },
    {
        "academy": "20",
        "line": "HackTheBox Course on using Hashcat to its fullest.  This cost 100 cubes, which is ~$10\n",
        "machine": "Academy: Cracking Passwords with Hashcat",
        "tag": ""
    },
    {
        "academy": "22",
        "line": "HackTheBox Course on Enumerating Active Directory over LDAP.  This cost 1000 cubes, which is ~$100\n",
        "machine": "Academy: Active Directory LDAP",
        "tag": ""
    },
    {
        "academy": "23",
        "line": "Free HackTheBox Course on performing Directory Traversal and File Inclusion attacks\n",
        "machine": "Academy: File Inclusion / Directory Traversal",
        "tag": ""
    },
    {
        "academy": "35",
        "line": "Free HackTheBox Course about HTTP or Web Requests\n",
        "machine": "Academy: Web Requests",
        "tag": ""
    },
    {
        "academy": "38",
        "line": "HackTheBox Course on Javascript Coding.  This cost 1000 cubes, which is ~$100\n",
        "machine": "Academy: Secure Coding 101: Javascript",
        "tag": ""
    },
    {
        "academy": "41",
        "line": "Free HackTheBox Course on Deobfuscating Javascript\n",
        "machine": "Academy: Javascript Deobfuscation",
        "tag": ""
    },
    {
        "academy": "48",
        "line": "HackTheBox Course on Command Injection Vulnerabilities.  This cost 500 cubes, which is ~$50\n",
        "machine": "Academy: Whitebox Pentesting 101: Command Injection",
        "tag": ""
    },
    {
        "academy": "49",
        "line": "Free HackTheBox Introductory Course on Windows\n",
        "machine": "Academy: Windows Fundamentals",
        "tag": ""
    },
    {
        "academy": "51",
        "line": "HackTheBox Course on Linux Privilege Escalation.  This cost 500 cubes, which is ~$50\n",
        "machine": "Academy: Linux Privilege Escalation",
        "tag": ""
    },
    {
        "academy": "54",
        "line": "Free HackTheBox Course on using FFUF\n",
        "machine": "Academy: Attacking Web Applications with FFUF",
        "tag": ""
    },
    {
        "academy": "57",
        "line": "Free HackTheBox course on bruteforcing common logins\n",
        "machine": "Academy: Login Brute Forcing",
        "tag": ""
    },
    {
        "academy": "68",
        "line": "HackTheBox course on Active Directory Enumeration and Exploitation with PowerView.  This cost 1000 cubes, which is $100\n",
        "machine": "Academy: Active Directory PowerView",
        "tag": ""
    },
    {
        "academy": "69",
        "line": "HackTheBox Course on using Bloodhound, including writing cypher queries for custom graphs!  This cost 500 cubes, which is $50\n",
        "machine": "Academy: Active Directory BloodHound",
        "tag": ""
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Looking at the login request, guessing it is Laravel based upon XSRF being in cookie and header",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Playing with updating genre and viewing feed to discover an error",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 10
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Opening up SQL Fiddle to explain what I think is going on, its using FIND_IN_SET",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 4
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Discovering space is a bad character and when this happens using the -- comment is bad",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 20
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Manually dumping the database with union statements",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 48
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Using SQL Map showing this SQL Injection",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 18
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Going over our recon and discovering a v2 admin login endpoint which lets us login with the password hash",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 30,
            "seconds": 54
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Logged in as an admin (Steve)",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 38,
            "seconds": 28
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Talking about Exploiting PHP Object Instanatiations then exploiting ImageMagick",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 42,
            "seconds": 10
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Shell returned, downloading .git, looking at commits and finding Greg's password",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 61,
            "seconds": 20
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Talking about the Scanner Binary and showing how we can leak the file one byte at a time",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 67,
            "seconds": 5
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Creating a python program to run the scanner binary thousands of times to leak files one byte at a time",
        "machine": "HackTheBox - Intentions",
        "tag": "",
        "timestamp": {
            "minutes": 70,
            "seconds": 7
        },
        "videoId": "YmRDV0JR4qg"
    },
    {
        "line": " Introduction talking about what the Looney Tunable exploit is and my thoughts on the severity of the exploit",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Start talking about how the vulnerability works",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " The POC String to identify if a box is vulnerable, it doesn't actually exploit but quickly identifies if a vulnerable glibc is installed",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Important parts I wanted to point out in the technical writeup.",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 45
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Downloading a good POC written in python, then glancing over the code to make sure there isn't anything malicious",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Analyzing the exit shellcode manually in Ghidra to see it just exits with 0x66",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 37
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Analyzing the main shellcode in Ghidra, showing it does a lot more",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 50
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Putting the Shellcode into an elf binary, so we can analyze it with gdb",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 50
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Logging into HTB's TwoMillion machine to run this exploit",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 29,
            "seconds": 50
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Showing how to get the magic numbers incase your target is not supported. Disable ASLR then running the exploit",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 31,
            "seconds": 45
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Looking at how Elastic got lucky and detected this exploit with their default ruleset",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 34,
            "seconds": 50
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Looking at how CrowdSec detects it",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 36,
            "seconds": 0
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Looking at the more recent Elastic rules to see the more thorough check for this exploit",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 36,
            "seconds": 55
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Showing all the segfaults in /var/log/kern.log",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 40
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Highlighted Links:",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " - Qualsys Blog Post: https://blog.qualys.com/vulnerabilities-threat-research/2023/10/03/cve-2023-4911-looney-tunables-local-privilege-escalation-in-the-glibcs-ld-so",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " - Qualsys Tech Details: https://www.qualys.com/2023/10/03/cve-2023-4911/looney-tunables-local-privilege-escalation-glibc-ld-so.txt",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " - Exploit POC Tweet: https://twitter.com/bl4sty/status/1710634253518582047",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " - Elastic Initial Detection Tweet: https://twitter.com/RFGroenewoud/status/1709866613292282101",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " - Crowdsec Detection Tweet: https://twitter.com/Crowd_Security/status/1709959368467157244",
        "machine": "Looking into the Looney Tunable Linux Privesc CVE-2023-4911",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "1iV-CD9Apn8"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - PC",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "AQSLvalzW8g"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - PC",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 5
        },
        "videoId": "AQSLvalzW8g"
    },
    {
        "line": " Googling the port number, and reading more about gRPC",
        "machine": "HackTheBox - PC",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "AQSLvalzW8g"
    },
    {
        "line": " Install GRPCurl so we can access the gRPC interface",
        "machine": "HackTheBox - PC",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 45
        },
        "videoId": "AQSLvalzW8g"
    },
    {
        "line": " Enumerating the grpc interface",
        "machine": "HackTheBox - PC",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "AQSLvalzW8g"
    },
    {
        "line": " Registering a user and logging in",
        "machine": "HackTheBox - PC",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 30
        },
        "videoId": "AQSLvalzW8g"
    },
    {
        "line": " Using Verbose with GRPCurl to get extra information which includes an JWT ",
        "machine": "HackTheBox - PC",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 45
        },
        "videoId": "AQSLvalzW8g"
    },
    {
        "line": " Discovering an SQL Injection in the SimpleApp.GetInfo, enumerating the database to discover SQLite",
        "machine": "HackTheBox - PC",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 20
        },
        "videoId": "AQSLvalzW8g"
    },
    {
        "line": " Enumerating the SQLite Database (similar to Information_schema with mysql)",
        "machine": "HackTheBox - PC",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 45
        },
        "videoId": "AQSLvalzW8g"
    },
    {
        "line": " Using Group_Concat with a union injection to dump all users and passwords, then SSH into the box",
        "machine": "HackTheBox - PC",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 45
        },
        "videoId": "AQSLvalzW8g"
    },
    {
        "line": " Discovering PyLoad is running on localhost, setting up an SSH Tunnel to access it",
        "machine": "HackTheBox - PC",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 45
        },
        "videoId": "AQSLvalzW8g"
    },
    {
        "line": " Finding a public POC and running it to exploit PyLoad",
        "machine": "HackTheBox - PC",
        "tag": "",
        "timestamp": {
            "minutes": 26,
            "seconds": 0
        },
        "videoId": "AQSLvalzW8g"
    },
    {
        "line": " Introduction",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Showing the trick and explaining why its important to understand the methodology behind finding the technique and not just the technique itself",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 57
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Going over the Flask App",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 50
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Showing Snyk highlighting the SQL Injection, then talking a little bit about Snyk and why it is awesome.",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 45
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Running the webserver and explaining why DEBUG mode should always be disabled",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 0
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Running SQLMap to inject into the URL Parameter",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 30
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Manually discovering the SQL Injection through good enumeration, and showing a Burpsuite URL Encoding Quirk",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " SQLMap showed nothing, Run SQLMap again but this time make sure it starts with a valid result to see it does find something",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 50
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Going into the code to show why exploitation is hard, I'm using Pydantic to do strict typing and input filtering",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 20
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Showing how SQLMap discovered there were 4 columns without using a comma, thanks to the ORDER BY method",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 36
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Enumerating for bad characters with FFUF by putting characters after the SQL Comment",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 55
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Showing SQLFiddle, which is a great way to play and test SQL Queries",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 30
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Eliminating comma's from the Union Injection with (select * from (select 1) as a join (select 2) as b)",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 5
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Testing the SQL Injection against our web application",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 26,
            "seconds": 0
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Securing the code and fixing the SQL Injection via prepared statement",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 28,
            "seconds": 55
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Showcasing Github Copilot Chat to help fix our code",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 31,
            "seconds": 30
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " Fixing a XSS Issue, then rerunning Snyk to show all vulnerabilities are fixed",
        "machine": "SQL Injecting Beyond Strict Filters - Union Without Comma",
        "tag": "",
        "timestamp": {
            "minutes": 35,
            "seconds": 0
        },
        "videoId": "61kf4CEnOZk"
    },
    {
        "line": " For some reason, the last video got stuck encoding on YT's side and was 360p. Reuploaded and it worked the second time.",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Downloading source code from gitea",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Examining the website via browser to see what it does",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 30
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Making sense of how the sitebuilder works",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Examining the source code, discovering a file disclosure",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 20
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Creating a python script to automate the File Disclosure",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 0
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Script is done, downloading nginx configs. Then trying to find any directory we can write a PHP Script to",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 48,
            "seconds": 0
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Looking at how the site adds a pro license to users",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 55,
            "seconds": 0
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Explaining how we can do a protocol smuggling attack and access the REDIS socket to manipulate our user",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 58,
            "seconds": 50
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Showing that the plus is not being URL Decoded in the path of a URL but %20 is",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 65,
            "seconds": 19
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Uploading a PHP Script to get code execution",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 68,
            "seconds": 48
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Dumping the REDIS Database and getting cooper's password",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 73,
            "seconds": 55
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Looking at the License Python script cooper can execute with sudo and seeing a Python Format String vulnerability",
        "machine": "HackTheBox - Format",
        "tag": "",
        "timestamp": {
            "minutes": 77,
            "seconds": 10
        },
        "videoId": "WiTgB9BRrmM"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 56
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Looking for Windows Exploits around Themes and discovering ThemeBleed (CVE-2023-38146)",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 20
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Creating a DLL that exports VerifyThemeVersion and then compiling from Linux",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Showing the exports of the DLL to confirm it is there, then hiding the ReverseShell export",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 50
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Testing our DLL from our windows computer",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 30
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Creating the malicious Windows Theme",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 30
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Setting up a SOCAT forward to send port 445 from our linux box to our Windows Box",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 20
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Updating the IP Address in our DLL and then getting a shell",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 20
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Downloading the PDF by converting it to base64 and then copy and pasting it to our box",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 10
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Researching CVE-2023-28252, which is a Windows Local Privesc in the Common Log File System (CLFS) and patched back in April 2023",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 23,
            "seconds": 45
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Opening the CLFS Exploit up in Visual Studio and placing a Powershell Web Cradle to send a reverse shell and getting Root",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 26,
            "seconds": 30
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Beyond root: Changing up the DLL we used for the foothold to just execute code upon DLL Attach and not export anything.",
        "machine": "HackTheBox - Aero",
        "tag": "",
        "timestamp": {
            "minutes": 32,
            "seconds": 30
        },
        "videoId": "g01cZciFI9o"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Start of nmap, discovering ssh/dns/http",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Taking a look at the website",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Discovering a message about DNS, taking a look at the DNS and discovering zone transfers are enabled",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Identifying the website is running with PHP Enabled, then running gobuster",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 40
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Attacking the file download and discovering File Disclosure",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " We got lucky discovering the File Disclosure filter bypass, using FFUF which would be make catching this more consistent",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 35
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Automating the File Disclosure by creating a python script",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Looking at files on the target, discovering the DNS Configuration which has the RNDC Key to update DNS",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Looking at the NSUPDATE Man page and then adding a the DNS Record mail.snoopy.htb and pointing it to us",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 30,
            "seconds": 40
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Using python to run a SMTP Server and then having Mattermost's forgot password email us the password reset",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 34,
            "seconds": 24
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Using the Mattermost bot to provision a server via SSH which causes it to SSH back to us",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 39,
            "seconds": 50
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Backdooring PAM with pam_exec and a bash script to log passwords of users logging into our box, and grabbing CBROWN's password",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 42,
            "seconds": 30
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " cbrown can run Git apply as sbrown, looking for exploits around it and discovering CVE-2023-23946. ",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 50,
            "seconds": 40
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " sbrown can run clamscan in debug mode as root",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 68,
            "seconds": 50
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Looking at CVE's in clamav and discovering an XXE in the DMG Parser (CVE-2023-20052)",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 71,
            "seconds": 45
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Downloading a DMG File (sublime), then modifying the XML to put an XXE in, scanning, then exfiltrating the root ssh key",
        "machine": "HackTheBox - Snoopy",
        "tag": "",
        "timestamp": {
            "minutes": 83,
            "seconds": 30
        },
        "videoId": "6tn30O0SjVQ"
    },
    {
        "line": " Introduction",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " Start of nmap",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " Using wget to download all files from FTP then examining files, taking notes of the usernames",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " Taking a look at the backup, discovering a password in the wireless config",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " Using CrackMapExec to spray SSH with our password and getting a success with netadmin",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 45
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": "  Running LinPeas to discover Reaver has the capability cap_net_raw",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 15
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " Explaining why Reaver has this capability is interesting",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 15
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " Running Reaver to attempt to brute force the WPS Pin and getting the WPA PSK which is also the root password",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 40
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " Start of building a bash script to spray a single password across valid users with su",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 30
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " Converting our script into a Bash Function so its easier to run without touching disk",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 0
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " Talking about WPS and how this exploit worked",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 55
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " The first vulnerability in the WPS Pin, the eighth digit is just a checksum",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 30
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " The second flaw in WPS, the PIN is broken in half if the first four digits are wrong the responses tell you. Making the possibilities of hashes from 10^7 to 10^4 + 10^3.",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 28,
            "seconds": 30
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " Showing the WSC Nack gets sent after Message 4 if the first four of the pin is wrong",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 30,
            "seconds": 0
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " Changing the PIN and playing more with reaver to showcase how reaver works.",
        "machine": "HackThebox - Wifinetic",
        "tag": "",
        "timestamp": {
            "minutes": 31,
            "seconds": 15
        },
        "videoId": "jj4r5lwnCp8"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Identifying all the technologies used in the box",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 15
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Looking at OpenStack Keystone Authentication and discovering CVE-2021-38155",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 45
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Pulling up API DOCS to see how to login to Keystone, then testing lockout",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 15
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Taking the Burpsuite Request, sending it to FFUF and using a trick to try each password multiple times",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 0
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Attempting to access Swift as a vendor to bypass auth, using GoBuster and discovering an Android directory with Pokatmon app in it",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 30
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Start of analyzing the Pokatmon App, examining DNS, setting up a MITM with Burpsuite and Socat",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 35,
            "seconds": 10
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Using Frida to disable TLS Certificate Pinning on Flutter",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 15
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Discovering the App Signs every request, grabbing the certificate out of the app, and signing our own request",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 45,
            "seconds": 20
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Performing an SQL Injection, getting an email address then looking for vulnerabilities in Forgot Password on the main website",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 49,
            "seconds": 20
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Discovering CVE-2021-43557 in APISIX, which gives us an idea to URLEncode Paths to bypass blacklists and gaining access to the /private/ directory which has a /forgot-password we can use to reset Roger's password",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 58,
            "seconds": 48
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Logging into the docs, gaining access to the API and finding an LFI",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 64,
            "seconds": 45
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Looking into CVE-2021-35368, which is a ModSecurity Bypass that allows us to abuse the LFI",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 69,
            "seconds": 45
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Using NGINX's temporary files with our PHP LFI to gain code execution",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 78,
            "seconds": 10
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Shell returned on Pokatdex-API, exporting Kubernetes secrets",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 87,
            "seconds": 55
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Discovering an APISIX admin key and exploiting this service by creating a route that executes code",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 94,
            "seconds": 20
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Shell returned on the APISIX box, discovering credentials we can SSH with",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 119,
            "seconds": 20
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Explioting the CRI-O with Kubernetes to set a kernel param to execute a script when a core dump is created (CVE-2022-0811)",
        "machine": "HackTheBox - Pikatwoo",
        "tag": "",
        "timestamp": {
            "minutes": 131,
            "seconds": 10
        },
        "videoId": "gRj9Uz8_EOY"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 2
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Discovering Cacti version and finding a vulnerability",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 50
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Sending the payload from the description, discovering we need to set the X-FORWARDED-FOR",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 50
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Incrementing Host_ID and Local_Data_Ids and discovering different output",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Discovering with local_data_ids set to 6 and host_id set to 1, we can get code execution",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 15
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Showing the python exploit and showing it blindly spray, looking at the Metasploit module for some more info",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 50
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Getting a reverse shell",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 40
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Using Script to set up our PTY since python is not installed",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 30
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Connecting to the MySQL Database and then cracking passwords",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 40
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " SSH into the box with Marcus and discovering mail on the box",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 25
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Discovering Docker is old and vulnerable to CVE-2021-41091",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 20,
            "seconds": 20
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Looking at the docker overlayfs directories, discovering we can go in them, finding the web container",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 55
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Using CapSH to escalate privileges on our docker container so we can make Bash a SetUID Binary",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 23,
            "seconds": 10
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Executing bash -p to get root",
        "machine": "HackTheBox - MonitorsTwo",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 50
        },
        "videoId": "dJfbogs8Yz0"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Discovering beta.only4you.htb",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 20
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Downloading the source, scanning with Snyk and discovering a File Disclosure vuln",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 55
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Demonstrating that os.path.join in python will do unexpected things if a path begins with slash",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 15
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Failing to get /proc/self/environ, not sure why we failed here",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Grabbing the nginx configuration to discover where the websites are stored, using the File Disclosure Vuln to leak source of main website",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 20
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Discovering a vulnerability when sending mail",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 15
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Talking about how we will bypass the bad character check, the Re.Match will only match the start, not entire string",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 10
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Getting code execution from the contact form",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 10
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Reverse shell returned, looking for databases, and discovering a few ports listening on localhost",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 45
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Uploading Chisel so we can access ports 3000 and 8001",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Start of Neo4j Injection, discovering we are in a contains statement",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 40
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Going to HackTricks and discovering we can use LOAD CSV to leak data out of band",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 30,
            "seconds": 0
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Leaking the labels, then grabbing users and hashes",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 32,
            "seconds": 25
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Logging in with John, discovering we can use sudo with pip to download a tar off GOGS",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 38,
            "seconds": 30
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Creating a malicious python package for us to download, then uploading to gogs",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 25
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Showing that the pip download command will execute setup.py and getting root",
        "machine": "HackTheBox - OnlyForYou",
        "tag": "",
        "timestamp": {
            "minutes": 44,
            "seconds": 10
        },
        "videoId": "sfjYXDV7dxg"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Start of nmap, discovering two different OS's",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Running Gobuster to bruteforce VHOST",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Discovering XSS but nothing we can really do with it ",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Enumerating Gitea, discovering a repo with some source code",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Opening the code with VS Code and Snyk. Discovering a RCE Vulnerability but requires login",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 40
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Discovering an EAR (Execute After Read) Vulnerability on Authentication",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Start of building our Javascript payload to exploit NoSQL Injection, download the internal page",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 10
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Explaining the NoSQL Injection, then testing with a login bypass",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 40
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Discovering what happens on invalid logins",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 30
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Getting the length of the password",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 20,
            "seconds": 40
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Bruteforcing the password with boolean logic",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 30
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Logging in via ssh with the credentials we got from the nosql injection, looking at the local linux mail to get 2FA Link",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 30,
            "seconds": 0
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Logged into the dashboard, can hit the RCE Endpoint now to get a shell as www-data which gets us matthews creds",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 33,
            "seconds": 20
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Discovering a keepass file, running PS enough we can see KPCLI Runs",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 20
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Running STRACE against KPCLI to intercept syscalls",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 41,
            "seconds": 30
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Specifying we only want to see READS, and can intercept keys sent to KeePass and get the password",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 42,
            "seconds": 40
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Going into the Mongo docker container and running mongodump to dump all the users",
        "machine": "HackTheBox - Mailroom",
        "tag": "",
        "timestamp": {
            "minutes": 46,
            "seconds": 10
        },
        "videoId": "PREVgpmZGuo"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Busqueda",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "5dHgfviJWmg"
    },
    {
        "line": " Start of the nmap",
        "machine": "HackTheBox - Busqueda",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "5dHgfviJWmg"
    },
    {
        "line": " Copying the request in burpsuite to a file so we can use FFUF to fuzz",
        "machine": "HackTheBox - Busqueda",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 20
        },
        "videoId": "5dHgfviJWmg"
    },
    {
        "line": " Just testing for SSTI",
        "machine": "HackTheBox - Busqueda",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 0
        },
        "videoId": "5dHgfviJWmg"
    },
    {
        "line": " Found two bad characters, putting a comment after a bad character to see where it is failing",
        "machine": "HackTheBox - Busqueda",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 45
        },
        "videoId": "5dHgfviJWmg"
    },
    {
        "line": " Discovering we can append to the string, then trying for executing code with print to test for eval statements",
        "machine": "HackTheBox - Busqueda",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 20
        },
        "videoId": "5dHgfviJWmg"
    },
    {
        "line": " Getting a reverse shell",
        "machine": "HackTheBox - Busqueda",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "5dHgfviJWmg"
    },
    {
        "line": " Reverse shell returned",
        "machine": "HackTheBox - Busqueda",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 0
        },
        "videoId": "5dHgfviJWmg"
    },
    {
        "line": " Looking at apache virtualhosts to discover a hidden vhost that is running gitea",
        "machine": "HackTheBox - Busqueda",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 0
        },
        "videoId": "5dHgfviJWmg"
    },
    {
        "line": " Finding creds in the .git folder which lets us run sudo",
        "machine": "HackTheBox - Busqueda",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "5dHgfviJWmg"
    },
    {
        "line": " Inspecting the docker containers to discover passwords in environment variables which lets us log into gitea as administrator and view the script we are running as sudo",
        "machine": "HackTheBox - Busqueda",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 0
        },
        "videoId": "5dHgfviJWmg"
    },
    {
        "line": " Discovering the system-checkup.py script is not using an absolute path, so we can execute a shell script in our CWD as root",
        "machine": "HackTheBox - Busqueda",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 30
        },
        "videoId": "5dHgfviJWmg"
    },
    {
        "line": " Description timestamps will be populated later today.",
        "machine": "HackTheBox - Agile",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "ob-CwobmkKk"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Looking at the TTL of Ping to see its 127, then making a request to the webserver and seeing it is 62",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Showing DNS is listening on Cerberos and exposing the 172.16.22.0/24 network",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 45
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Looking at Icinga, testing default credentials",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 15
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Fingerprinting the Icinga release by looking at javascript, using UI.JS since it looks like it changes frequently",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 20
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Cloning the repo, then writing a one-liner to hash all versions of ui.js and finding which commit the version off the webserver is on",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 5
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Finding a File Disclosure vulnerability in Icinga CVE-2022-24716, leaking some Icinga configuration files and finding a web users password ",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 10
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Gaining RCE via CVE-2022-24715, which allows us to write a file to disk then change where the Icinga plugin directory is to get code execution",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 20
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Shell as www-data, doing some basic recon to figure out what type of virtual environment we are in via /sys/class/dmi/id/sys_vendor",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 30
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Looking at running processes and seeing sssd is running which allows this box to talk to the domain",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 29,
            "seconds": 0
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Looking at SetUID Files, discovering FireJail and privesc'ing CVE-2022-31214",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 30,
            "seconds": 0
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " As root on linux, we can now examine the SSSD configuration and get a domain password",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 36,
            "seconds": 0
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Setting up a SOCKS Proxy via chisel, so we can use Evil-WINRM to log into the windows machine as Matthew",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 44,
            "seconds": 50
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Discovering ManageEngine ADSelfService Plus is running, finding an exploit",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 48,
            "seconds": 50
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Fighting with Chisel to get all the port forwards working, have trouble with two socks proxies",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 52,
            "seconds": 50
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Redoing our tunnels, doing a portforward on linux to get evil-winrm, then a socks on our windows target to access ManageEngine",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 60,
            "seconds": 0
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Running the Metasploit Exploit against ManageEngine and getting root",
        "machine": "HackTheBox - Cerberus",
        "tag": "",
        "timestamp": {
            "minutes": 66,
            "seconds": 10
        },
        "videoId": "IX4h5aaSK1g"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Looking at the HTTP Headers, discovering Cross Origin and rails",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 50
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Testing the Clip Notes functionality for SSTI/XSS",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 50
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Using FFUF to fuzz all Clip Notes to see if there's an IDOR Vulnerability",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Looking at how the site is build, discovering Web Assembly",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 30
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Sending a long string for the username and discovering the data overflows and goes into the Date field",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Using Pattern Create to find where our payload hits the date field",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 50
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Testing for XSS",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 55
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Seeing Cross Origin blocked us, adding the headers to get it loading javascript from our server",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 20
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Using XMLHttpRequest in our XSS to control the victim's browser and see what is on /administration",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 50
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Looking at the Administration page, discovering there is a File Disclosure",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 31,
            "seconds": 50
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Grabbing /etc/passwd and then getting some Ruby Source Code",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 38,
            "seconds": 30
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Discovering userinput is passed to open() in ruby, if we put a pipe as the first character it will execute instead of reading",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 48,
            "seconds": 0
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Getting a reverse shell",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 49,
            "seconds": 45
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Looking at the SQLite Database and cracking a password to switch to the openmediavault user",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 51,
            "seconds": 35
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Looking at the OpenMediaVault RPC Endpoints to see how we can interact with it",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 56,
            "seconds": 55
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Editing the OpenMediaVault Config to add a SSH Key for Root",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 59,
            "seconds": 40
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Another way for root, making a debian package then using the OMV RPC to install it",
        "machine": "HackTheBox - Derailed",
        "tag": "",
        "timestamp": {
            "minutes": 69,
            "seconds": 20
        },
        "videoId": "7CO4U1Y2Unk"
    },
    {
        "line": " Introduction, why I created this script and a quick demo",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Going over XML Entity Injection, doing it manually and explaining what the payloads are",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Sponsor shoutout, showing Snyk scan the source code to this application and catching the XXE ",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 30
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Patching the code, asking Github Copilot for a proper way to fix it and it recommends disabling loading XML Entity off remote sources",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Making sure Snyk is happy with our code fix and going over some other findings",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 55
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Start of coding the XXE Script, creating the webserver ",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 4
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Putting our webserver in a thread so we can also run a CLI ",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 40
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Talking about how and why we are just going to use a global variable with our thread",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 30
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Having our terminal able to update the payload variable, so we can easily change files we want to exfil",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 20
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Creating a function to read an HTTP Request copied from Burp, so we can use it with python requests",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Testing out our function, and discovering we need to fix the path",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 29,
            "seconds": 28
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " The skeleton of the script is done, adding in the logic to actually perform the XXE Attack but putting the file name in the wrong spot.",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 33,
            "seconds": 20
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Running our script and fixing up a few bugs",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 38,
            "seconds": 15
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Fixing up where we placed the file in our XXE Payload",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 44
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Adding comments in our code as we glance over it",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 42,
            "seconds": 15
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Adding some login in our script to tell the python server it is base64, which should help future proof it for doing XXE with other languages",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 43,
            "seconds": 30
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Adding argparse to our program, so we can get rid of hard coded variables",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 47,
            "seconds": 30
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Parsing the LHOST variable from the request file we have, so the server will send the file to the right location",
        "machine": "Making Blind XXE Quicker and Easier By Creating a Script to Exfiltrate Files",
        "tag": "",
        "timestamp": {
            "minutes": 50,
            "seconds": 50
        },
        "videoId": "Qn2GwH3vjs8"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Taking a look at QReader.htb",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 45
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Opening the QReader application to discover it requires GLIBC_2.35, going back to nmap to see what flavor of linux was used",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 40
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Switching to Ubuntu Jammy and running Wireshark with the app running to see it makes a request to WS.QREADER.HTB",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 25
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Using BurpSuite to intercept this thick client by setting it up as a transparent proxy",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 30
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Playing with the websocket and discovering SQL Injection",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Using WebSocat and watch to build a quick client to test the SQL Injection over websockets and playing with Union to see how many columns are needed",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 40
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Identifying what database is used, using SQLITE_VERSION() and seeing it is SQLITE. Then dumping the schema of SQLITE",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 0
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Dumping the Users table",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 20,
            "seconds": 30
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Dumping the other tables, getting the name of the admin in the answers table",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 10
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Using username-anarchy to generate a bunch of potential usernames, then using CrackMapExec to spray ssh",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 28,
            "seconds": 20
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Logging into the webserver, looking at the webserver code and not really finding anything",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 29,
            "seconds": 30
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Looking at sudo rules to see I can run build-installer.sh, which is a wrapper around pyinstaller",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 32,
            "seconds": 0
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Looking at the PyInstaller spec file, to show we can include files in the executable that gets created by pyinstaller",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 34,
            "seconds": 50
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Including files owned by root such as ssh key, shadow and flag in the specfile for pyinstaller ",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 35,
            "seconds": 30
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Using Pyinstxtractor to extract the pysinstaller exe and downloading our files",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 39,
            "seconds": 30
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Beyond Root: Decompiling the QReader Application with pycdc (Decompyle++)",
        "machine": "HackTheBox - Socket",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 47
        },
        "videoId": "936WoTYYEnQ"
    },
    {
        "line": " Check out Snyk here: https://snyk.co/ippsec",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Introduction talking about the application we are testing and identifying NoSQL Injection with $ne",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Showing the RegEx Operator, which will let us do partial matches and enable us to validate characters one at a time",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Start of sponsored shoutout to snyk",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 32
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Showing Snyk find some vulnerabilities with Open Source Security",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 15
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Showing Snyk's Code Security",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 40
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Showing and talking about how to patch the vulnerability",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 54
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " End of Snyk Shoutout, starting our python script to perform this NoSQL Injection",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 37
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Testing out our test_login logic to identify if we had a successful login or not",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 20
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Showing how we can identify the length of the string we want",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 5
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Creating a loop to automatically identify the length of the string",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 20
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Adding exception handling to the function and talking about the benefits",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 20
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Creating a function to get the username",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 40
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Explaining what our Get_Username function currently does",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 20,
            "seconds": 30
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Doing a benchmark on our first iteration of the script and seeing it takes slightly over 3 minutes ",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 25
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Adding in a break so it doesn't loop over the full character set every time which gets us to 32 seconds",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 10
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Talking about the major optimization trick we are going to do, validating multiple characters at one time",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 26,
            "seconds": 0
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Breaking the enumerating a single character into its own function for exception-handling purposes",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 27,
            "seconds": 20
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Start of coding the optimization trick",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 29,
            "seconds": 20
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Running our code and seeing we got it down to 12 seconds. Moving on to testing the password.",
        "machine": "Dumping Data with NoSQL Injection via Regex and Python",
        "tag": "",
        "timestamp": {
            "minutes": 35,
            "seconds": 6
        },
        "videoId": "6mkZy8vZ82M"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 58
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Trying to identify the technology running the webapp, 404 page reveals it is likely tomcat",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 45
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Running Gobuster, then checking out the page",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Uploading an image and discovering an file disclosure vulnerability",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Talking about how File Disclosures in Java can reveal directory listings, and grabbing pom.xml",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 15
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Using Snyk to identify vulnerabilities, but first we have to install Maven",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 45
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Exploiting CVE-2022-22963 Manually",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 45
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Playing with the exploit getting a reverse shell by dropping a file on the box (easy), then doing it without touching disk",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 55
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Shell as Frank, finding a password in the .m2/settings.xml file",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 30
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Shell as Phil",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 50
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Using find to show files owned by a group and finding a /opt/automation/tasks directory with ansible stuff",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 0
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Running Pspy to identify ansible is running on a cron job and executing any playbook in the automation directory",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 10
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Creating a playbook that sends us a shell",
        "machine": "HackTheBox - Inject",
        "tag": "",
        "timestamp": {
            "minutes": 26,
            "seconds": 30
        },
        "videoId": "3VuIaUvHsTI"
    },
    {
        "line": " Introduction, talking about RouterSpace and why we can't just do what we did in that video",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Installing Genymotion, Virtual Box, and ADB; while talking about why I don't use Android Studio/AVD. Simply because genymotion just works.",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 25
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Make sure you upgrade your memory, processors, and enable Virtualization in your VM Settings!",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 5
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Running Genymotion and starting a Pixel 3 XL",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Converting BurpSuites Certificate to PEM Format with openssl x509 -inform der -in [name of cert] -out burp.pem",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 37
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Renaming the certificate to 9a5ba575.0, and showing how we got that name",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 20
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Starting the device and showing the certificate authorities",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 0
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Copying the certificate to /system/etc/security/cacerts/, and showing how to remount to rw",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 0
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Showing how to set the proxy through both the GUI and via ADB",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 10
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Installing GAPPS",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 50
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Showing how to unset the proxy from ADB",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 30
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Creating an alias to set and unset the proxy via adb",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Opening the google play store and logging in and install Wayzn to see if we can intercept traffic",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Showing we intercepted traffic from Wayzn, then installing Instagram",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 20
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Attempting to login to instagram and getting an error message",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 50
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Setting up Frida both on our computer and android device",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 20
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Showing Frida is working, getting ps output from the android device",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 20
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Downloading the instragram ssl pinning bypass script",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 55
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Using frida to start instagram and loading the script to bypass the SSL Checking",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 20
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Setting the proxy and showing us intercept instagram traffic",
        "machine": "Intercepting Android App Traffic with BurpSuite",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 15
        },
        "videoId": "xp8ufidc514"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 3
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Checking out the site, discovering an email (collect.htb) and setting up gobuster",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Discovering forum.collect.htb which is running MyBB, someone uploaded a Burp history file which contains API Information",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 6,
            "seconds": 0
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Manually examining the BurpSuite Backup File, and discovering it contains full HTTP Requests",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 9,
            "seconds": 30
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Sending a POST Request to /set/role/admin with the secret token",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 12
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " The Admin Page has a separate registration forum, which sends an XML Request. Trying XXE and discovering Blind XXE",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 50
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Using my Blind XXE Script to make exfiltrating files quicker",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Trying to extract the Apache Configuration, getting the developers.collect.htb.conf file and then getting/cracking the htpasswd file",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 23,
            "seconds": 20
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Logging into developers.collect.htb, cannot login, going back to the Blind XXE getting source code and finding Redis Creds",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 25,
            "seconds": 50
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Enumerating Redis, seeing PHP Sessions, and changing our cookie to say we are an admin",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 28,
            "seconds": 50
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Using the PHP Filter Chain to get code execution on this include() which leads to a shell",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 36,
            "seconds": 50
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Looking at listening ports, seeing a few things on localhost. PHP FPM is listening on 9000, injecting code with fcgi.py into that and getting shell as Victor",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 44,
            "seconds": 20
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Grabbing the Pollution_API Source Code (listening on port 3000), then using Snyk to look for vulnerabilities",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 52,
            "seconds": 45
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Seeing where Lodash is used and talking about Prototype Pollution",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 55,
            "seconds": 30
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Logging into the API",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 59,
            "seconds": 30
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Our user is not an admin, logging into the MySQL Database and changing our role to admin",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 62,
            "seconds": 0
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Testing our ability to send messages",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 65,
            "seconds": 0
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Using Javscript Prototype pollution to set SHELL to a local file we created, which the exec() call uses and getting root.",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 66,
            "seconds": 9
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Doing this exploit without the need to drop a file by setting SHELL to /proc/self/exe",
        "machine": "HackTheBox - Pollution",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 67,
            "seconds": 0
        },
        "videoId": "dQt5iRFtgAY"
    },
    {
        "line": " Introduction why you should setup logging",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Start of configuring UFW, enabling UFW and setting the policy to accept all",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 50
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Showing how to insert IPTABLES Rules into UFW's Config",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Using the LineInFile Ansible Module to add our IPTABLES Line to Log SYN Packets on the INPUT Chain",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 10
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " The IPTABLES Rule that logs all SYN Packets on INPUT",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 50
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Finding out rsyslog is disabled, enabling it",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 20
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Showing that we are now logging when boxes initiates a connection to us",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 20
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Moving our UFW Logging into our main playbook as a role",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 20
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Start of talking about AuditD",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 40
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Start of configuring the Playbook to install/configure AuditD",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 30
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Downloading auditd.rules from Florian Roth's github",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 40
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Showing ausearch that allows us to search through Audit Logs",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 30
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Installing Laurel to make auditd logs a bit easier for us to read",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 40
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Creating the _laurel user and needed directories",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 23,
            "seconds": 50
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Downloading the Laurel Configuration Files",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 27,
            "seconds": 0
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Using get_file to download and install the laurel binary",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 30,
            "seconds": 30
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Laurel did not work, troubleshooting the error.  Laurel may not have been able to read the config but our read-users config was also bad",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 37,
            "seconds": 0
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Showing Laurel working, we now have auditd logs in JSON Format",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 50
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Cleaning up our playbook a little bit with loops and copying it to our main playbook as a role",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 43,
            "seconds": 50
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Testing the playbook on a fresh install of parrot",
        "machine": "Configuring Iptables/UFW and Auditd with Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 50,
            "seconds": 30
        },
        "videoId": "rSIANUSRH-g"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 56
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " Running Gobuster in VHOST Detection mode to find the dev subdomain",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 15
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " Intercepting a request to dev.stocker.htb and seeing an connect.sid  cookie and x-powered-by header saying express, both indicating it uses NodeJS/Express",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 50
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " Explaining why I'm trying these injections",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " Bypassing login with mongodb injection by setting both username and password to not equals instead of equals",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 0
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " Playing with the e-commerce store and seeing it gives us a PDF",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 10
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " Using exiftool to see how the PDF was generated",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 45
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " Inserting an HTML IFRAME when we purchase an item to see if the PDF Generated will include local files",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 5
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " Extracting /var/www/dev/index.js and getting the mongodb password which lets us log into the server",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 0
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " The order numbers don't appear to be that random, looking at the source code to identify how this is generated. It's just mongo's object ID which is heavily based upon time stamps",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 50
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " Looking at sudo, we can perform a directory traversal to execute run any .js file as root",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 26,
            "seconds": 0
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " Showing that you can now put regex in the Sudoers file which would fix this exploit",
        "machine": "HackTheBox - Stocker",
        "tag": "",
        "timestamp": {
            "minutes": 27,
            "seconds": 50
        },
        "videoId": "fWMHh8GYqJE"
    },
    {
        "line": " Introduction talking about the power of Jinja2",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Quick Jinja2 introduction, showing how Ansible uses templates",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 50
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Using Jinja2 Loops with Ansible Variables to build URL's of Firefox Plugins and not put a comma on the last item.",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 25
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Showing how we can automate installing extensions in Firefox by editing the /usr/share/firefox-esr/distribution/policies.json",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 40
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Copying our test playbook of configuring Firefox into our main playbook as a role",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 30
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Showing a really good BurpSuite role, but we won't use this. I'd recommend you learn it",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 23,
            "seconds": 0
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Short rant on what I initially tried to do but gave up attempting (grabbing certificate out of userPrefs)",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 26,
            "seconds": 0
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Showing how the Ansible Plugin works, by starting BurpSuite in Headless mode, accepting the license then downloading off of Burps Website",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 28,
            "seconds": 30
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Struggling to get a shell script to download the Burp Certificate",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 30,
            "seconds": 45
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Playbook appears to work, but Burp was running from a previous test which made it work.  We fix this at 1:08:15",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 35,
            "seconds": 30
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Using our VSCode with Github Copilot to have AI Help us make playbooks",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 37,
            "seconds": 30
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Telling BurpSuite to only download the Certificate if it doesn't exist already",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 20
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Back to automating firefox, having it autoinstall our CA Certificate from BurpSuite",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 42,
            "seconds": 0
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Editing the font sizes in BurpSuite",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 48,
            "seconds": 30
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Install Jython and JRuby so we can easily install BurpSuite Plugins",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 50,
            "seconds": 20
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Attempting to install our playbook on a fresh copy of Parrot and running into an issue.",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 64,
            "seconds": 38
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Fixing our BurpSuite Activation, simplifying the shell command by making it a bash script",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 68,
            "seconds": 15
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Adding a pkill Java and increasing the time we wait for burpsuite to run. Then showing everything works!",
        "machine": "Configuring Burpsuite and Firefox via Ansible - Intro to Jinja2 and Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 76,
            "seconds": 6
        },
        "videoId": "XDJB0TVKtNk"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Examining SSL Certificates and seeing \"sequel-DC-CA\", which hints towards there being a Certificate Authority",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 10
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Using CrackMapExec to enumerate file shares",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 45
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Accessing the Public Share, downloading a PDF File and finding credentials in it, using CME again and using CME to test smb, winrm, and mssql",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Using mssqlclient to login to access MSSQL",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Using XP_DIRTREE to request a file off an SMB Share in order to intercept the hash of the user running MSSQL, then cracking it",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 50
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Using Evil-WinRM to login to the box with SQL_SVC account, uploading Certify.exe and not finding a vulnerable certificate",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 45
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Looking at the error logs and discovering a user entered their password as a username so it got logged. Logging in as Ryan.Cooper",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 20,
            "seconds": 45
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Running Certify again as Ryan and finding a vulnerable UserAuthentication Certificate",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 40
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Using Certify Scenario #3 to create a UserAuthentication certificate with Administrator as the Alt Name which lets us authenticate as them",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 0
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Cannot use the certificate for WinRM because there isn't SSL (5986)",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 0
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Uploading Rubeus and the PFX File to the box, so we can use the PFX to obtain the local administrator NTLM Hash",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 30,
            "seconds": 0
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Showing an alternative method with Certipy which lets us run this attack from our attacker box without uploading files to the box",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 33,
            "seconds": 30
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Showing an alternate way to root via Silver Tickets and MSSQL, Explaining what a TGS Ticket is and why this attack works",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 37,
            "seconds": 40
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Generating the NTLM Hash from the password because that is what signs/encrypts kerberos tickets",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 41,
            "seconds": 10
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Using Ticketer.py to generate a silver ticket which lets us log into MSSQL as Administrator",
        "machine": "HackTheBox - Escape",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 43,
            "seconds": 0
        },
        "videoId": "PS2duvVcjws"
    },
    {
        "line": " Github Repo: https://github.com/ippsec/parrot-build",
        "machine": "Building Ippsec's Parrot VM - How to Run the Playbook.",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "eMI7g4huIsc"
    },
    {
        "line": " This is a quick video just to show how to run my Ansible Playbook to build out my Parrot VM. Check out the Building Parrot Playlist to see how this all works, so you can customize things to your liking.",
        "machine": "Building Ippsec's Parrot VM - How to Run the Playbook.",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "eMI7g4huIsc"
    },
    {
        "line": " Sponsor Link: https://snyk.co/ippsec",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Repo Here: https://github.com/IppSec/parrot-build",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Introduction Promoting Snyk",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Showing why we are using VSCode and not Codium",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 25
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Showing Ansible Galaxy, which are community provided roles. Specifically the Visual Studio Code one and creating requirements.yml",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Adding the Visual Studio Code role to our playbook and installing a couple extensions",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 50
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Going to the Visual Studio Code Marketplace and showing how we get extension names to add to our playbook, then running our playbook",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 30
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Opening VS Code and Signing in to Copilot, then showing it do some predictive typing with python",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 20
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Showing Autopilot works with Ansible Playbooks",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 25
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Downloading the web application on TwoMillion, so we can use Snyk to analyze it",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 10
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Installing the Snyk VSCode Plugin",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 28
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Opening VS Code and authenticating with Snyk",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 50
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Talking about Snyk Open Source Security",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 30
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Enabling Snyk Code Scanning to have it scan our code and find vulnerabilities",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 40
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Showing Snyk find the RCE Vulnerability and it providing examples on how other applications fixed the vulnerability",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 15
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Installing an PHP Extension to enable our IDE to have better PHP Support and easily see where functions are called",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 20
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Diving into the RCE Vulnerability and figuring out HTTP Endpoint that is vulnerable to it",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 30
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Patching the vulnerability",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 15
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Showing the code Quality Piece and it talking about unreachable code",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 0
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Playing with Copilot, adding a new HTTP Endpoint to delete a VPN and seeing how much code it will auto suggest",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 15
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " Closing thoughts, talking about future videos in this series",
        "machine": "Installing VSCode with Copilot and Snyk via Ansible",
        "tag": "",
        "timestamp": {
            "minutes": 27,
            "seconds": 0
        },
        "videoId": "VRz_vtPBZzA"
    },
    {
        "line": " The Github Repo: https://github.com/IppSec/parrot-build",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Intro downloading the HTB Edition of Parrot and talking about basic VM Things",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Talking about using Ansible to install software after and why we should not use Snapshot's for a long-term solution.",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 20
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Parrot has been installed! Fixing up the Terminal real quick and talking about how to set the prompt like I have it",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Installing Ansible with apt",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 0
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Creating our first playbook, doing some quick introduction things",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 30
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Creating an Ansible Role to configure tmux",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 30
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Looking at all the ansible_facts to see the variable where our home is stored",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 50
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Using the copy module in ansible to copy files to our users home directory",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 20
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Start creating an ansible role for customizing our terminal",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 27,
            "seconds": 55
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Looking at how Mate Terminal creates profiles and exporting our settings so ansible can load it. Lots of using dconf",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 30,
            "seconds": 10
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Using Ansible to start configuring mate terminal",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 37,
            "seconds": 50
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Creating a new fact (variable) and using regex_replace to remove the last character, so we can append to the list.",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 38,
            "seconds": 27
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Using when, so an ansible task will be skipped if the string 'video' is in profile_list.",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 43,
            "seconds": 30
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Creating an Ansible Role to install tools such as Kerbrute",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 48,
            "seconds": 10
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " This time our role will have multiple task files, so when we have 100 tools we will be able to easily remove tools we don't want",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 49,
            "seconds": 15
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Using the ansible shell module to run multiple commands",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 51,
            "seconds": 10
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Ansible script complete! Rebuilt my VM and am running the script to see if it works",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 55,
            "seconds": 30
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Looking at the role that errored, showing when there are no profiles /org/mate/terminal/global does not exist",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 57,
            "seconds": 10
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Adding another check to create a standard profile_list.value when profile_list is None",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 58,
            "seconds": 0
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Re-running our playbook and having our parrot built!",
        "machine": "Rebuilding Parrot and Using Ansible to Script Customizations to My Image",
        "tag": "",
        "timestamp": {
            "minutes": 59,
            "seconds": 40
        },
        "videoId": "2y68gluYTcc"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Start of nmap, assuming the web app is NodeJS based upon a 404 message",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Running Gobuster and discovering Tiny File Manager",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 20
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Looking for the source code and finding a default password of admin@123",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 0
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Navigating to uploads and attempting to upload a php shell to the website",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 45
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Getting a reverse shell with our php shell",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 7,
            "seconds": 45
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Reverse shell returned",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Talking about hidepid=2 is set, so we can't see processes for other users",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 9,
            "seconds": 30
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Looking at nginx configuration to see what port 9091 is and discovering a new subdomain (soc-player.soccer.htb)",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Navigating to soc-player.soccer.htb and discovering a few more pages",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " The /check endpoint looks like it is vulnerable to Boolean SQL Injection",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Intercepting the websocket in BurpSuite and showing ",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Using SQLMap to dump the database, first time I've used SQLMap with websockets",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 15,
            "seconds": 20
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Attempting to ssh with creds found in the database and logging in as player",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 23,
            "seconds": 30
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Running LinPEAS",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 26,
            "seconds": 50
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Looks like we can run doas, which is like sudo. Looking at the command we can run and seeing dstat",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 30,
            "seconds": 50
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Creating a dstat plugin, then executing it with doas",
        "machine": "HackTheBox - Soccer",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 33,
            "seconds": 30
        },
        "videoId": "V_CkT7xyiCc"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Start of nmap, scanning all ports with min-rate",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 18
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Browsing to the web page and taking a trip down memory lane with the HackTheBox v1 page",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 35
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Attempting to enumerate usernames",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Solving the HackTheBox Invite Code Challenge",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 5,
            "seconds": 10
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Sending the code to JS-Beautify",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 5,
            "seconds": 50
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Sending a curl request to /api/v1/invite/how/to/generate to see how to generate an invite code",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 45
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Creating an account and logging into the platform then identifying what we can do",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 40
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Discovering hitting /api/v1/ provides a list of API Routes, going over them and identifying any dangerous ones",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 16,
            "seconds": 50
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Attempting a mass assignment vulnerability upon logging in now that we know there is an is_admin flag",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 17,
            "seconds": 50
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Playing with the /api/v1/admin/settings/update route and discovering we can hit this as our user and change our role to admin",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Now that we are admin, playing with /api/v1/admin/vpn/generate and finding a command injection vulnerability",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Got a shell on the box, finding a password in an environment variable and attempting to crack the user passwords",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 26,
            "seconds": 15
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Re-using the database password to login as admin, discovering mail that hints at using a kernel privesc",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 30,
            "seconds": 0
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Searching for the OverlayFS Kernel Exploit",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 32,
            "seconds": 0
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Finding a proof of concept for CVE-2023-0386, seems sketchy but GCC is on the HTB Machine so i don't feel bad about running it",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 35,
            "seconds": 0
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Running the exploit and getting Root, finding an extra challenge thank_you.json, which is can be done pretty much in CyberChef",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 37,
            "seconds": 27
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Looking deeper at the invite code challenge to see if it was vulnerable to Type Juggling (it was back in the day but not anymore)",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 42,
            "seconds": 20
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Testing for command injection with a poisoned username",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 43,
            "seconds": 30
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Didn't work, looking at the source code and discovering it had sanitized usernames on the non-admin function",
        "machine": "HackTheBox - TwoMillion",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 47,
            "seconds": 20
        },
        "videoId": "Exl4P3fsF7U"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Taking a look at the web page",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 50
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Looking for LFI, then exploring /proc to find where the application is and extracting the source code",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 30
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Taking a look at the Python Source Code and discovering port 5000 is the dotnet application and uses websockets",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Using wscat to test the websocket",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 55
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Bruteforcing the /proc/{pid}/cmdline directory in order to see running processes and find the dotnet dll",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Reversing Bagel.dll and discovering a deserialization vulnerability in dotnet which allows us to read files",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 13,
            "seconds": 45
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Looking at what TypeNameHandling means in NewtonSoft's deserialize",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 0
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Looking for a gadget to use with our deserialization",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 20,
            "seconds": 0
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Building the deserialization payload",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 40
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Dumping Phil's SSH Key, then logging in",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 20
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " The dotnet app, had developers password, switching to that user",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 0
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Developer can run dotnet with sudo, using the FSI gtfobin to get a shell.",
        "machine": "HackTheBox - Bagel",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 50
        },
        "videoId": "teHGtY_ta40"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Start of nmap discovering Active Directory (AD)",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Using wget to mirror the website, then a find command with exec to run exiftool and extract all user names in metadata",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 4,
            "seconds": 15
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Using Username Anarchy to build a wordlist of users from our dump and then Kerbrute to enumerate valid ones",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 6,
            "seconds": 45
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Building Kerbrute from source to get the latest feature of auto ASREP Roasting",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 13,
            "seconds": 55
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Kerbrute pulled the wrong type of hash, using the downgrade to pull etype 18 of the hash",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 16,
            "seconds": 20
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Running Bloodhound with D.Klay, using Kerberos authentication",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 21,
            "seconds": 30
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Going over the bloodhound data and finding some attack paths",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 24,
            "seconds": 50
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Manually parsing the Bloodhound with JQ to show descriptions for all users and finding the SVC_SMB password in the Description",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 31,
            "seconds": 13
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " EDIT: Don't want to use Blodhound? Showing LdapSearch with Kerberos, and why the FQDN has to be first in the /etc/hosts file",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 34,
            "seconds": 45
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " End of edit: Using SMBClient with SVC_SMB and Kerberos to download files",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 40,
            "seconds": 30
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Sharing my internet connection from Linux to Windows, so I can run test.exe on Windows",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 46,
            "seconds": 22
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Running test.exe and getting m.lovegod's password from LDAP",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 53,
            "seconds": 45
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Going back to Bloodhound, and now we can perform the attack of adding a member to a group then creating shadow credentials for winrm_user",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 56,
            "seconds": 30
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Pulling a version of Impacket that has DACLEDIT and building it",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 57,
            "seconds": 30
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Running DaclEdit to give m.lovegod permission to add users to a group and then net rpc to add him",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 61,
            "seconds": 0
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Running Certipy to add shadow credentials to winrm_user so we can login ",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 68,
            "seconds": 20
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Using WinRM to login to the box with our shadow credential",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 72,
            "seconds": 0
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Start of fumbling around with KRBRelay to privesc",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 75,
            "seconds": 30
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Using RunasCS to change our LoginType which may allow us to run KRBRelay",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 78,
            "seconds": 40
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Pulling the CLSID of TrustedInstaller which works and allows us to add ourselves to the administrator group",
        "machine": "HackTheBox - Absolute",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 87,
            "seconds": 40
        },
        "videoId": "rfAmMQV_wss"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Precious",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "2XSFWiGa2j0"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Precious",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "2XSFWiGa2j0"
    },
    {
        "line": " Checking out the web page and finding command injection in the URL ",
        "machine": "HackTheBox - Precious",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "2XSFWiGa2j0"
    },
    {
        "line": " Space appears to be a bad character with command injection. Normal tricks like brace expansion or IFS don't work.",
        "machine": "HackTheBox - Precious",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 20
        },
        "videoId": "2XSFWiGa2j0"
    },
    {
        "line": " Trying IFS to be a space but the trailing character makes it difficult",
        "machine": "HackTheBox - Precious",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 7,
            "seconds": 20
        },
        "videoId": "2XSFWiGa2j0"
    },
    {
        "line": " Taking a step back from the RCE, downloading the PDF to examine metadata and discovering it was made with pdfkit 0.8.6, which has public POC's against it",
        "machine": "HackTheBox - Precious",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "2XSFWiGa2j0"
    },
    {
        "line": " The POC puts a space before the exploit which then removes the space being a bad character in our exploit",
        "machine": "HackTheBox - Precious",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "2XSFWiGa2j0"
    },
    {
        "line": " Beyond Root/Edit: Using $- to terminate the $IFS, allowing us to bypass the need to prepend the space",
        "machine": "HackTheBox - Precious",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 14,
            "seconds": 29
        },
        "videoId": "2XSFWiGa2j0"
    },
    {
        "line": " End of edit, shell as ruby, discovering credentials in a config file for henry",
        "machine": "HackTheBox - Precious",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 20,
            "seconds": 30
        },
        "videoId": "2XSFWiGa2j0"
    },
    {
        "line": " Henry can run sudo, discover he can execute a ruby script",
        "machine": "HackTheBox - Precious",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 22,
            "seconds": 53
        },
        "videoId": "2XSFWiGa2j0"
    },
    {
        "line": " Looking up a ruby deserialization exploit with YAML",
        "machine": "HackTheBox - Precious",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 25,
            "seconds": 50
        },
        "videoId": "2XSFWiGa2j0"
    },
    {
        "line": " Finding a different payload and getting a root shell",
        "machine": "HackTheBox - Precious",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 27,
            "seconds": 35
        },
        "videoId": "2XSFWiGa2j0"
    },
    {
        "line": " Introduciton",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " Start of nmap, navigating to the page and identifying the framework based upon 404",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 50
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " Playing around looking at javascript source, not getting anything",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " Playing around with prd.m.rengering-api.interface.htb... I'm guessing file not found is the webserver, not actual code.",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 30
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " Showing the difficulty of dirbusting API Servers",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 40
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " Showing importance of updating FeroxBuster",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 20
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " Playing with the HTML2PDF endpoint and discovering we need to send a POST with HTML as an argument",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 0
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " The PDF Generated has dompdf 1.2.0 in the exif data searching for exploits",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 20
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " Researching how CVE-2022-28368 works, then manually exploiting the vulnerabiltiy",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 20,
            "seconds": 40
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " The CSS/Font is created, running the exploit and finding where the Font (PHP File) gets uploaded to",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 28,
            "seconds": 50
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " Reverse shell returned",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 34,
            "seconds": 30
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " Uploading pspy to examine how the box cleans itself up",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 38,
            "seconds": 15
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " Discovering and exploiting Bash Arithmetic Injection",
        "machine": "HackTheBox - Interface",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 40,
            "seconds": 20
        },
        "videoId": "yM914q6zS-U"
    },
    {
        "line": " Introduction",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Start of Nmap ",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Playing with the web page, but everything is static doing a VHOST Bruteforce to discover school.flight.htb",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Discovering the view parameter and suspecting File Disclosure, testing by including index.php and seeing the source code",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 7,
            "seconds": 10
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Since this is a Windows, try to include a file off a SMB Share and steal the NTLMv2 Hash of the webserver then crack it",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 9,
            "seconds": 20
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Running CrackMapExec (CME) checking shares, doing a Spider_Plus to see the files in users",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 13,
            "seconds": 30
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Running CrackMapExec (CME) to create a list of users on the box then doing a password spray to discover a duplicate password",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 18,
            "seconds": 30
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Checking the shares with S.Moon and discovering we can write to the Shared Directory",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 20,
            "seconds": 20
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Using NTLM_Theft to create a bunch of files that would attempt to steal NTLM Hashes of users when browsing to a directory getting C.Bum's creds with Desktop.ini",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 21,
            "seconds": 30
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " C.Bum can write to Web, dropping a reverse shell ",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 26,
            "seconds": 18
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Reverse shell returned as svc_apache, discovering inetpub directory that c.bum can write to",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 29,
            "seconds": 30
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Using RunasCS.EXE to switch users to cbum",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 32,
            "seconds": 40
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Creating an ASPX Reverse shell on the IIS Server and getting a shell as DefaultAppPool",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 37,
            "seconds": 30
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Reverse shell returned as DefaultAppPool, showing it is a System Account",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 48,
            "seconds": 0
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Uploading Rubeus and stealing the kerberos ticket of the system account, which because this is a DC we can DCSync",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 50,
            "seconds": 5
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Running DCSync",
        "machine": "Hack The Box - Flight",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 52,
            "seconds": 50
        },
        "videoId": "Jor8DNWLmiM"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Start of nmap, attempting to login with FTP then going to the website",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Running WPScan with enumerate all plugins in aggressive mode",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 45
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Taking a look at the site while WPScan runs and finding a plugin (BookingPress-Appointment-Booking) and finding an exploit",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Replacing the NONCE in the exploit to get it working",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 15
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Using SQLMap to dump everything, while we attempt to get only the data we think we are interested in. ",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Manually dumping the WP_USERS table with the SQL Injection",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Cracking the wordpress hashes to get a user credential",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 13,
            "seconds": 25
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " EDIT: Playing with SQLMap to get it to dump this database",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 16,
            "seconds": 57
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Searching for Wordpress 5.6.2 exploits, discovering an XXE in WAV Files",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 23,
            "seconds": 30
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Using the XXE to exfil files off the webserver",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 25,
            "seconds": 20
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Discovering FTP Credentials in the WP Config, logging into the FTP Server and finding SSH Credentials",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 30,
            "seconds": 20
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Logging in as JNelson and seeing PassPie, which is a CLI Password Manager that uses PGP/GPG Keys",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 32,
            "seconds": 40
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Cracking to PGP/GPG Key with John and getting root",
        "machine": "HackTheBox - MetaTwo",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 34,
            "seconds": 30
        },
        "videoId": "Alx5KQWq7ZM"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Start of gobuster",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Discovering an upload form, looking for where things get uploaded",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " The upload gives us ExifTool output, including the version number to show it is vulnerable to CVE-2022-23935",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 50
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " You should really watch \"The Perl Jam\"",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 11
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Showing the weird syntax of perl's file open and how | leads to RCE",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 40
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Back to the box, exploiting and getitng a shell",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 15
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Reverse shell returned, looking at the uploaded files",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 20,
            "seconds": 0
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Running LinPEAS to discover a cron",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 35
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " There's an outlook email message with an attachment. Copying it then converting to eml format and extracting the file",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 0
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " The file was an windows event log. Using Chainsaw to search through the logs",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 45
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Using Chainsaw and JQ to parse the Successful and Failed logins",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 38,
            "seconds": 30
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " In the failed logins field, there's a password as a username and logging in as smorton",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 42,
            "seconds": 25
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " There's a binary on this box, copying it to us and opening in Ghidra",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 44,
            "seconds": 35
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Start of reversing, just showing strings and finding out where the get loaded in the program",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 30
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Running the binary in GDB and showing how arguments work, then renaming and retyping variables to have decompiled output make more sense",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 47,
            "seconds": 0
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Retyping done, renaming a few variables to make things easier to read",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 51,
            "seconds": 30
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Cleaning up the curl_easy_setopt, code by creating an enum in C then using Ghidra to \"Parse C Source\"",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 53,
            "seconds": 45
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Now that the code is cleaned up, it is obvious the program executes perl scripts... Funny thing is the perl binary can execute non-perl scripts",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 59,
            "seconds": 20
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Showing there is also a race condition in the binary because the curl downloads to CWD and even thoe its owned by root we can rename it and take control over the file",
        "machine": "HackTheBox - Investigation",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 61,
            "seconds": 5
        },
        "videoId": "X5hVEuWmehk"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 57
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Checking out the API Documentation",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 45
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Interacting with the API Server",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Showing the file_url, parameter and showing we can access local files",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 15
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Building a webserver in Flask to make some middleware to exploit this SSRF, allowing us to easily download files from the webserver",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 36
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Our middleware works! Can download files off the server. ",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 50
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Downloading the apache2 configuration to find where all the webserver files are hosted",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 15
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Using gobuster against our middleware to discover any hidden webfiles, have to edit our middleware to return 404 if it didn't return a file",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 30
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Running gobuster against our code now that it gives 404... Its going slow, switching to a different wordlist and finding a .git repository",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 45
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Git-Dumper fails because our middleware isn't setting content-type correctly.  Have to fix that",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 50
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Opening the source code from the .git repo up in Visual Studio code and Snyk shows us there is an LFI",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 50
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Getting Unacceptable URL when trying to exploit this. Removing http:// fixes that showing parse_url in php fails to return the hostname when there is no wrapper",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 0
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Getting RCE on a include() statement without poisoning a file on the server with PHP Gadgets",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " EDIT: Showing there is also a URL Parsing bug on handler.php and we can change the domain that script goes to by inserting an \"@\"",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 58
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " With a shell on the box, discover we can use git with sudo. Inserting a POST-COMMIT hook",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 31,
            "seconds": 52
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Generating a ed25519 ssh key, because the public key is extremely small... It's also more secure than RSA",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 0
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Cannot make a git commit because we can't write to the directory. But since we can write to .git we can add files outside of the working directory and commit",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 38,
            "seconds": 10
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Shell as SVC, discovering we can write to systemd, creating a malicious service to get root",
        "machine": "HackTheBox - Encoding",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 15
        },
        "videoId": "iyGvnmkx1es"
    },
    {
        "line": " Introduction talking a little bit about ",
        "machine": "Attacking Password Resets with Host Header Injection",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "KcYBV1L2w_s"
    },
    {
        "line": " Using Extension to show a legitimate password reset",
        "machine": "Attacking Password Resets with Host Header Injection",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 55
        },
        "videoId": "KcYBV1L2w_s"
    },
    {
        "line": " Modifying the host header and showing the website uses that in the sent email",
        "machine": "Attacking Password Resets with Host Header Injection",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 50
        },
        "videoId": "KcYBV1L2w_s"
    },
    {
        "line": " Talking about mail filters auto-clicking links, which means user interaction isn't always required",
        "machine": "Attacking Password Resets with Host Header Injection",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 40
        },
        "videoId": "KcYBV1L2w_s"
    },
    {
        "line": " Sending a password reset to one of my personal emails, to show a mail filter auto clicks the link",
        "machine": "Attacking Password Resets with Host Header Injection",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "KcYBV1L2w_s"
    },
    {
        "line": " Got our click! Checking the IP Address to show it was a bot",
        "machine": "Attacking Password Resets with Host Header Injection",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 40
        },
        "videoId": "KcYBV1L2w_s"
    },
    {
        "line": " Showing how easy this vulnerability can occur by having OpenAI Build us code!",
        "machine": "Attacking Password Resets with Host Header Injection",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 0
        },
        "videoId": "KcYBV1L2w_s"
    },
    {
        "line": " Verifying the code was indeed vulnerable",
        "machine": "Attacking Password Resets with Host Header Injection",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 45
        },
        "videoId": "KcYBV1L2w_s"
    },
    {
        "line": " Asking the AI ways to protect against this type of attack, the best way is to put a whitelist on valid domains used to generate password reset links",
        "machine": "Attacking Password Resets with Host Header Injection",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 45
        },
        "videoId": "KcYBV1L2w_s"
    },
    {
        "line": " Talking about the other ways to protect against this attack",
        "machine": "Attacking Password Resets with Host Header Injection",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 37
        },
        "videoId": "KcYBV1L2w_s"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 51
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Finding some vulnerable-looking parameters",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Testing some basic things for LFI, finding a WAF blocking ../.  Double encoding it to get passed",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 50
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Start of writing a script to abuse this LFI and crawl/download all the php source",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 11
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Making the script recursive, so it will check pages downloaded for new links",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 30
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Making the script save the files",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 50
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Opening the code in Visual Studio Code, and showing off Snyk's static code anlysis to highlight a Unserialization vuln",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 40
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Identifying how the site generates activation codes upon registration identifying an insecure use of SRAND(). Generating our own activation code",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 20
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Exploiting the PHP Unserialization by finding a vulnerable gadget (wakeup) which will save a file",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 30
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Building a deserialization object to download a file off our server and write it to the web directory",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 45
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " EDIT: Talking about webserver hardening (allow_url_fopen in php) and how it would slow down this attack",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 8
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " EDIT: Poisoning our PHP Session with PHP Code as our username, then building an object to copy that to the server so don't need to use a remote host",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 0
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Getting a shell on the box, dumping credentials from postgres",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 41,
            "seconds": 38
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Attempting to crack the passwords, failing, checking the source code to identify there is a hidden salt. Then cracking the passwords",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 44,
            "seconds": 55
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Passwords cracked logging in as bill",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 51,
            "seconds": 25
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Using pspy to identify a script runs to renew certificates",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 55,
            "seconds": 10
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Going over the bash script and identifying a command injection vulnerability.",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 57,
            "seconds": 15
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Failing for a bit because I didn't change the certificate time, then changed too much at once which caused me more problems",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 61,
            "seconds": 45
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Finding the CheckEnd parameter, setting our days equal to one but our payload doesn't work",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 66,
            "seconds": 4
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Putting the payload in $(), and getting root to the box",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 68,
            "seconds": 15
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Just making sure we fully understood why our first attempts failed",
        "machine": "HackTheBox - BroScience",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 70,
            "seconds": 20
        },
        "videoId": "kyPYfqMYQm8"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 11
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Running ffuf to discover the portal virtual host",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Logging in with admin:admin and discovering a new cookie",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 40
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Looking at the Node-Serialize exploit",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 15
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Attempting to do the exploit and discovering modsecurity blocks us, then putting some unicode in the payload to evade it",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 20
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Whoops forgot to end the payload with (), so thats why we didn't get our shell",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 20
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " EDIT Looking at how modsecurity is configured",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 11
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Showing the NGINX Error Log with modsecurity blocking, taking the unique ID going to the modsecurity log to get more information",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 33
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Looking at the JSDECODE transform for modsecurity to fix the rule",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 0
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Switching ModSecurity to Detection Only mode or Permissive so we don't block but get logs",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 30,
            "seconds": 30
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " END OF EDIT, putting an SSH Key on the box",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 31,
            "seconds": 42
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Attempting to unzip the backup.zip, discovering a password but is using ZipCrypto, doing a plaintext crac with bkcrack to extract it",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 34,
            "seconds": 15
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Dumping the sssd.ldb database used to join the linux server to the domain. Getting a credential",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 0
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Using kinit to get a kerberos ticket, then ksu to switch to root",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 44,
            "seconds": 20
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Having trouble with tunneling, looking at iptables to see it blocks non-root users from accessing 192.168.0.0",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 47,
            "seconds": 0
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Looking at the shares to discover a powershell program to reset mobile phone numbers",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 52,
            "seconds": 30
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Modifying a phone number via ldap and seeing a script will execute what we put in the field",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 62,
            "seconds": 30
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Attempting to steal a NTLMv2 Hash, having trouble because NTLM is disabled",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 71,
            "seconds": 40
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Forwarding port 445 from the webserver to us, so we can use its DNS Name, but need to enable GatewayPorts in SSHD's config to listen on a non-loopback port",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 74,
            "seconds": 15
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Building a list of users with ldapsearch, then password spraying the password we cracked to get access to bob.wood",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 80,
            "seconds": 5
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Downloading dpapi keys and chrome/edge files then using pypykatz to decrypt saved passwords",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 87,
            "seconds": 0
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Got all the files on our box, using pypykatz to decrypt saved passwords",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 96,
            "seconds": 11
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Showing the intended way of bypassing applocker which would allow us to run programs to automatically decrypt everything",
        "machine": "HackTheBox - Sekhmet",
        "tag": "",
        "timestamp": {
            "minutes": 105,
            "seconds": 0
        },
        "videoId": "vsgPsMZx59w"
    },
    {
        "line": " Three days ago, I was wondering how all the \"Tesla Live Now\" scams faked people talking.  After spending around $60 on \"Voice.AI\", I could change my voice to sound like Elon. I was googling to find a way to fake the video, and could probably do it with this: https://github.com/iperov/DeepFaceLive. But ended up finding ElonTalks.com (and anyonetalks.com), and the owner of that site was gracious enough to put my audio on top of his video.",
        "machine": "Twitter Live Now",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "IzmSQyFAR14"
    },
    {
        "line": " Introduction talking about how this box is about finding CVE's and building an exploit based upon exploit",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 50
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Running gobuster and showing the importance of using multiple wordlists.",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Attempting to register an account, which shows the endpoint /api/register but /api/ returns a 404",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Showing that raft-small-words wordlist won't discover .git but commons.txt will because commons has .git/HEAD",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 6,
            "seconds": 10
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Running Git-Dumper to extract the source then looking at the code",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 8,
            "seconds": 25
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Showing the vulnerable code and how secure the code appears at first glance without knowing specifics about the library",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Googling MySQLJS Sql Injection and showing how you would have found this exploit",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Showing how you could have found it blindly, passing an object into the SQL Query and doing SQL Injection on NodeJS with MySQL",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 11,
            "seconds": 30
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Logging in and finding OpenWebAnalytics version 1.7.3, finding a CVE and writeup for the vulnerability",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Showing the piece missing from the writeup that tells us how we can retrieve the cache file that can be used to reset a password",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Going over the code, and figuring out how the filename is generated.",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 24,
            "seconds": 40
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " FIXED PART, sorry cut out a piece on how I traced the function back to how it generates the filname",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 28,
            "seconds": 30
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Resetting the admin account from the exposed cache file",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 31,
            "seconds": 29
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Exploiting the Mass Assignment Vulnerability to write to a configuration file, to increase log verbosity, file name of log, and then poisoning the log",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 35,
            "seconds": 39
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Reverse shell returned",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 46,
            "seconds": 9
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Downloading a custom password generator that appears to be a compiled python executable.",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 48,
            "seconds": 39
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Running Pyinsxtractor to extract the pyc files out of the exe and then using Docker to match the python version which will allow uncompyle to convert pyc to py files",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 51,
            "seconds": 24
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Starting the docker and copying our password generator into it",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 56,
            "seconds": 19
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Showing the vulnerable password generation function, it is just using millisecond as a seed",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 57,
            "seconds": 29
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Building a script to generate all possible passwords, turns out it fails because Windows and Linux randomization is different",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 57,
            "seconds": 49
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Running pdf2john to generate a hash for the pdf file",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 60,
            "seconds": 29
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Running the script on windows to generate different passwords, then cracking ethans password with john",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 62,
            "seconds": 19
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Looking at SetUID Files, finding PINNS from CRI-O which is a binary related to Kubernetes",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 65,
            "seconds": 39
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " There's no man page for the PINNS binary, so looking at the source code to change the kernel parameter for core dumps",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 67,
            "seconds": 39
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Creating an exploit script, poisoning the core dump parameter, and generating a dump to execute our script and getting root",
        "machine": "HackTheBox - Vessel",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 71,
            "seconds": 0
        },
        "videoId": "ZANv0DlrTN8"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Start of nmap, then discovering a laravel app",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Laravel app uses Ziggy which exposes a list of all the routes",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Finding the /management/dump endpoint but we keep getting page expired (missing some headers)",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 7,
            "seconds": 50
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Using ffuf to brute-force the management/dump endpoint",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 50
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Dumping a list of users and then cracking them",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 15,
            "seconds": 55
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Enumerating virtualhosts, then looking at the roundcube version",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 21,
            "seconds": 30
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Discovering the first 32 characters of the password reset token does not change",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 27,
            "seconds": 50
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Attempting to bruteforce the password reset token for Charlie's password but discovering there's rate limiting in play",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 32,
            "seconds": 40
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Spamming the password reset link to generate multiple tokens, which will allow us to guess a token",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 50
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Edit, explaining the multiple password reset vulnerability more in depth",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 35,
            "seconds": 14
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " End of edit, resetting charlie's password",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 37,
            "seconds": 18
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Logging into Gitea as Jean and discovering a browser extension. Installing it to see what it does",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 41,
            "seconds": 0
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Explaining the XSS Filter check on the extension",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 45,
            "seconds": 20
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Initial payload to prove we can execute javascript",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 58,
            "seconds": 30
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " We have a base64 cradle to bypass the filter, creating a payload to interact with the gitea api to see what repo's the user has access to",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 73,
            "seconds": 45
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Getting information from the backups repo, then downloading the contents",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 84,
            "seconds": 4
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Extracting the tar from the git repo and getting an ssh key, finding passwords in the .git_credentials file",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 89,
            "seconds": 0
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Looking at the Laravel Source Code and discovering there is a command injection",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 93,
            "seconds": 20
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Looking at the email validation request, to show we need to create a valid checksum",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 98,
            "seconds": 0
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Explaining how the secret is generated from the source code, because the secret is at the beginning we can do a hash length extension",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 102,
            "seconds": 30
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Using Hash_Extender to generate a bunch of payloads in order to find the length of the secret",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 104,
            "seconds": 20
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Start of using python to submit the validation check",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 109,
            "seconds": 0
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Finding out the issue I'm running into, stupid formatting issue, having hash_extender output in a different format",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 121,
            "seconds": 50
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Getting a reverse shell on the container",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 130,
            "seconds": 50
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Finding there is a docker.sock file in our container, which enables us to interact with docker on the host",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 137,
            "seconds": 0
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Copying the Docker Executable to the container, which makes it much easier to interact with.  Starting a container with the host file system mounted to get root",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 139,
            "seconds": 30
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Extra content, showing SSH can tunnel named pipes (socket files)",
        "machine": "HackTheBox - Extension",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 143,
            "seconds": 35
        },
        "videoId": "qNsbf3EmLrA"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Start of Nmap",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Enumerating for virtual hosts with ffuf to find the api.mentorquotes.htb page",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Talking about FastAPI, attempting to utilize the endpoints but Authentication is required. Create an account",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 30
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Logging into the endpoint, discovering how to send authentication to the endpoints.  Don't really gain anything",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 0
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Using ffuf to search for extra endpoints and discover /admin/ but can't do anything",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 40
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Running NMAP again with UDP to discover SNMP",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 0
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " EDIT: Showing the minrate with nmap to scan UDP much quicker",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 10
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Using SNMP Walk",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 30
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Using SNMP-BRUTE to bruteforce other community strings",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 40
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " EDIT: Showing Hydra and OneSixtyOne fail to enumerate the second community string",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 20,
            "seconds": 45
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Using SNMPBruteWalk to dump the SNMP Database, showing how much faster it is than SNMPWalk",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 5
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " SNMP Shows running processes and arguments, there was a password passed via STDIN and we can get the password and login as James on FastAPI",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 0
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Accessing the Admin Endpoint, and figuring out what parameters it expects via error messages",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 28,
            "seconds": 15
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Discovering command injection in the backup endpoint",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 30,
            "seconds": 50
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Shell returned! ",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 19
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Editing the User Endpoint in FastAPI to dump password hashes. Talking about Pydantic",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 37,
            "seconds": 30
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " EDIT: Showing how we could background out reverse shell with nohup so we don't hang the webserver",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 40,
            "seconds": 45
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Cracking the hashes and getting svc's password and then logging into the server via SSH",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 47,
            "seconds": 15
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Doing some light forensics looking for files edited on the box shortly after linux was installed",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 53,
            "seconds": 0
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Finding a password in the snmpd password which gets us root",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 56,
            "seconds": 45
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Editing LinPEAS to add an extra regex to pull passwords out of SNMPd configuration",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 61,
            "seconds": 10
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Rebuilding the LinPEAS Shell script and then running LinPEAS to discover we now detect the password in SNMPD",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 64,
            "seconds": 30
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Forwarding PostGres to our server with chisel so we can dump the database",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 66,
            "seconds": 40
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Enumerating PostGres manually to dump users, then showing how to run code on postgres servers",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 72,
            "seconds": 20
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Setting up the FastAPI Environment on our local box, copying files from the docker",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 76,
            "seconds": 30
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Doing some light edits on the FastAPI Code, so we can run it within an IDE and set breakpoints",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 78,
            "seconds": 30
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Start of adding auth to the /user/ endpoint. ",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 84,
            "seconds": 14
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Fixing our /auth/login endpoint to accept our new login request",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 90,
            "seconds": 15
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Getting the browser to accept our bearer token",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 97,
            "seconds": 20
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Fixing up the /user/ endpoint to work with our bearer token",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 105,
            "seconds": 30
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Getting the user decorator to return the User Object which makes it easy for our code to identify our group",
        "machine": "HackTheBox - Mentor",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 110,
            "seconds": 20
        },
        "videoId": "MjddXhMF9vg"
    },
    {
        "line": " Feedback: https://orrsuc93j02.typeform.com/HTBSEASONS",
        "machine": "Ippsec's Thoughts on the New Hack The Box Seasons",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "M1cbUQkm-Rw"
    },
    {
        "line": " Sorry for the bad cam quality.  Screwed up recording, then was too lazy to re-record.",
        "machine": "Ippsec's Thoughts on the New Hack The Box Seasons",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "M1cbUQkm-Rw"
    },
    {
        "line": " Introduction why you should play NOW",
        "machine": "Ippsec's Thoughts on the New Hack The Box Seasons",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "M1cbUQkm-Rw"
    },
    {
        "line": " Going over the blog, what we mean by Beta Season",
        "machine": "Ippsec's Thoughts on the New Hack The Box Seasons",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 2
        },
        "videoId": "M1cbUQkm-Rw"
    },
    {
        "line": " How many points each machine is worth",
        "machine": "Ippsec's Thoughts on the New Hack The Box Seasons",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 15
        },
        "videoId": "M1cbUQkm-Rw"
    },
    {
        "line": " Talking about Tiers AKA the completion based rewards",
        "machine": "Ippsec's Thoughts on the New Hack The Box Seasons",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 45
        },
        "videoId": "M1cbUQkm-Rw"
    },
    {
        "line": " Talking about the prizes",
        "machine": "Ippsec's Thoughts on the New Hack The Box Seasons",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 30
        },
        "videoId": "M1cbUQkm-Rw"
    },
    {
        "line": " Talking about Academy Modules",
        "machine": "Ippsec's Thoughts on the New Hack The Box Seasons",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 30
        },
        "videoId": "M1cbUQkm-Rw"
    },
    {
        "line": " Talking about the competitive rewards",
        "machine": "Ippsec's Thoughts on the New Hack The Box Seasons",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 0
        },
        "videoId": "M1cbUQkm-Rw"
    },
    {
        "line": " FAQ",
        "machine": "Ippsec's Thoughts on the New Hack The Box Seasons",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "M1cbUQkm-Rw"
    },
    {
        "line": " Connecting to the Seasonal Machine",
        "machine": "Ippsec's Thoughts on the New Hack The Box Seasons",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "M1cbUQkm-Rw"
    },
    {
        "line": " How to give feeback.",
        "machine": "Ippsec's Thoughts on the New Hack The Box Seasons",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 40
        },
        "videoId": "M1cbUQkm-Rw"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 3
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Talking about Varnish, then looking at the website",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Poking at the Forgot Password functionality and showing we can enumerate valid users",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 40
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Discovering a username in the HTML Source",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 25
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Start talking about Host Header Injection, showing the page will use the Host Header when building redirects",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 10
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Using host header injection in the password reset, in order to send the user a link that goes to our box",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 28
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Explaining host header injection password reset in depth",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Live Demo showing that Host Header Injection on Password Reset may not require user interaction, mail filters love clicking links.",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Sending an email to myself, then checked Burpsuite Collaborator and saw some bots clicked our link and sent us the token that was in the email!",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 10
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Showing what Robert can do in the web application and discovering some odd behavior on the /tickets/ page.  Anything after the slash will return tickets and not 404!",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 43
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Identifying when Varnish decides to cache things by looking at the age header, and discovering whenever /static/ is in the URL it becomes cached and that the page doesn't check authorization before displaying cache",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 10
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Getting the administrator to click a link on /admin_tickets/static/Junk, which will cache /admin_tickets/ and allow anyone to view the admin_tickets page!",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Going in-depth with the Web Cache Deception attack and how Varnish works",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 55
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Showing the Varnish configuration",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 50
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Editing the Varnish configuration to add UserAgent as part of the caching logic to show it can have unique hashes per user. Then updating it to use Cookies instead",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 0
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Explaining the weird behavior with how the flask app does routing and allows the user to put /static/ in the URL and not have it go to the static directory",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 33,
            "seconds": 0
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Checking what Diego can run via sudo and discovering he can execute ml_security which appears to be some machine learning poc to look for XSS",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 34,
            "seconds": 45
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Getting the version of TensorFlow and looking for vulnerabilities in the library itself",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 40,
            "seconds": 10
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Exploiting TensorFlow 2.6.3 Save_Model_cli (CVE-2021-41228 and CVE-2022-29216)",
        "machine": "HackTheBox - Forgot",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 41,
            "seconds": 30
        },
        "videoId": "wKcTELVst20"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Taking a look at the web page, finding users on the site, and using FFUF to VHost Enumeration due to talking about a store",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Fingerprinting the websites, dev looks to be PHP and the main page appears to be Vue",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 25
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Exploring the vue app in Firefox Dev Tools, discovering some routes in the webpack which lead to an API",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 55
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " An JWT error message is displayed when accessing some API Pages, removing the token and bypassing authentication",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 50
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Explaining why the web application skips authentication when a cookie is not present, and showing how similar it was to the OMIGod Vulnerability",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 13,
            "seconds": 10
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Extracting all users from the page and then using curl to save the hashes to a file.  Use CrackStation to crack hashes and get a cred",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 40
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Logged in as Christopher.Jones, checking the Online Store Status link which is vulnerable to SSRF",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 20
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Using FFUF to fuzz for all possible ports and using a bash trick to create a wordlist based upon a range of numbers without creating a file",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 45
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Discovering some API Documentation on a page on port 3002",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 40
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " The API all-leave page uses awk, and we can abuse this binary to perform a file disclosure vulnerability if we can poison user names. ",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 31,
            "seconds": 10
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Using hashcat to crack our JWT ",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 33,
            "seconds": 40
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Creating a python script to generate JWT's which allow us to exploit awk and exfil files off the server",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 30
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Python script completed, leaking some files and discovering a unique file in a users .bashrc",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 42,
            "seconds": 0
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Having trouble exporting the backup file, and modifying our script to write binary files which allow us to download the tar.gz backup",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 48,
            "seconds": 0
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Discovering bean's credentials in his xpad directory and logging in",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 54,
            "seconds": 0
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Running a process list on the box shows inotify is watching an interesting file that is only writable by www-data",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 56,
            "seconds": 20
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Looking for system() calls in the PHP app and discovering a sed command. We can exploit this like we did awk to get code execution without any bad characters. Having trouble getting this to work.",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 59,
            "seconds": 40
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Taking it slower, discovering our mistake and getting code execution",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 71,
            "seconds": 10
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Reverse shell as www-data. Modifying the file and trying to find out what happens",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 74,
            "seconds": 0
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Running PSPY, since it will be more thorough than our PS Commands and discover we can inject into the mail command",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 78,
            "seconds": 10
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Got our command execution working and shell returned as root",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 84,
            "seconds": 30
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Getting shell as www-data was unintended, showing the intended way of doing this which involves the leave-request page and symlinks",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 85,
            "seconds": 30
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Cannot poison our JWT and get code execution because of bad characters",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 92,
            "seconds": 0
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " There were directories chmod'd to 777 that the application wrote to. We can use symlinks here to point to other files and have the webserver write to another file",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 98,
            "seconds": 30
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Showing why we need to create a new product to place our malicious payload",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 100,
            "seconds": 50
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Reverse shell returned the intended way, and then showed we definitely needed the ! which is a bad character",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 104,
            "seconds": 0
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Extra content!  Showing a more in-depth look at why removing the cookie bypassed auth. By loading the code locally and running it in VS so we can properly debug and step through it",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 107,
            "seconds": 40
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Explaining and showing why the application should have had an authentication function so there was less duplicate code in each function, which makes it easier to patch",
        "machine": "HackTheBox - Awkward",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 109,
            "seconds": 30
        },
        "videoId": "gmaizI5Xcqs"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Identifying this page is built with flask based upon a 404 page",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 4,
            "seconds": 40
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Looking at /api/",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 6,
            "seconds": 15
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Showing a weird bug in python where you cannot run int() on a string that is a float",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 7,
            "seconds": 15
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Showing the source code on why this bypassed the check",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 8,
            "seconds": 0
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " End of edit, extracting all the users passwords with curl",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 12
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Cracking the hashes and getting a password of rubberducky, playing with creating containers",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 15,
            "seconds": 40
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Getting a reverse shell on the Alpine-Python container",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " We are a privileged container and can see processes from root, which lets us access the hosts disk and CWD leaks file handles to directories. Grab an SSH Key",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 24,
            "seconds": 0
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Can execute safe_python with sudo as jack_adm but it turns out to be a sandbox, eventually find a use-after-free vuln on google and use that to escape",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 27,
            "seconds": 15
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Shell as Jack_adm, we can use sudo with hash_password.py, its a bcrypt hash but we can't crack what we create",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 50
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Explaining the vulnerability, bcrypt has a maximum length we can fill the buffer and prevent the python script from appending something to the password",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 35,
            "seconds": 40
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Creating a Hashcat rule file to append a single character to the password",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 43,
            "seconds": 40
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Creating a python script to exploit this vuln in bcrypt and leaking the secret key one character at a time",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 45,
            "seconds": 50
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Script to exploit the truncation vuln in bcrypt complete.  Using hashcat to crack the password, showing two ways rule file and combinator attack which uses two dictionary files",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 53,
            "seconds": 48
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Finished the box but we skipped one step. Going back to show there was a dev subdomain which we need to pivot through a container to access",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 60,
            "seconds": 0
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " The dev site has a different /api/healhtcheck page, we can use boolean logic with regex to perform a file disclosure vulnerability one char at a time",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 65,
            "seconds": 50
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Creating a python script to automate the file disclosure vulnerability and exporting files to leak extracting the cookie",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 73,
            "seconds": 24
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Talking about ways to improve the script, and realizing we can just run the script on the docker which makes this process exponentially faster.  Good demo on how much a proxy slows things down.",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 90,
            "seconds": 10
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Showing the web source code which starts the container and why background was not pid 1337",
        "machine": "HackTheBox - RainyDay",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 100,
            "seconds": 50
        },
        "videoId": "E5TOeiCnGkE"
    },
    {
        "line": " Intro",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Generating our SSH Key and Base64 Decoding it",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 55
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Opening the SSH Key in Bless",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 15
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Showing information from the SSH RFC which will tell us what we are parsing",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 45
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Start of parsing the SSH Key",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 25
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Opening an Encrypted Key and showing the slight changes",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 0
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Back to the unencrypted SSH Key and showing the private key does contain the private key",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Extracting the Exponent and N our of the Public Key portion",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 10
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Start of Private Key Information in the Private Key",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 30
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Extracting the variables from the Private Key Field",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 0
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Extracting Q, which is the big prime that we used in Response to rebuild the key",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 15
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Showing the comment which contains the username and hostname of the person that generated the key",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Extracting E/N from the Public Key",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 20,
            "seconds": 40
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Extracting Q from the Private Key again and using RsaCtfTool to generate the key",
        "machine": "Deep Dive into Parsing SSH Keys To Exploit Improperly Sanitized Screenshots",
        "tag": "",
        "timestamp": {
            "minutes": 23,
            "seconds": 0
        },
        "videoId": "4F1XGsvB2iA"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Photobomb",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "-4asq6Tldf0"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Photobomb",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "-4asq6Tldf0"
    },
    {
        "line": " Discovering this is a ruby Sinatra Web App based upon error message",
        "machine": "HackTheBox - Photobomb",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 17
        },
        "videoId": "-4asq6Tldf0"
    },
    {
        "line": " Discovering credentials in javascript",
        "machine": "HackTheBox - Photobomb",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 15
        },
        "videoId": "-4asq6Tldf0"
    },
    {
        "line": " Examining the HTTP Request to resize images and discovering an RCE",
        "machine": "HackTheBox - Photobomb",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 30
        },
        "videoId": "-4asq6Tldf0"
    },
    {
        "line": " Getting a reverse shell",
        "machine": "HackTheBox - Photobomb",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 10
        },
        "videoId": "-4asq6Tldf0"
    },
    {
        "line": " Discovering we have SETENV with sudo on a script, checking for path injection",
        "machine": "HackTheBox - Photobomb",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 12
        },
        "videoId": "-4asq6Tldf0"
    },
    {
        "line": " Exploiting path injection with the find command",
        "machine": "HackTheBox - Photobomb",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 12,
            "seconds": 30
        },
        "videoId": "-4asq6Tldf0"
    },
    {
        "line": " Exploiting path injection because the script disables some Bash Built-ins",
        "machine": "HackTheBox - Photobomb",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 0
        },
        "videoId": "-4asq6Tldf0"
    },
    {
        "line": " Explaining bash built-ins",
        "machine": "HackTheBox - Photobomb",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 45
        },
        "videoId": "-4asq6Tldf0"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Discovering the /status/ page which gives us some information on how to use the Proxy",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 3,
            "seconds": 45
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Start of coding our own proxy",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 13,
            "seconds": 30
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Downloading the source code to the chat application",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 23,
            "seconds": 30
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Modifying our proxy to forward all requests to chat.reponse.htb and adding a webserver to it",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 26,
            "seconds": 45
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Web Proxy is up! But we need to replace some URL's to send everything through our proxy",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 39,
            "seconds": 0
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Adding POST Request support",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 42,
            "seconds": 50
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Post request working!  Can login with Guest and talk to Bob over the chat",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 52,
            "seconds": 0
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Discovering the login request also sends a LDAP Server, we can point the login request to a ldap we control",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 55,
            "seconds": 30
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Using ChatGPT to Give us the hex to a successful LDAP Bind, so we can login after poisoning the LDAP Server",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 59,
            "seconds": 0
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Logged in with admin!",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 64,
            "seconds": 30
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Building a Cross Site Protocol Forgery payload to connect to the FTP Server, showing it work against us",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 66,
            "seconds": 15
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Sending bob the malicious payload and using FTP on his behalf",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 75,
            "seconds": 40
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Going over scan.sh",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 79,
            "seconds": 40
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Doing some LDAP Requests to see how its all setup",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 85,
            "seconds": 50
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Having the scan.sh scan our box by adding details into the LDAP Database",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 94,
            "seconds": 2
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Setting up an HTTPS Server on port 443, so it can scan it",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 97,
            "seconds": 10
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Using DNSMasq to setup a DNS Server on port 8053, and having IPTables redirect DNS Requests from the target to that port",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 99,
            "seconds": 0
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Starting a SMTPD Server, then creating a malicious certificate so we can exploit the NSE Script and extract an ssh key",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 105,
            "seconds": 0
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Going over the Incident Report, then looking at the PCAP",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 113,
            "seconds": 0
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Starting to parse the meterpreter packets, showing it in wireshark",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 116,
            "seconds": 15
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Using Scapy to extract the meterpreter tcp stream to a file",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 120,
            "seconds": 50
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Starting a python script to parse the meterpreter data",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 125,
            "seconds": 30
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Extracting the TLV for unencrypted packets",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 130,
            "seconds": 30
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Using Bulk_Extractor which extracts the AES Key from the core dump, its able to identify it via Key Expansion",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 134,
            "seconds": 13
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Decrypting the TLV, then adding definitions for TLV Types",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 139,
            "seconds": 30
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Writing the file to disk",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 165,
            "seconds": 0
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Discovering a small portion of the SSH Private key in a screenshot, after decoding it, we see the Q variable in it! Use RsaCTFTool to rebuild the private SSH Key",
        "machine": "HackTheBox - Response",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 169,
            "seconds": 50
        },
        "videoId": "-t1UAvTxB94"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 45
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Discovering Grafana and seeing it is ~2 years old",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Looking for exploits",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Manually performing the exploit",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 0
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Looking for interesting files, extracting Grafana config which lets us log in",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 45
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Extracting the SQLite3 Database in order to get the MySQL Password",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 12,
            "seconds": 55
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Logging into MySQL and getting SSH Creds from the whackywidget database",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 30
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Looking at the WhackyWidget application and discovering an Consul API Key",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 0
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Looking for the Consul API Documentation",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 20
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Playing with the API, examining the Metasploit script and building out our curl request",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 5
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Building a JSON file which will create a Consul Script to send us a reverse shell and getting root",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 40
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Showing the Metasploit Script would work if we port forward",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 31,
            "seconds": 50
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Showing another way, we can write to the Consul Config directory and do it manually",
        "machine": "HackTheBox - Ambassador",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 34,
            "seconds": 50
        },
        "videoId": "6M_6rapjTL0"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Testing the webhook, examining the request the server makes",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 30
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Trying other URL Wrappers to see how the application behaves",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 30
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Finding the .git sub directory, running git-dumper to extract source code",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 10
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Finding and explaining the LFI Vulnerability",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 55
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Attempting to use the php filter to extract source code, does not work, turns out there's another website",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 12,
            "seconds": 10
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Discovering there is a special header requried to access the DEV Website",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 0
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Configuring BurpSuite to add the header for us",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 0
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Explaining the LFI And why we are going to use a phar file to get code execution",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 15
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Attempting to get a shell, when executing our file we get a ERROR 500. Simplify the payload to see it works.",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Examining phpinfo to see disabled functions, and discovering system() was blocked",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 0
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Converting the dfunc-bypasser script to PHP, so we can just upload it to the server and have it tell us what is available",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 0
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Showing off github co-pilot, turns out it didn't exactly give me what I wanted.",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 15
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Uploading our script to check dangerous functions and identifying we can use the proc_open() function",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 31,
            "seconds": 0
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Creating a script to send us a reverse shell, more github copilot finishing our code for us",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 0
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Exploring the developer home directory, finding a setuid python binary that uses input(), exploiting to get developer user",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 20
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " We can run easy_install with sudo, getting root",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 39,
            "seconds": 30
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Explaining the Code Execution without dropping a file, by using gadgets with php filters to create text for us",
        "machine": "HackTheBox - UpDown",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 40,
            "seconds": 30
        },
        "videoId": "yW_lxWB1Yd0"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Shoppy",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "AJc53DUdt1M"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Shoppy",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "AJc53DUdt1M"
    },
    {
        "line": " Taking a look at the web page",
        "machine": "HackTheBox - Shoppy",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 55
        },
        "videoId": "AJc53DUdt1M"
    },
    {
        "line": " Discovering it is NodeJS based upon the error message [MasterRecon]",
        "machine": "HackTheBox - Shoppy",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "AJc53DUdt1M"
    },
    {
        "line": " Performing NoSQL boolean injection (mongodb) to bypass authentication",
        "machine": "HackTheBox - Shoppy",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 40
        },
        "videoId": "AJc53DUdt1M"
    },
    {
        "line": " Working payload for the NoSQL Injection.",
        "machine": "HackTheBox - Shoppy",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 45
        },
        "videoId": "AJc53DUdt1M"
    },
    {
        "line": " Dumping the user database with more NoSQL Injection and using CrackStation to get the password",
        "machine": "HackTheBox - Shoppy",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 9,
            "seconds": 30
        },
        "videoId": "AJc53DUdt1M"
    },
    {
        "line": " Using ffuf to find the mattermost.shoppy.htb subdomain",
        "machine": "HackTheBox - Shoppy",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "AJc53DUdt1M"
    },
    {
        "line": " Logging into MatterMost and getting a credential",
        "machine": "HackTheBox - Shoppy",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 14,
            "seconds": 20
        },
        "videoId": "AJc53DUdt1M"
    },
    {
        "line": " Log in as the Jaeger user and use strings to get a hardcoded password from the password-manager binary",
        "machine": "HackTheBox - Shoppy",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 15,
            "seconds": 50
        },
        "videoId": "AJc53DUdt1M"
    },
    {
        "line": " SSH into the box as the Deploy User, discover we can run Docker commands and use that to privesc by starting a new container that mounts the root fs",
        "machine": "HackTheBox - Shoppy",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 20,
            "seconds": 20
        },
        "videoId": "AJc53DUdt1M"
    },
    {
        "line": " Exploring the Password-Manager binary in Ghidra",
        "machine": "HackTheBox - Shoppy",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 24,
            "seconds": 0
        },
        "videoId": "AJc53DUdt1M"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Taking a look at the website",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 50
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Testing the webhook to see the app will send us information about a web page",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Trying to access port 3000, getting blocked by a filter trying to include 127.0.0.1 and 0x7f000001",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 20
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Playing with the webhook to see if it will send us the entire page",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 20
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Having our webserver redirect to localhost, to see if this bypasses the filter and getting the web page on port 3000",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 10
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " The application on port 3000 is gogs 0.5.5 which is from 2014!",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 20
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Setting up a local instance of GOGS so we can build a payload to exploit this",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 12,
            "seconds": 15
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Playing with a union injection, then looking at the database to see number of columns in the user table",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 40
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Have a basic Union Injection payload, grabbing multiple fields from the SQLite Database",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Checking how the password is encoded by examining gogs source",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 30
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Testing out cracking our hash",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 10
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Passing our SQL Injection payload through SSRF to attack the target and get a user password",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 30,
            "seconds": 5
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Using Pspy to see a cron job running as root that uses artisan to execute a web function",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 40,
            "seconds": 0
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Exploring the web source to discover the webserver uses file_get_contents on monitored url",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 44,
            "seconds": 0
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Poisoning the MySQL Database to have the monitored URL retrieve and send a file",
        "machine": "HackTheBox - Health",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 46,
            "seconds": 30
        },
        "videoId": "UBQ1tGdFvKk"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 5
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Running CrackMapExec to enumerate open file share and downloading a custom DotNet Executable",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 20
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Showing that we can run DotNet programs on our linux machine (will show how I configured this at the end of the video)",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Using Wireshark to examine DNS Requests when running this application",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 0
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Using Wireshark to examine the LDAP Connection and discover credentials being send in cleratext",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 50
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Using the credentials from the program to run the Python Bloodhound Ingestor",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Playing around in Bloodhound",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 12,
            "seconds": 45
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Discovering the Shared Support Account has GenericAll against the DC",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 16,
            "seconds": 10
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Doing a LDAP Search to dump all information and finding a password stored in the Info field of Active Directory",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 18,
            "seconds": 50
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Examining what the Support user can do, showing the importance of looking at Outbound Object Control option in bloodhound",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 21,
            "seconds": 50
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Explaining how to abuse GenericAll to the Computer object",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 22,
            "seconds": 20
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Downloading dependencies",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 26,
            "seconds": 0
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Starting the attack, checking that we can join machines to the domain",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 31,
            "seconds": 0
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Starting the attack Creating a machine account, had some issues will redo everything later",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 31,
            "seconds": 30
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Redoing the attack, copying commands verbatim from Bloodhound ",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 40,
            "seconds": 30
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Copying the ticket to our machine and then converting it from KIRBI to CCNAME format and using PSEXEC",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 44,
            "seconds": 30
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Extracting the LDAP Password through static analysis",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 51,
            "seconds": 50
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Installing DotNet on a linux machine",
        "machine": "HackTheBox - Support",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 55,
            "seconds": 0
        },
        "videoId": "iIveZ-raTTQ"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Running nmap",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Running CrackMapExec to enumerate the share",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 40
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Talking about a common misconception about \"Null SMB Authentication\"",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 10
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Downloading a PDF off the open share",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 0
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Using SWAKS to send an emailw ith a link to see if anything clicks it",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 55
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Exploring the CVE's mentioned in the PDF to see one of them is Folina",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 30
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Someone clicked our link! The User Agent Shows WindowsPowerShell/5.1.19041.906, which leaks the patch level of the box",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 55
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Building a Folina Payload",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 0
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Using ConPtyShell as our payload for Folina, so we have a proper PTY with tab auto complete on windows rev shells",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 0
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Reverse Shell obtained, discover we are btables and a little enumeration shows we are in a HyperV Container",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 50
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Running SharpHound",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 30
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Importing the results into Bloodhound and seeing we have AddKeyCredentialLink which is a shadow credentials to a user",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 20
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Using Invoke-Whisker.ps1 to create shadow credentials for a user, then using Evil-WinRM to login",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 34,
            "seconds": 0
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Running Invoke-Whisker ",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 30
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Discovering we are in WSUS Administrators Group, checking if other tools highlight this",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 41,
            "seconds": 40
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Going into a SharpWSUS blog post that talks about adding a malicious windows update",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 50
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Compiling SharpWSUS",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 46,
            "seconds": 45
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Making sure SharpWSUS Runs, copying PSExec to the box",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 48,
            "seconds": 30
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Explaining the SharpWSUS Attack Path",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 50,
            "seconds": 0
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " In typical ippsec fashion, I have a typo in my payload psexec.nexe lol.",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 52,
            "seconds": 0
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " The payload did not work, lets simplify it by removing special characters and just executing netcat",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 55,
            "seconds": 50
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Shell returned as admin!",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 59,
            "seconds": 55
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Beyond Root: Enable RDP then showing the WSUS Administration Panel",
        "machine": "HackTheBox - Outdated",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 61,
            "seconds": 10
        },
        "videoId": "TR132R1h3Ds"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Agenda",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 35
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Whoami",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 30
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Hacking is an Art",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 5
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " The \"Flow Chart\" Problem most People Make",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Keep is Simple, don't go straight to the reverse shell",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 15
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Ask Simple Questions, Start of Fuzzing",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 15
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Talking about ffuf and giving some demos",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 20
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Reading between the lines",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 15
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Importance of asking questions",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 0
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " How to ask questions",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 11
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Keeping a positive mindset",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 2
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Eliminate the word fail",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 3
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Stop doing the bare minimum",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 0
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Practice makes perfect",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 27,
            "seconds": 0
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " It's Holiday CTF Time. Shout outs.",
        "machine": "HackTheBox UniCTF 2022  Talk - Variable is what you make of It",
        "tag": "",
        "timestamp": {
            "minutes": 29,
            "seconds": 0
        },
        "videoId": "_EV2Frf5P2E"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Nmap the box, examining server banners",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 55
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Checking out the website, doesn't seem like anything special ",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 2,
            "seconds": 20
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Using Ffuf to perform a virtual host scan to discover other subdomains and find portal",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 3,
            "seconds": 40
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Discover the Motorcycle Store Portal. Trying to play with a potential LFI but deciding it may be a rabbit hole",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 4,
            "seconds": 50
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Stop of examining rabbit hole.",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 9,
            "seconds": 30
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Registering an account and noticing it goes to an API.  Lets test the API Out by fuzzing other functions",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Running a GoBuster on the classes directory to find more controllers for the API ",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 11,
            "seconds": 20
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Fuzzing the Users.php file for more functions and discovering Upload",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 20
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Using OpenAI to generate an HTML Upload form, so we can see create an HTTP Upload Request",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Pasting our upload request and uploading a webshell",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 14,
            "seconds": 30
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Showing a SQL Injection in the Login Function that is vulnerable to Mass Assignment",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 17,
            "seconds": 30
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " The intended route: Editing our profile to change our login_type, which is our group. Editing it to be an admin which will reveal the upload form.",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Shell on the Docker Container, looking for credentials in the web app",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 23,
            "seconds": 30
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Discovering Truedesk.php which has an apikey, looking online to see how to use this api key",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Searching the Truedesk code for more endpoints, finding a stats endpoint which leaks some info about a ticket",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 28,
            "seconds": 30
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Finding a voicemail password and instructions of connecting a soft phone. Downloading Zoiper",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 31,
            "seconds": 30
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Running Zoiper and connecting",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 25
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Logging in as hflaccus",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 37,
            "seconds": 50
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Setting up a proxy through SSH so we can connect to the DropCMS",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 39,
            "seconds": 30
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Running TCPDump",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 41,
            "seconds": 0
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Going over the wireshark, finding the HTTPS Connection is using an insecure SSL Protocol that doesn't support PFS (port forward secrecy)",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 42,
            "seconds": 20
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Downloading the SSL Certificates and then using wireshark to decrypt the data and getting credentials to login to DropCMS",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 45,
            "seconds": 15
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Uploading a malicious DropCMS Module and getting a shell on this docker container",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 49,
            "seconds": 0
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Shell on the Docker of this container",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 55,
            "seconds": 0
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Finding a script that runs every 45 seconds as root, after looking into this it should allow us to run code as root on the container",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 56,
            "seconds": 0
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Root on this container, we can look for breakouts!",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 64,
            "seconds": 45
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Using the unshare command to exploit a vulnerability which gives us all the capabilities!",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 67,
            "seconds": 0
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Doing a somewhat standard way to execute code with the SYS_ADMIN capability (attacking overlayfs and cgroups) to get root on the host",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 67,
            "seconds": 45
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Showing that we could of skipped playing with TruDesk by using nmap and discovering mongo was open without credentials",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 74,
            "seconds": 15
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Using Mongosh to interact with mongo databases",
        "machine": "HackTheBox - Carpediem",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 78,
            "seconds": 10
        },
        "videoId": "piTtOe13SEU"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 55
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Poking at the web page, examining the request, playing with server headers",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 58
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Discovering an error message, googling it and finding out it is tied to Sping Boot",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 25
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Start of FFuf, using a raw request so we can ffuf like we can sqlmap",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 45
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Going over the results of FFUF",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 45
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Matching all error codes with FFUF which is very important, going over the special characters",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 40
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " The curly braces return 500 in FFUF, big indication it is going to be SSTI",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 15
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Using HackTricks to get a Spring Framework SSTI payload and getting command execution",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 20
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Using curl to download a shell script and then execute it because we are having troubles getting a reverse shell",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 5
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Going back to just show the Match Regex feature of FFUF to search for banned characters",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 30
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Searching the file system for files owned by logs, discovering redpanda.log.  Using a recursive grep to find out what uses this",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 0
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Examining the Credit Score java application and seeing what it does with the RedPanda.log file",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 50
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Discovering the Credit Score application gets the Artist variable via ExifData in an image",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 0
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " With the Artist, the Credit Score application opens an XML File and writes. This is like an Second Order XXE Injection",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 10
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Downloading an image, so we can change the exif metadata",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 50
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Using Exiftool to modify the artist",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 27,
            "seconds": 30
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Building the malicious XML File ",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 29,
            "seconds": 30
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Putting a malcious entry in the log, waiting for the cron to hit and then checking if we got root key",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 33,
            "seconds": 20
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Showing why our user had the group of logs. On boot the service was started with sudo and assigned us that group",
        "machine": "HackTheBox - RedPanda",
        "tag": "",
        "timestamp": {
            "minutes": 35,
            "seconds": 15
        },
        "videoId": "HqIUffFdjuI"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 50
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Navigating to the page ",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Discovering the forgot password feature enables people to enumerate valid users",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Finding the default credentials for mojo portal and then logging in as admin",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 45
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Uploading an ASPX Webshell but finding out the aspx extension is blacklisted",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 50
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Looking at the GitHub issues for MojoPortal",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 30
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Copying a file to bypass the bad extension filter of uploaded material and getting our webshell",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Showing the importance of redirecting STDERR to STDOUT on web shells to discover why some commands fail",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 50
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Failing to run a Powershell Reverse Shell bypassing AV, only to find out it is in ConstrainedLanguage Mode",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 0
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Attempting to upload netcat to find out its blocked via group policy",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 30
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Enumerating Applocker with Powershell Get-AppLockerPolicy -Effective -xml",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 20,
            "seconds": 30
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Looking at the Get-BadPasswords directory, finding an NTLM Hash",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 26,
            "seconds": 50
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Logging into the box via kerberos because NTLM is Disabled",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 31,
            "seconds": 30
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Using CrackMapExec's Spider_Plus module to enumerate all the files on the share",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 38,
            "seconds": 40
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Enumerating the Windows Firewall to discover only bginfo64 will be able to communicate out",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 43,
            "seconds": 20
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Creating a DLL to use with DLL Injection to 7zip",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 47,
            "seconds": 0
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Running a bunch of icacls commands with our DLL to identify permissions",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 53,
            "seconds": 45
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " We have WriteOwner to BGInfo64.exe, which was allowed through the firewall. We can change the owner and then write our netcat on it!",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 57,
            "seconds": 0
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Shell returned as GinaWild, finding an encrypted pfx file in the Recycle Bin",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 69,
            "seconds": 0
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Cracking the PFX File with CrackPkcs12 to discover it is a code signing certificate",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 75,
            "seconds": 30
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Importing the code-signing certificate so we can sign powershell scripts letting us bypass applocker",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 82,
            "seconds": 30
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Telling the Get-BadPasswords program to run, and getting a shell as BPassRunner",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 86,
            "seconds": 50
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Identifying how Get-BadPasswords pulls the NTLM Hashes and then getting Administrators hash",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 87,
            "seconds": 30
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Using Impacket's GetTGT to get a ticket as administrator",
        "machine": "HackTheBox - Hathor",
        "tag": "",
        "timestamp": {
            "minutes": 89,
            "seconds": 50
        },
        "videoId": "yweDaXZdt4s"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Taking a look at the website",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Searching the PrestaShop github to find a way to fingerprint the website, discovering INSTALL.TXT then finding the commit that contains our version",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Discovering checkout.shared.htb",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 10
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Examining how the checkout subdomain gets the contents of the shipping cart (cookies), editing the cookie and seeing what happens",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 14
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Testing for SQL Injection within the cookie",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 45
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Failing to use SQLMap (Debug it at the end of the video)",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 20
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Doing the Union SQL Injection manually to enumerate Information Schema then dump the users table and get the passwords",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 40
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Cracking the password for James_Mason and gaining SSH Access",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 45
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Finding files modified between two dates on linux and discovering some interesting files",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 0
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Grabbing passwords from the web directory",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Discovering iPython is opened every minute based upon the history file",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 26,
            "seconds": 0
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Telling LinPeas to look for unique processes and discovering the directory iPython is being ran from",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 27,
            "seconds": 20
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Creating a malicious profile to gain code execution when ipython is opened and gaining a shell as dan_smith",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 31,
            "seconds": 45
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Discovering a golang program that utilizes Redis, copying the binary to our box",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 35,
            "seconds": 0
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Having Redis connect to netcat and getting the password in clear text",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 37,
            "seconds": 0
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Enumerating Redis",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 38,
            "seconds": 0
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Creating a malicious Redis Module, loading it within Redis and getting code execution",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 39,
            "seconds": 0
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Getting a reverse shell as root",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 41,
            "seconds": 25
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Going back and getting SQLMap to run. Enabling Debug so we can see the requests SQLMap makes",
        "machine": "HackTheBox - Shared",
        "tag": "",
        "timestamp": {
            "minutes": 42,
            "seconds": 0
        },
        "videoId": "7LmqyefHgIU"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Start of nmap, then going over the website",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 5
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Examining all the pages on the blog",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Looking at the report parameter, doing some light testing for SQL Injection before moving on to IDOR",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 40
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Using ffuf to bruteforce all reports matching upon a word (phrase) on the page",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 0
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Attempting to figure out if the md5sum in the logs URL is random by submitting the hash to crackstation",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Discovering a file upload vulnerability, faking a PDF and uploading a PHP Shell",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " When using a PHP Shell System() commands don't work. Uploading PHPInfo to view disabled functions and seeing System is blocked",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 25
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Getting code execution through Popen() which wasn't blacklisted",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 0
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Reverse shell returned",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Discovering another webserver is running on localhost, turns out to be Wordpress",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 26,
            "seconds": 55
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Exploiting the wordpress plugin BrandFolder to get a shell as Lexi",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 29,
            "seconds": 50
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Lexi has an SSH Key, using SSH to access the server and then setting up a tunnel to access the wordpress site and checking out the PWDMS Plugin",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 35,
            "seconds": 0
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Using MySQL to reset a wordpress password, so we can log in",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 55
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Gaining access to the box as John",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 43,
            "seconds": 50
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Finding a Virtual Box file that has an encrypted VDI",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 46,
            "seconds": 30
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Using Hashcat to crack the VirtualBox VDI File",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 48,
            "seconds": 20
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Installing the VirtualBox extension that would allow us to utilize an encrypted VDI",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 52,
            "seconds": 55
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Decrypting the VirtualBox VDI Image with VBoxManage",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 56,
            "seconds": 45
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Mounting the VirtualBox VDI Image and discovering the hard drive is encrytped with LUKSv2",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 58,
            "seconds": 45
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Cracking the LUKS v2 Password",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 59,
            "seconds": 50
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Mounting the Luks Drive then discovering a bunch of scripts",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 62,
            "seconds": 0
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Doing some bash-fu to extract all variables and run them against the ent command to display entropy, then discovering the password somewhat sticks out, which gets root",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 63,
            "seconds": 55
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Another fun trick to find passphrases. Creating a regex to path for WORDS_seperated-LIKE-this",
        "machine": "HackTheBox - Moderators",
        "tag": "",
        "timestamp": {
            "minutes": 68,
            "seconds": 50
        },
        "videoId": "V70gFSoh3aU"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Poking at the DNS Server and discovering its hostname when querying itself",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Using dig to show the reverse lookup aswell, then perform a zone transfer with axfr",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Just showing dnsrecon to bruteforce a range of IP's, not really relavent to this but figured I'd show it",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 30
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Poking at the website and logging into the website",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 0
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Finding an LFI that allows us to disclose PHP Source code, can't do much else because it appends .php to our string",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Using SQLMap with the login to extract files",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 12,
            "seconds": 15
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " SQLMap only found time injection, changing the levels and specifying the techniques which allows it to find a quicker method",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 14,
            "seconds": 20
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Having SQLMap extract the nginx configuration and discovering another subdomain",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 16,
            "seconds": 45
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Checking out the new domain preprod-marketing.trick.htb, discovering an LFI but this time the extension is in the URL!",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 19,
            "seconds": 10
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Going over the source code of the LFI to show why this was vulnerable the ../ strip was not recursive",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 21,
            "seconds": 30
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Using the LFI to discover the user we are running as, then extracting an SSH Key",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 24,
            "seconds": 0
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Showing another way to weaponize this LFI, poisoning the nginx access log",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 25,
            "seconds": 30
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Showing yet another way to weaponize the LFI with sending email to the user, then accessing it with the LFI",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 27,
            "seconds": 15
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Shell on the box, checking Sudo then using find to see files owned by my user/group and seeing I can write fail2ban rules",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 29,
            "seconds": 40
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Editing iptables-multiport.conf to execute a file instead of banning a user and getting root",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 36,
            "seconds": 10
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Showing an alternate way to discover preprod-marketing, using a creative sub domain bruteforce with ffuf",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 37,
            "seconds": 30
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Checking out why we couldn't read the environ file, turns out it was owned by root and only root readable.",
        "machine": "HackTheBox - Trick",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 39,
            "seconds": 45
        },
        "videoId": "ai98umjeO8M"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 1
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Testing login of the webapp, finding SQL Injection to bypass it",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 10
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Running gobuster with our cookie so it has access to any authenticated page",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 20
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Examining the course edit functionality and discovering how the page tells us if our update was a success",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 50
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Explaning the dangerous thing with update injections, we accidentally changed EVERY row.",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 50
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Extracting information from this Update Injection in MySQL by editing a second column",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 45
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Standard MySQL Injection to extract table information from Information_Schema, then dumping hashes",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Showing a second login form, which is also SQL Injectable",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 0
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Examining the Generate PDF Function",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 0
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Verifying we can put HTML in the PDF",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Going to GitHub Issues and finding issues with MPDF to find vulnerabilities in old versions",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 40
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Showing we do have SSRF but this doesn't really give us anything",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Using Annotations to add loca files into the PDF",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 24,
            "seconds": 10
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Dumping source code of the webapp to find the configuration file, then getting the MySQL Password",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 25
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Testing the MySQL Password with SSH and logging in as gbyolo",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 40
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Exploiting Meta-Git to gain access to the developer user",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 31,
            "seconds": 20
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Shell as Developer and running LinPEAS",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 36,
            "seconds": 40
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Testing CVE-2022-2588 as a privesc on Ubuntu, it works! (unintended route)",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 38,
            "seconds": 48
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Finding GDB has cap_sys_ptrace permissions, which means we can debug processes running as root",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 42,
            "seconds": 30
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Using MSFVENOM to generate shellcode to perform a reverse shell, which we will inject into a process",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 43,
            "seconds": 20
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Creating a python script to format the shellcode in a way we can just paste it into gdb",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 0
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Explaining the modulo operator (%) which is how we will pad our payload",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 46,
            "seconds": 25
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Building our payload",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 49,
            "seconds": 0
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Payload has been built! Lets inject it into a process and get a shell",
        "machine": "HackTheBox - Faculty",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 53,
            "seconds": 0
        },
        "videoId": "LGO-dn7668g"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Looking at the website, looks like there's different behavior for extensions",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 2,
            "seconds": 25
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Registering and logging into an account",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 5,
            "seconds": 10
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " An unintended way to login, IDOR within the Forgot Password logic, can change usernames",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Uploading a new product, test XSS, File Upload",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 9,
            "seconds": 15
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Using FFUF with a raw http request to test for potential extensions",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Using SHTML to test for Server Side Inclusion SSI and leaking web.config",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 18,
            "seconds": 10
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Going over the web.config, pulling out sensitive things",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 21,
            "seconds": 15
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Decrypting the .aspx Forms Ticket and forging a new one that states we are admin",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 26,
            "seconds": 30
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " The Admin page allows us to generate PDF's, testing for XSS",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 36,
            "seconds": 50
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Attempting to redirect the save to pdf function with a meta tag",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 38,
            "seconds": 20
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Redirecting to localhost:8000 and discovering the swagger api for encrypt/decrypt",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 42,
            "seconds": 50
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Creating a webform to autosubmit data and allow us to decrypt a string.",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 46,
            "seconds": 0
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Creating a YSOSERIAL Gadget with our ViewState and ViewStateUserKey protecting it",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 51,
            "seconds": 0
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Reverse shell returned",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 62,
            "seconds": 0
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Discovering port 8009 is open, setting up a tunnel via SSH and discovering its a different version of the website",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 64,
            "seconds": 0
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " The ViewState is protected by AutoGenerate for the key, we cannot do deserialization here",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 67,
            "seconds": 54
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Checking out the Password Reset feature and we can edit the token to reveal a Padding Oracle error message",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 69,
            "seconds": 20
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Showing the command injection if we can forge tokens",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 72,
            "seconds": 15
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Using padbuster to create a token that will allow us to perform command injection",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 74,
            "seconds": 5
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " ALTERNATE PRIVESC: Using JuicyPotatoNG, attempting to run it says privileged process failed to communicate with COM Server. Need to run with -s to find a suitable port",
        "machine": "HackTheBox - Perspective",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 84,
            "seconds": 0
        },
        "videoId": "tmK0GIvnq6s"
    },
    {
        "line": " Intro brief descriptions of Elastic, Kibana, Fleet Management, Endpoint Security, Windows Logging",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Logging into our Elastic Box and going to https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elastic-stack-on-ubuntu-22-04",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 40
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Changing the Elastic Repo from 7.x to 8.x, then installing Elastic making sure to grab the default credentials",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Making sure our Elastic Database is online with Curl",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 50
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Installing Kibana",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 10
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Generating an enrollment token for Kibana, adding it to the config and starting Kibana",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 40
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Installing NGINX to put in front of Kibana",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Logging into Kibana and setting up the Fleet Integration so we can manage agents",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 45
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Copying the Elastic CA Certificate over the fleet, just to make some of our certificates easier",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 0
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Installing fleet but adding the --fleet-server-es-ca and --insecure flags ",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 0
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Installing the Fleet Agent on our windows box",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 50
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Adding the Endpoint and Cloud Security Integration, which has a lot of good alerts for detecting bad things",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 20,
            "seconds": 30
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Installing the Default Elastic Security Endpoint Rules, without this the Elastic Agent is not monitoring for malicious events!",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Adding the Windows Integration so our agent collects logs",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 26,
            "seconds": 10
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Uh-Oh We aren't getting any data from our agents. Our elastic endpoint agent is getting an SSL Error when talking to ElasticSearch",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 29,
            "seconds": 40
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Editing Kibana to let us edit our default fleet settings, so we can modify the Elastic Config on our agents",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 31,
            "seconds": 30
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Viewing data from our agents! ",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 34,
            "seconds": 30
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Viewing sysmon logs, viewing running processes ",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 35,
            "seconds": 6
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Viewing sysmon logs for DNS Requests",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 38,
            "seconds": 30
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Looking at the default Elastic Alerts for our host. Nothing too special since its a new windows box",
        "machine": "Setting Up Elastic 8 with Kibana, Fleet, Endpoint Security, and Windows Log Collection",
        "tag": "",
        "timestamp": {
            "minutes": 42,
            "seconds": 30
        },
        "videoId": "Ts-ofIVRMo4"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 18
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Identifying a Docker exists based upon the Python Version in NMAP + SSH Version [MasterRecon]",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 50
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Navigating to the website downloading the source code available, there is a git folder switching branches ",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 23
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Discovering a vulnerability in the os.path.join command, if we prefix our path with a slash it will overwrite the entire path",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 0
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Attempting to upload a malicious cron, docker isn't running cron so it doesn't work",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 25
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Adding a new route to the application to execute commands",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 37
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Able to run commands and get the output",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 0
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Creating an endpoint to send reverse shells in the webapp",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Reverse shell returned",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 45
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Looking at port 3000 which was previously filtered. Looks like its a Gitea interface but we don't have creds",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Uploading Chisel and tunneling to access the website",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 10
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Looking at old git commits from the source code and finding credentials",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 20
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Downloading a SSH Private Key from the Gitea website",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 33,
            "seconds": 30
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Using find to search files modified around the time the SSH Key was uploaded to the box in order to see what else happened [Forensics]",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 50
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Showing how to remove lines from the less view &!",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 36,
            "seconds": 40
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Checking if Git-Sync is executed with the watch command",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 39,
            "seconds": 30
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Finding out git executes every minute, setting a pre-commit hook to get root",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 40,
            "seconds": 10
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Showing the FSMonitor command in the gitconfig which is another way to execute code, this will run on many other git commands like git status where pre-commit would not",
        "machine": "HackTheBox - OpenSource",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 43,
            "seconds": 50
        },
        "videoId": "z6nJNr8AFTU"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Viewing the website and discovering NTLM is disabled",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Using Kerbrute to enumerate valid users and then password spray with username",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 45
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Bad analogy comparing Kerberos works with TGT/TGS and Movie Theater Tickets",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Using Impacket's GetTGT Script to get Ticket Granting Ticket as Ksimpson and exporting KRB5CCNAME so Impacket uses it",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Using GetUserSPN to Kerberoast the DC with Kerberos Authentication and cracking to get SqlSVC's Password",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 12,
            "seconds": 30
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Both credentials we have cannot access MSSQL",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 40
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Creating a silver ticket to gain access to SQL",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 15
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Using GetPAC to get a Domain SID",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 50
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Showing getting Domain SID with LDAPSearch",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 20,
            "seconds": 30
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Creating the Silver Ticket with Impacket's Ticketer",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 24,
            "seconds": 0
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Showing Impacket creates the ticket with 10 years instead of 10 hours",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 30
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " We now have MSSQL Access to the box, enabling xp_cmdshell and getting a reverse shell",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 40
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Using JuicyPotatoNG to escalate privileges because we have SeImpersonate Privilege",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 30,
            "seconds": 0
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Running the JuicyPotatoNG Exploit and getting a shell in the unintended way",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 0
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Enumerating the MSSQL Database and finding credentials",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 34,
            "seconds": 0
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Using Evil-WinRM to login with Kerberos Auth",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 40
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Accessing the box as MiscSvc and finding a dotnet Application ",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 39,
            "seconds": 40
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Setting up our linux host as a router so our Windows host can communicate to the HTB Network through the linux box",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 43,
            "seconds": 40
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Sniffing the traffic from the dotnet application and discovering it talks to port 4411",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 47,
            "seconds": 20
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Looking at debug logs and seeing a serialized object",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 50,
            "seconds": 20
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Using YsoSerial.Net to create a malicious base64 object to send us a reverse shell",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 52,
            "seconds": 40
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Sending our payload and getting a reverse shell",
        "machine": "HackTheBox - Scrambled",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 55,
            "seconds": 30
        },
        "videoId": "_8FE3JZIPfo"
    },
    {
        "line": " Intro",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Installing Sysmon and the configuration from Neo23x0's Repo",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 10
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Explaining the file blocked section",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Viewing the Sysmon log to confirm it is installed and see its EvendID 27",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Creating a Scheduled Task with Event Filter to trigger on Sysmon File Blocked Events",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 10
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Event did fire turns out it is case sensitive",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Editing the Scheduled Task event by hand to add ValueQueries which allows arguments to be sent from this Event Filter",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 50
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Testing the passing of variables by adding them to the message box",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 30
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Start of creating some powershell to send this message to Slack",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 50
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Have trouble getting arguments into the powershell script because of Base64 Endcoding, change up our script",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 30
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Showing a working copy of the powershell script that sends slack messages",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 23,
            "seconds": 10
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Deploying our scheduled task through Group Policy",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 45
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Editing the scheduled task XML file from sysvol",
        "machine": "Using Sysmon to Block Unwanted Files and Send Notifications to Slack via Scheduled Task Event Filter",
        "tag": "",
        "timestamp": {
            "minutes": 28,
            "seconds": 50
        },
        "videoId": "J9owPmgmfvo"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 57
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Taking a look at the website",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 2,
            "seconds": 50
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Showing some differences between Ffuf and Wfuzz",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 5,
            "seconds": 20
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Finding a known exploit against the Exam Reviewer Management System",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 8,
            "seconds": 30
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Explaining the boolean injection then running SQLMap",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 11,
            "seconds": 30
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Using SQLMap to extract databases, tables, and some data",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 15,
            "seconds": 40
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Discovering the OldManagement site, dumping its database then logging in",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 18,
            "seconds": 50
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Exploiting the file upload vulnerability in OldManagement by replacing .htaccess",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 26,
            "seconds": 30
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Explaining various ways a developer may handle the file save",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 28,
            "seconds": 20
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Low privilege shell returned, in a docker find credentials in configuration files. Then SSH into the box",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 40,
            "seconds": 0
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Examining port 4873 which is Verdaccio, an NPM Registry. Downloading packages to find hard coded credentials",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 47,
            "seconds": 20
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Going over the app startup script which we can run with Sudo. Ubuntu 18 sudo preserves $HOME variable so we can replace the registry in npmrc with one running on our box",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 51,
            "seconds": 20
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Using docker on our system to pull and run verdaccio",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 55,
            "seconds": 10
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Creating a malicious npm package, then getting a shell on the box",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 57,
            "seconds": 20
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Exploiting RoundCube 1.4.2 with CVE-2020-12640",
        "machine": "HackTheBox - Seventeen",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 64,
            "seconds": 40
        },
        "videoId": "U-2nI6wSPOE"
    },
    {
        "line": " Intro",
        "machine": "Detecting Responder via LLMNR Honey Tasks on User Workstations",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "h_cWWL-yyb0"
    },
    {
        "line": " Talking about how the attack works and why NetBIOS/LLMNR should be disabled",
        "machine": "Detecting Responder via LLMNR Honey Tasks on User Workstations",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 15
        },
        "videoId": "h_cWWL-yyb0"
    },
    {
        "line": " Running Responder on a linux host and then attempting to browse a file share on a Windows Host and grabbing the Hash",
        "machine": "Detecting Responder via LLMNR Honey Tasks on User Workstations",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 30
        },
        "videoId": "h_cWWL-yyb0"
    },
    {
        "line": " Cracking the hashes our computer provided to show how easy it is to steal passwords on a network",
        "machine": "Detecting Responder via LLMNR Honey Tasks on User Workstations",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 45
        },
        "videoId": "h_cWWL-yyb0"
    },
    {
        "line": " Showing how we can perform an LLMNR request in PowerShell",
        "machine": "Detecting Responder via LLMNR Honey Tasks on User Workstations",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 30
        },
        "videoId": "h_cWWL-yyb0"
    },
    {
        "line": " Combining the Powershell LLMNR Request with our Slack WebMessage hook to send notifications to slack",
        "machine": "Detecting Responder via LLMNR Honey Tasks on User Workstations",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 15
        },
        "videoId": "h_cWWL-yyb0"
    },
    {
        "line": " Testing the powershell code out and seeing it send a message to Slack",
        "machine": "Detecting Responder via LLMNR Honey Tasks on User Workstations",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 50
        },
        "videoId": "h_cWWL-yyb0"
    },
    {
        "line": " Creating Scheduled Task to run this powershell code every 5 minutes",
        "machine": "Detecting Responder via LLMNR Honey Tasks on User Workstations",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "h_cWWL-yyb0"
    },
    {
        "line": " Converting the powershell to powershell friendly (UTF-16LE) Base64 ",
        "machine": "Detecting Responder via LLMNR Honey Tasks on User Workstations",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "h_cWWL-yyb0"
    },
    {
        "line": " Changing our scheduled task to write to EventLogs instead of Slack, which is better networks that have Centralized Logging",
        "machine": "Detecting Responder via LLMNR Honey Tasks on User Workstations",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 30
        },
        "videoId": "h_cWWL-yyb0"
    },
    {
        "line": " Showing the schedueld task runs every 5 minutes.",
        "machine": "Detecting Responder via LLMNR Honey Tasks on User Workstations",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 15
        },
        "videoId": "h_cWWL-yyb0"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Start of nmap, discovering it is an Active Directory Server and hostnames in SSL Certificates",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Running Feroxbuster and then cancelling it from navigating into a few directories",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 20
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Examining the StreamIO Website",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 0
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Finding watch.stream.io/search.php and ",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 20
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Fuzzing the search field with ffuf by sending special characters to identify odd behaviors",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Writing what we think the query looks like on the backend, so we can understand why our comment did not work. ",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 10
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Burpsuite Trick, setting the autoscroll on the repeater tab",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Testing for Union Injection now that we know the wildcard trick",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Using xp_dirtree to make the MSSQL database connect back to us and steal the hash",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 15
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Extracting information like version, username, database names, etc from the MSSQL Server",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 15
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Extracting the table name, id from the sysobjects table",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 20
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Using STRING_AGG and CONCAT to extract multiple SQL entries onto a single lane for mass exfil",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 28,
            "seconds": 45
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Extracting column names from the tables",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 31,
            "seconds": 30
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Using VIM and SED to make our output a bit prettier",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 20
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Cracking these MD5sum with Hashcat",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 36,
            "seconds": 45
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Using Hydra to perform a password spray with the credentials we cracked",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 39,
            "seconds": 55
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Using FFUF to fuzz the parameter name within admin to discover an LFI",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 10
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Tricking the server into executing code through the admin backdoor, using ConPtyShell to get a reverse shell on windows with a proper TTY",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 51,
            "seconds": 40
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Using SQLCMD on the server with the other database credentials we have to extract information from the Backup Database, cracking it and finding valid creds",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 59,
            "seconds": 10
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Running WinPEAS as Nikk37 discovering firefox, then running FirePWD to extract credentials",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 66,
            "seconds": 0
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Running CrackMapExec to spray passwords from Firefox to get JDGodd's password",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 76,
            "seconds": 30
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Running Bloodhound to discover JDGodd has WriteOwner on Core Staff which can read the LAPS Password",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 88,
            "seconds": 20
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Extracting the LAPS Password",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 97,
            "seconds": 6
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Showing you could have SQLMapped the login form",
        "machine": "HackTheBox - StreamIO - Manually Enumerating MSSQL Databases, Attacking Active Directory, and LAPS",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 106,
            "seconds": 10
        },
        "videoId": "qKcUKlwoGw8"
    },
    {
        "line": " Simple concept/video but we will build more upon it in the following weeks. ",
        "machine": "Creating Webhooks in Slack and sending messages from Powershell",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "1w0btuMAvZk"
    },
    {
        "line": " Intro",
        "machine": "Creating Webhooks in Slack and sending messages from Powershell",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "1w0btuMAvZk"
    },
    {
        "line": " Signing up and installing the client",
        "machine": "Creating Webhooks in Slack and sending messages from Powershell",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 30
        },
        "videoId": "1w0btuMAvZk"
    },
    {
        "line": " Changing our channel to Private and Installing the Webhook",
        "machine": "Creating Webhooks in Slack and sending messages from Powershell",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "1w0btuMAvZk"
    },
    {
        "line": " Creating a PowerShell oneliner to send a message to slack",
        "machine": "Creating Webhooks in Slack and sending messages from Powershell",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 40
        },
        "videoId": "1w0btuMAvZk"
    },
    {
        "line": " Giving the message a little flair by changing the username and icon",
        "machine": "Creating Webhooks in Slack and sending messages from Powershell",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 20
        },
        "videoId": "1w0btuMAvZk"
    },
    {
        "line": " Intro, you should be using centralized logging for this. But if not this hackjob will do",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " Talking about the Sensitve Command Token",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 18
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " Examining how this all works, creates three registry keys for Image File Execution Options and SilentProcessExit",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " Talking about the \"So much offense in my defense\" phrase. Really loved it, showing a blog about using this technique as a persistence ",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 50
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " Showing the token works and what the email looked like",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 50
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " Ranting more about \"so much offense in my defense\" and why blue teamers should learn red team techniques",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 30
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " Creating a new token so we can deploy this one via Active Directories Group Policy",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 20
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " Opening GPMC and creating a registry entry",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " Running gpupdate /force to show the group policy created the registry keys",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " Attempting to get the arguments of our process but failing. Never get this part working.",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " Referenced Blogs:",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " https://blog.thinkst.com/2022/09/sensitive-command-token-so-much-offense.html",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " https://oddvar.moe/2018/04/10/persistence-using-globalflags-in-image-file-execution-options-hidden-from-autoruns-exe/",
        "machine": "Monitoring Sensitive Windows Commands via CanaryTokens - Deploying Registry Entries via Group Policy",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "xFlH3DV0J7I"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Using MSFVenom to upload a reverse shell to identify what the malware sandbox looks like",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Examining the source code of the sandbox",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 4,
            "seconds": 25
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Creating a program in C to see the size of an unsigned long",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Creating a program to replace the output of the trace program and exfil data via the return register on the webapp",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 13,
            "seconds": 40
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Creating a python program to automate uploading the file and returning the output",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 20,
            "seconds": 50
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Creating a program in C to perform ls, so we can enumerate the jail",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 27,
            "seconds": 5
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Changing our ls to enumerate /proc",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 34,
            "seconds": 0
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Adding a readlink() call to our ls program so we can view symlinks",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 36,
            "seconds": 25
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Discovering an open file descriptor in PID 1, using this to escape the jail and read /etc/passwd",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 41,
            "seconds": 0
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Dumping the Django Database",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 44,
            "seconds": 40
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Using hashcat to crack a custom salted MD5 hash/password",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 46,
            "seconds": 0
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Examining how the sandbox is created on the box itself, explaining how we can abuse setuid binaries because we can write to /lib (path injection)",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 51,
            "seconds": 0
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Using ldd to view all the libraries su needs, copying them to a directory",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 53,
            "seconds": 20
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Creating a malicious linux library with a constructor to execute code when it is loaded",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 55,
            "seconds": 40
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Changing our readfile poc to execute su and read the output, discovering we need to modify our malicious library slightly",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 59,
            "seconds": 18
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " Adding a misc_conv function so our library loads and getting code execution as root",
        "machine": "HackTheBox - Scanned - Escaping and Exploiting Chroot Based Jails via Unprotected File Descriptor",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 62,
            "seconds": 10
        },
        "videoId": "FoQuNsCyQz0"
    },
    {
        "line": " **IMPORTANT: The event filter should be 4625 not 4624.",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Intro",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Going over CanaryTokens",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Scheduled Task Basics",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Switching over to Event Log",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 10
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Enabling logging for failures",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 15
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Searching Events based upon Event ID via XPATH/XML",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 30
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Searching Events based upon data in the Event Log",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 30
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Searching a specific field within the event log data",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 20
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Adding Boolean Logic to watch multiple events",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 0
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Preventing the account from being able to be used by setting login hours to none",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Creating a SPN so the account becomes kerberoastable",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 0
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Changing our Search Query to easily find events related to the kerberoasting",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 0
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Fixing up how we parsed multiple Event ID's",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 23,
            "seconds": 10
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Exporting and Importing the task",
        "machine": "Combining AD Honey Pot Accounts with Canaries to Detect Password Sprays and Kerberoasting for free!",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 10
        },
        "videoId": "BT9pT1tAmX8"
    },
    {
        "line": " Intro",
        "machine": "Troubleshooting failed RCE Payloads by Debugging Python Web Applications  - Noter Beyond Root",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "eojA9k4px-8"
    },
    {
        "line": " Copying the webapp from the server to my local box",
        "machine": "Troubleshooting failed RCE Payloads by Debugging Python Web Applications  - Noter Beyond Root",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 45
        },
        "videoId": "eojA9k4px-8"
    },
    {
        "line": " Intalling the required modules to run the pip modules and running the website locally",
        "machine": "Troubleshooting failed RCE Payloads by Debugging Python Web Applications  - Noter Beyond Root",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 55
        },
        "videoId": "eojA9k4px-8"
    },
    {
        "line": " Using SSH Port forwarding to forward MySQL, so we don't have to setup a database",
        "machine": "Troubleshooting failed RCE Payloads by Debugging Python Web Applications  - Noter Beyond Root",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "eojA9k4px-8"
    },
    {
        "line": " Changing localhost in the web code to 127.0.0.1 which magically fixes an issue we had connecting to the database",
        "machine": "Troubleshooting failed RCE Payloads by Debugging Python Web Applications  - Noter Beyond Root",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 30
        },
        "videoId": "eojA9k4px-8"
    },
    {
        "line": " Getting an administrative login, registering a new user and then updating their role",
        "machine": "Troubleshooting failed RCE Payloads by Debugging Python Web Applications  - Noter Beyond Root",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 20
        },
        "videoId": "eojA9k4px-8"
    },
    {
        "line": " Running Visual Studio Code which gives us a nice debugger",
        "machine": "Troubleshooting failed RCE Payloads by Debugging Python Web Applications  - Noter Beyond Root",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 45
        },
        "videoId": "eojA9k4px-8"
    },
    {
        "line": " Creating a test payload and seeing why it fails",
        "machine": "Troubleshooting failed RCE Payloads by Debugging Python Web Applications  - Noter Beyond Root",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 20
        },
        "videoId": "eojA9k4px-8"
    },
    {
        "line": " Going over what $'' is and why it prevented our command execution if we didn't escape it",
        "machine": "Troubleshooting failed RCE Payloads by Debugging Python Web Applications  - Noter Beyond Root",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 50
        },
        "videoId": "eojA9k4px-8"
    },
    {
        "line": " When sending over the single quote, it is html encoded. Editing variables in the debugger to make sure if we bypass this stage we would have command execution",
        "machine": "Troubleshooting failed RCE Payloads by Debugging Python Web Applications  - Noter Beyond Root",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 40
        },
        "videoId": "eojA9k4px-8"
    },
    {
        "line": " Intercepting the request in BurpSuite and discovering the HTML Encoding is done client side, by editing the request we can get RCE!",
        "machine": "Troubleshooting failed RCE Payloads by Debugging Python Web Applications  - Noter Beyond Root",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 20
        },
        "videoId": "eojA9k4px-8"
    },
    {
        "line": " Intro",
        "machine": "Fixing Hashcat Flask Session Module  - Just Needed to Update Maximum Length of the Hash",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "amSgFTzTWPc"
    },
    {
        "line": " Recap, talking about the flask session cookie and showing hashcat won't crack ours",
        "machine": "Fixing Hashcat Flask Session Module  - Just Needed to Update Maximum Length of the Hash",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 17
        },
        "videoId": "amSgFTzTWPc"
    },
    {
        "line": " Looking at Hashcat's source code, finding module 29100 which is flask session and seeing the max length is set to 27",
        "machine": "Fixing Hashcat Flask Session Module  - Just Needed to Update Maximum Length of the Hash",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "amSgFTzTWPc"
    },
    {
        "line": " Checking out the JWT Module (16500) to see what the sizes are set there. Use this module because its similair.",
        "machine": "Fixing Hashcat Flask Session Module  - Just Needed to Update Maximum Length of the Hash",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 20
        },
        "videoId": "amSgFTzTWPc"
    },
    {
        "line": " Downloading the source and compiling",
        "machine": "Fixing Hashcat Flask Session Module  - Just Needed to Update Maximum Length of the Hash",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 20
        },
        "videoId": "amSgFTzTWPc"
    },
    {
        "line": " Testing the new version of hashcat and successfully cracking our Flask Session!",
        "machine": "Fixing Hashcat Flask Session Module  - Just Needed to Update Maximum Length of the Hash",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 15
        },
        "videoId": "amSgFTzTWPc"
    },
    {
        "line": " Creating an issue/pull request on the Hashcat repo to get our change into the main repo.",
        "machine": "Fixing Hashcat Flask Session Module  - Just Needed to Update Maximum Length of the Hash",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 5
        },
        "videoId": "amSgFTzTWPc"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 57
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Registering an account",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 40
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Enumerating valid usernames based upon error message",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 55
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Using ffuf to match regex to enumerate valid usernames",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 30
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Poking at the web applicaiton trying IDOR/SSTI and failing",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 10
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Looking at the cookie given by the application and discovering it is a Flask Session Cookie",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 50
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Trying to crack the Flask Session with Hashcat. It fails because I think the payload is too long for hashcat. ",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 45
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Using Flask-Unsign to crack the session",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 50
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Using flask-unsign to forge a cookie that says we are the Blue User",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 45
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Logged into the application as Blue, get the ftp_admin password",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Unzipping the source code that came from the ftp server and using diff to compare the two versions",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 10
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Failing to exploit a command injection vulnerability in the export note function",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 50
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Going deeper in the export note function to discover it uses a node library md-to-pdf which is vulnerable to RCE",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 40
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Running LinPEAS",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 43,
            "seconds": 10
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Start of the Raptor Exploit, we pulled a bad version so it isn't immediately going to work for us",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 48,
            "seconds": 20
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Running Show Variables like '%plugin%' which will tell us where we should drop the raptor_udf library file",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 55,
            "seconds": 20
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Using a different version of raptor which has a do_system_init function, this one lets us execute code",
        "machine": "HackTheBox - Noter - Cracking Flask Cookies and performing MySQL Raptor Exploit on Modern Distro RCE",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 60,
            "seconds": 30
        },
        "videoId": "XvoMwz9J6_I"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Taking a look at websites, making note of all login prompts (bolt, rocketchat)",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 2,
            "seconds": 45
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Start of looking at Jamovi, using the Rj Editor to execute code and get a reverse shell",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 7,
            "seconds": 15
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Using cat to send files over the network to our box and viewing the bolt-administration document",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 9,
            "seconds": 10
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Taking a credential from the document and logging into Bolt CMS",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 50
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Editing a theme in bolt to give us code execution",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 13,
            "seconds": 40
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Using script to get a full PTY since python isn't on this box",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Looking for passwords for bolt, finding a sqlite database",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 20,
            "seconds": 40
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Getting the ip address of the box via the hostname command since ifconfig and ip were not on the box",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 25,
            "seconds": 45
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Using /proc/net/tcp to get listening ports",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 26,
            "seconds": 40
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Using the docker container to SSH into the host computer via its docker IP",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 29,
            "seconds": 20
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Using ps -ef --forest to view running processes, can see inside docker containers to find mongo",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 31,
            "seconds": 25
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Using bash to perform a portscan based upon the exit codes of echo'ing data to a network socket",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 34,
            "seconds": 50
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Setting up chisel so we can  talk to the mongo port",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 36,
            "seconds": 40
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Using MongoDB Shell to log into mongo and change the user we created to become an administrator on RocketChat",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 39,
            "seconds": 0
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Using Web Hook Integration in RocketChat to get RCE as an authenticated admin",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 44,
            "seconds": 25
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Reverse shell returned",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 49,
            "seconds": 15
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Manually identifying our Docker Capabilities with /proc/self/status",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 51,
            "seconds": 0
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Using cat to download files from the network and downloading the shocker exploit which should exploit this capability",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 55,
            "seconds": 40
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Was using the wrong shocker exploit to exploit cap_dac_read_search. Downloading the one to write files and putting our passwd file on the box",
        "machine": "HackTheBox - Talkative",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 62,
            "seconds": 30
        },
        "videoId": "T0jebq1M_GY"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Timelapse",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "gWTGGfl9ajQ"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Timelapse",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "gWTGGfl9ajQ"
    },
    {
        "line": " Enumerating the file server",
        "machine": "HackTheBox - Timelapse",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 50
        },
        "videoId": "gWTGGfl9ajQ"
    },
    {
        "line": " Cracking the zip file with John",
        "machine": "HackTheBox - Timelapse",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "gWTGGfl9ajQ"
    },
    {
        "line": " Cracking the pfx file (PKCS12) with John",
        "machine": "HackTheBox - Timelapse",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 40
        },
        "videoId": "gWTGGfl9ajQ"
    },
    {
        "line": " Extracting the certificate and key from the pfx file",
        "machine": "HackTheBox - Timelapse",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 27
        },
        "videoId": "gWTGGfl9ajQ"
    },
    {
        "line": " Using evil-winrm to login with the certificate",
        "machine": "HackTheBox - Timelapse",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 11,
            "seconds": 24
        },
        "videoId": "gWTGGfl9ajQ"
    },
    {
        "line": " Checking the PSReadline file and getting another credential",
        "machine": "HackTheBox - Timelapse",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 14,
            "seconds": 40
        },
        "videoId": "gWTGGfl9ajQ"
    },
    {
        "line": " Logging in with svc_deploy, failing to run bloodhound ",
        "machine": "HackTheBox - Timelapse",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 16,
            "seconds": 5
        },
        "videoId": "gWTGGfl9ajQ"
    },
    {
        "line": " Running net user discovering we are in LAPS Group",
        "machine": "HackTheBox - Timelapse",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 21,
            "seconds": 0
        },
        "videoId": "gWTGGfl9ajQ"
    },
    {
        "line": " Running get-adcomputer to get the LAPS Password",
        "machine": "HackTheBox - Timelapse",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 23,
            "seconds": 0
        },
        "videoId": "gWTGGfl9ajQ"
    },
    {
        "line": " Showing a python script to extract LAPS Passwords",
        "machine": "HackTheBox - Timelapse",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 27,
            "seconds": 0
        },
        "videoId": "gWTGGfl9ajQ"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Talking about what the page parameter does and why its normally vulnerable to LFI",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 50
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Running gobuster to get a list of files on the webserver while we poke at the LFI",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 20
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Finding an LFI in combination with an EAR (Execute After Read) Vulnerability. Then examining the source code of index.php to see the vulnerability",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 45
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " There was an sanitize string function that wasn't recursive, explaining how we could exploit this.",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 50
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Discovering beta.html which is a license upload, grabbing the source code and vulnerable application",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Grabbing netstat like information, running processes, and memory maps with our LFI Vulnerability",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Playing with the activate_license executable and finding a buffer overflow",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 25
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Using GDB to examine the crash, need to use set follow-fork-mode child to follow the fork",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 50
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Crashing the program with a pattern and finding the offset to RSP",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 55
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Start of creating our exploit script",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 23,
            "seconds": 55
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Extracting where activate_license and libc exists within memory using the /proc/pid/maps file",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Using objdump to dump the location of system() within the libc version running on the target",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 55
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Using ropper to search for gadgets, pop rdi - pop rdx - and one to move values from rdx to rdi",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 27,
            "seconds": 57
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Using readelf to look for a writable space within memory for us to write our malicious command to",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 30,
            "seconds": 20
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Building the rop chain to write our command to memory, then call system",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 32,
            "seconds": 0
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Reverse shell returned running linpeas a",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 37,
            "seconds": 43
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Failing to run CVE-2022-0847, not sure why",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 0
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Discovering a timer that backs up the website as the dev user and its vulnerable to a symlink attack. Grabbing the home directory of dev which has an ssh key",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 43,
            "seconds": 50
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Examining the ememu directory in dev which is a C Program",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 46,
            "seconds": 20
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Talking about Binfms and how we will be able to create an interpreter for extensions that executes code as root",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 47,
            "seconds": 30
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Talking about the cap_dac_override permission",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 49,
            "seconds": 30
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Exploiting our ability to write to the binfmt_misc/register to get root",
        "machine": "HackTheBox - Retired",
        "tag": "",
        "timestamp": {
            "minutes": 50,
            "seconds": 20
        },
        "videoId": "1MDqn1kBHQM"
    },
    {
        "line": " Time stamps will be added tonight",
        "machine": "HackTheBox - Late",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "3s_eVc6KyM8"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Start of nmap, going over some standard cookies and knowing the web technology behind it",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Checking what the main webpage is, discovering an APK File",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 15
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Analysing the APK file with JADX-GUI",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 0
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Searching for strings, finding some tokens",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Looking at the Gitea API to discover how to use our token",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Looking at the Lets Chat API to discover how to use our token and dumping a list of rooms",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 15
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Using the Lets Chat API to dump messages from a room and discovering credentials",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 30
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Logging into the Catchet webserver finding the version and discovering known vulnerabilities",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 40
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Using a CVE-2021-39174 POC to dump the Catchet Configuration and get a password (SSTI)",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 20
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Logging into the box as will",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 50
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Discovering a verify.sh script that has a command injection when verifying APK Files",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 40
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Using apktool to decompile the APK so we can change the name and repackage it",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 0
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Having trouble repacking our APK file, need to update APKTool.  Then getting root",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 33,
            "seconds": 15
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Showing another way to pop the Catchet server, by updating the Cache configuration to point to our REDIS instance and phpggc to create a deserialization gadget",
        "machine": "HackTheBox - Catch",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 38,
            "seconds": 0
        },
        "videoId": "XAZI361XgRU"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Start of nmap, the Server Header changes based upon DNS",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Navigating to the website, discovering the \"New Starter Form\" which has some key information like a welcome password and username convention",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Password spraying the Powershell Web Access (PSWA), discovering a valid credential but wrong host, word document had another host which is valid for edavies",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 7,
            "seconds": 0
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Playing around in the PSWA",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 9,
            "seconds": 15
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Looking at hidden files, discovering c:\\utils\\desktop.ini which states its a directory that is excluded by AV",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Making the mistake of running WinPEAS inside the PSWA",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Setting up ConPtyShell to get a proper PTY reverse shell on windows",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 14,
            "seconds": 45
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Making some light modifications to ConPtyShell in order to evade antivirus",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 15,
            "seconds": 40
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Getting the ConPtyShell and showing the colors/tab autocomplete",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 16,
            "seconds": 50
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Running WinPEAS to show another user is logged on (and the AV Exclusions)",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Switching to Metasploit, because it makes it easier to migrate into an interactive process, which allows us access to view the desktop of the logged in user",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 21,
            "seconds": 55
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Using Screenshot and Screenshare inside of meterpreter to record the screen and get a password that was typed onto a terminal (imonks)",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Creating a credential object with imonks, so we can Invoke-Command on the domain controller",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 29,
            "seconds": 0
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " When specifying the correct configurationname our enter-pssession fails because we can't run measure-object. Running Get-Command and Get-Alias to view what commands we can run",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 31,
            "seconds": 0
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Discovering wm.ps1, which we can modify to get a shell as jmorgan on our desktop",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 35,
            "seconds": 0
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Creating a powershell one-liner to replace a string in a file with cat and set-content",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 40,
            "seconds": 0
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Screwed up our fail because of a random line break.  Playing around with it until we can fix it.",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 44,
            "seconds": 40
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Shell returned as JMorgan, dumping the SAM/SYSTEM files and cracking local passwords on the workstation",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 47,
            "seconds": 30
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Looking at other Domain Users, attempting to password spray the users we don't have in order to see if there's password re-use between local desktop and domain",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 58,
            "seconds": 30
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " We are awallace on the Domain Controller, getting a reverse shell",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 62,
            "seconds": 0
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Discovering c:\\Program Files\\KeepMeOn, which is executing .bat files every 5 minutes. Putting our powershell one liner in there and getting a shell as lhopkins",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 66,
            "seconds": 0
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Shell as lhopkins, but still not domain administrator running bloodhound",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 71,
            "seconds": 25
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Going over the Bloodhound Data",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 81,
            "seconds": 40
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Adding edavies to the Site_Admin group",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 83,
            "seconds": 40
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Adding imonks to the Site_admin group, then andding ippsec to domain admins",
        "machine": "HackTheBox - Acute",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 92,
            "seconds": 50
        },
        "videoId": "jDYte7xNY1g"
    },
    {
        "line": " Intro",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Start of nmap",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Downloading the APK",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 20
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Running apktool to decode the APK, examining files, don't get much info",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Finding a certificate in the application that gives up the host name",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 30
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Trying out another APK Decompiler, Bytecode Viewer",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 0
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Start of setting up Genymotion",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Setting up the phone, accidentally choosing an ancient version which won't work",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Dragging the app to install it to the phone, get an error have to manually look at log file",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 0
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Setting up a newer phone so we can install the apk",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 40
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Installing the APK",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 0
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Configuring our phone to go through BurpSuite",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 40
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Changing burpsuite to listen on all hosts",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 15
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Showing the app is now going through burpsuite, adding the hostname to our host file",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Finding command injection in the communication between app and server, reverse shell fails",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 30
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Putting an SSH Key on the box ",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 45
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Got a shell on the box digging through to figure out the SSH Server, finding something interesting but don't dig in",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 28,
            "seconds": 20
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Discovering the rules.v6 file for iptables likely isn't changed, discovering this is a way around the firewall block.",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 33,
            "seconds": 20
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Running LinPEAS but curling it over ipv6, http.server didn't listen, switching to netcat",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 35,
            "seconds": 0
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Running CVE-2021-3156, sudo baron samedit exploit",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 0
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Using IPv6 with our bash reverse shell",
        "machine": "HacktheBox - RouterSpace",
        "tag": "",
        "timestamp": {
            "minutes": 43,
            "seconds": 20
        },
        "videoId": "bilgniEPOfs"
    },
    {
        "line": " Introduction, talking about why I think APT-29 successfully phishing is funny",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Unit42's blog post talking about how the phishing document worked",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 10
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Going to google to show APT29 doing the lnk file in a zip since atleast 2016, Mandiant post.",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 15
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Talking about why phishers put executables or things to click on in zip/iso/compressed folders",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 40
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Talking about why they may use DLL Side Loading to execute the shellcode",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 50
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Showing what the user see's when they open the iso file",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 25
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Talking about why we are starting with shellcode instead of a weaponized document and why red teams like shellcode",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 48
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Using MSFVenom to generate a malicious executable with custom shellcode from BRc4",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Opening the executable with x64dbg, so we can extract a program from memory. This is great for when the shellcode is obfuscated through like shikata ga nai",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Setting a breakpoint on LdrLoadDll, showing the memory map is empty",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Running the program, examining memory on LdrLoadDll breakpoint.  Showing a weird Execute-Read Permission, which initially was Read-write (screwed up initially explaining it)",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 15
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " The E_MAGIC (MZ Header) is nulled out, talking about why the brute ratel may do that",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 10
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Dumping the memory to a file, copying it to linux where i have ida",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 20
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Using hexedit to set the first two bits to MZ, so ida recognizes it as an executable",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 30
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Talking about ordinal loading",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 50
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Showing the applicaiton uses ror13 hashes to call functions to avoid strings. Using google to find what the hash goes to",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 5
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " The coffee string is weird, going into it",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 20,
            "seconds": 20
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Looking at a function that looks like it sends strings to the teamserver",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 10
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Showing similarities of the coff loader from trusted sec",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 45
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Converting another ror13 hash in badger to a function",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 0
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Having ida show all strings",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 25
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Looking at the AMSI Patch thing",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 50
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Stumbling across a static encryption key",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 26,
            "seconds": 35
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Looking at a likely PSExec functionality, maybe an IOC? Service name: ServicesActive",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 29,
            "seconds": 0
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Looking at the EnableDebug command and explaining why i think all these strings may be in the binary right now, they are likely gone now.",
        "machine": "Reversing Malware How is APT 29 Successful w/ this Phishing Tech and BRc4 (Brute Ratel) opsec fails?",
        "tag": "",
        "timestamp": {
            "minutes": 36,
            "seconds": 15
        },
        "videoId": "a7W6rhkpVSM"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 54
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Taking a look at the website",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Running gobuster against store.djewelry.htb and discovering a vendor directory that has phpunit",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Exploiting phpunit to get a shell on the box",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 45
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Shell recieved on the box as www-data",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 15
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Looking for files owned by www-data on the box by using find to discover /var/backups/info",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 20
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Running strings against the /var/backups/info file and discovering a hex string that is a shell script. Using CyberChef to decode it and gain access to steven",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " ssh in as steven, talking about the duplicate users as steven and steven1 have the said uid/gid",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 0
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Talking about timestamps, my favorite way to find tools left behind by hackers",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 0
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Using find -type f -printf \"%T %p\\n\"to show the full time stamp for files",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 28,
            "seconds": 15
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Using find to find files that were created 00:00:00, which is an indication of time stomping. Discovering a backdoored copy of sshd",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 30,
            "seconds": 45
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Running the backdoored binary in Ghidra and discovering a backdoor in the login function",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 33,
            "seconds": 40
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Extracting the backdoor password and using CyberChef to decode it",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 36,
            "seconds": 15
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " We skipped a step, finding and examining a backdoored apache module",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 41,
            "seconds": 50
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " The easy way of doing strings and decoding the bsae64 to discover what the backdoor did",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 43,
            "seconds": 50
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Having trouble analyzing this with Ghidra",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 15
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Switching to Cutter which handles this binary better",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 48,
            "seconds": 0
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Going back to Ghidra and seeing what we missed",
        "machine": "HackTheBox - Undetected",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 51,
            "seconds": 40
        },
        "videoId": "TNwZAacbQs4"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Taking a look at the SSL Certificates and website to find blog/forum",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 2,
            "seconds": 22
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Running WPScan, explaining why i like aggressive scanning",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 4,
            "seconds": 57
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Finding public vulnerability in Asgaros Forms (Blind Time Based SQLi)",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Running SQLMap to confirm the injection",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 45
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Examining the Wordpress Database structure, so we can run SQLMap to dump very specific things",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 21,
            "seconds": 0
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Cracking wordpress credentials to find out we can't use any because of MFA",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 25,
            "seconds": 20
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Using our SQL Injection to dump a list of activated plugins in wordpress",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 30,
            "seconds": 10
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Finding an exploit in the Download From Files plugin, converting it to ignore SSL Validation Errors",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 32,
            "seconds": 0
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Uploading a malicious phtml (php) file to get a shell on the box",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 35,
            "seconds": 45
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Examining how MFA is enabled on SSH/SU by looking at PAM files",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 41,
            "seconds": 0
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Discovering the 10.11.12.13 network can bypass MFA, which our host is on.",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 42,
            "seconds": 10
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Using find to show files created between two dates",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 45,
            "seconds": 10
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Discovering backups are created in /backups and explaining why we cannot view other users processes (hidepid)",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 48,
            "seconds": 20
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Looking in the */local/bin directories to discover an obfuscated shell script (sh.x)",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 48,
            "seconds": 50
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Running the script and then examining the /proc/pid directory to find the shell script unobfuscated in the cmdline",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 51,
            "seconds": 30
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Explaining wildcard injection",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 52,
            "seconds": 50
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Exploiting the wildcard injection in rsync",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 56,
            "seconds": 0
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Showing how we could of used the SQL Injection to leak all the secrets in the MFA Plugin and generate our own codes",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 57,
            "seconds": 30
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Looking at the MiniOrange MFA Source Code, the uninstall.php shows a lot of good information",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 59,
            "seconds": 10
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Showing how to do a \"pretty print\" or format output better in a MySQL Command (using \\G instead of ;)",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 63,
            "seconds": 45
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Failing to generate a QR Code that we can use google authenticator to login with",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 66,
            "seconds": 45
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Going back to the source code to find another way to generate MFA Codes",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 72,
            "seconds": 44
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Fixing our generator script to decrypt the secret which we can paste to oauthtool and get a MFA Code",
        "machine": "HackTheBox - Phoenix",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 75,
            "seconds": 45
        },
        "videoId": "Zngo-QzZYtw"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 55
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Checking out what version of Centos is running",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 45
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Running Feroxbuster and GoBuster",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 20
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Noticing a X-Backend-SErver header that leaks the virtual host Office.Paper",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 40
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Showing my favorite nmap script Banner-Plus ",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Office.Paper is wordpress, running wp-scan",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 45
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Discovering a vulnerability that lets us read posts that are in drafts, finding a Rocket Chat Server",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Discovering a Rocker Chat Bot finding an LFI and getting a password which we can use to ssh",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 13,
            "seconds": 10
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Looking at the ps output of the server to see who the bot runs as",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 17,
            "seconds": 30
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Running LinPEAS",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Finding out it is vulnerable to CVE-2021-3560 Polkit Privilege Escalation",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 20,
            "seconds": 55
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Running the polkit exploit and creating a secnigma user",
        "machine": "HackTheBox - Paper",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 22,
            "seconds": 8
        },
        "videoId": "4e4wKDrANog"
    },
    {
        "line": " Introduction",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 55
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Running a VHOST enumeration scan",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 10
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Discovering the Metaview application which is an image upload",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Attempting to exploit the file upload, uploading non images. ",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 50
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Editing the exif metadata to put PHP tags in the image, still failing to get code execution but find XSS",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 0
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Looking for public exploits against exiftool",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Creating a malicious image with CVE-2021-22204 against ExifTool, DjVu exploit",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 10
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Reverse shell returned, examining the application",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 0
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Discovering Convert_images directory, using grep to find out if anything uses it and finding a script",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 30
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Finding the convert_images script uses an old copy of mogrify which uses image magic and has a vulnerability",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 20,
            "seconds": 30
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Exploiting CVE-2020-29599 in mogrify/image magic",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 30
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Our user can run neofetch with sudo, and XDG_CONFIG_HOME is preserved. Exploiting it by putting a malicious config",
        "machine": "HackTheBox - Meta",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 28,
            "seconds": 50
        },
        "videoId": "RrclUhMYHh4"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 5
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Running feroxbuster and discovering image.php",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Fuzzing image.php for parameters and discovering an LFI",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 5
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Enumerating the WAF to find blacklisted strings and then using a php filter to extract source",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 15
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Examing the login.php source code and discovering a timing attack",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Demonstrating attempting to login with valid users takes a longer time so we can bruteforce users",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Creating a python script to enumerate users",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 10
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Logging in with aaron:arron (guessed the password)",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 0
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Extracting upload.php and admin_auth_check.php to see how we can upload files",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Attempting a mass assignment vulnerability on profile_update.php and discovering we can change our roles",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 23,
            "seconds": 30
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Discovering a timing attack to discover filenames uploaded, which can be chained with our LFI to execute code",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 28,
            "seconds": 0
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Using the CLI PHP Interpreter to generate potential filenames",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 31,
            "seconds": 50
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Uploading a webshell and then generating the filename based upon time",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 34,
            "seconds": 0
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Executing commands on the box, discovering we can't do reverse shells",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 38,
            "seconds": 50
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Using my Forward Shell Python script to gain an interactive shell on the box",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 43,
            "seconds": 30
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Discovering a backup directory that has the web source but also the git repo",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 50,
            "seconds": 40
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " SSH in as aaron and discovering he can run the netutils binary with sudo, which uses Axel to download files",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 51,
            "seconds": 20
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Tricking axel to write to authorized_keys via symlinks",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 54,
            "seconds": 0
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Demonstrating we didn't need that sleep(1) for the initial timing attack where we can enumerate valid users to work",
        "machine": "HackTheBox - Timing",
        "tag": "",
        "timestamp": {
            "minutes": 56,
            "seconds": 40
        },
        "videoId": "hmtnxLUqRhQ"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Start of nmap, discovering a webserver and filtered port",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 8
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Discovering a hostname in the 404 not found message in the mailto section",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 4,
            "seconds": 15
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Gobuster VHOST Discoery finds the subdomain db.admirer-gallery.htb which is adminer. Playing with the application and raw SQL Commands",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 5,
            "seconds": 25
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Trying to write files with INTO OUTFILE, also testing the secure file priv default directory for MySQL which is the most reliable",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 7,
            "seconds": 25
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Going to google and finding this version of adminer is vulnerable to a SSRF, but having trouble with this because the login for adminer is different",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 9,
            "seconds": 30
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Intercepting the login request, finding a hardcoded password that doesn't really help us",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 11,
            "seconds": 45
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Installing adminer in a docker container, so we can play with the application locally which helps us understand the SSRF Exploit",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Finding a python3 http server redirect example to use for our SSRF",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 15,
            "seconds": 30
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Performing the SSRF Vulnerability failing to extract local files",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 17,
            "seconds": 0
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " The CSRF is annoying, configuring burpsuite to replace variables in our post automatically so we don't need to manually intercept.",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 18,
            "seconds": 10
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Having the SSRF access localhost:4242 (the filtered port from nmap), we see the OpenTSDB application, finding an exploit",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 20,
            "seconds": 0
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Exploit fails, it complains about an invalid metric. Googling to find OpenTSDB API Documentation and finding an endpoint to list metrics",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 21,
            "seconds": 15
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Updating the exploit to use the http.stats.web.hits metric and getting RCE",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Reverse shell returned",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 29,
            "seconds": 10
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Finding database credentials in server.php, which also are jennifers credentials. ",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 40
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Enumerating Apache configuration files, discovering one webserver runs as devel",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 36,
            "seconds": 0
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Discovering a PHP Object Injection vulnerability in a OpenCats which is a webserver running on localhost, jennifer can login. We can't write to the web directory thoe",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 39,
            "seconds": 20
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Discovering devel can write to /usr/local/etc/ and fail2ban is installed, which has an RCE with whois",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 42,
            "seconds": 30
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Running strace on whois to discover it looks at /usr/local/etc/whois.conf",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 45,
            "seconds": 0
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Using phpgcc to test our file write to see what the file looks like",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 47,
            "seconds": 0
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Looking at an example whois configuration file",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 48,
            "seconds": 40
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Explaining our payload and doing some weird regex termination to get this to work",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 49,
            "seconds": 20
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Looking at the whois source code to see it only reads the first 512 bytes of the configuration file",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 50,
            "seconds": 10
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Creating the whois configuration file, which starts with ]* to terminate the regex, then puts 500 spaces to get rid of the appended data by the exploit",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 52,
            "seconds": 0
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Creating our payload for the fail2ban whois exploit and getting root",
        "machine": "HackTheBox - AdmirerToo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 55,
            "seconds": 30
        },
        "videoId": "446sWtb5bc4"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 58
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Using nmap to scan NMAP",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 5,
            "seconds": 10
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Doing a SNMPWalk talking about SNMP Mibs and how to install them, then using snmpbulkwalk to speed up the scan",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 7,
            "seconds": 20
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Finding all the unique fields in our SNMPWalk with grep, sort, and uniq.  Which helps find fields of value",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 9,
            "seconds": 50
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " SNMP Allowed us to view running processes on a box, a password was in the argument so we can ssh in",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 16,
            "seconds": 0
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " SSH into the box and looking at the webserver files and configs",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 18,
            "seconds": 50
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Looking at Apache's config seeing there's a different site available to localhost, doing a SSH Tunnel to access it",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 20,
            "seconds": 35
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Finding an unauthenticated pandora fms exploit via google, playing with the injection manually",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 23,
            "seconds": 20
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Using SQLMap to automatically dump the database of pandora",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 27,
            "seconds": 45
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Testing sessions, should have used wfuzz or something to test all of these quickly",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 36,
            "seconds": 45
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Using the union injection to login as admin by placing a php serialized object that it expects",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 37,
            "seconds": 30
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " With admin access to Pandora FMS we can upload a shell and get code execution",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 39,
            "seconds": 0
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Going over LinPEAS Results",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 43,
            "seconds": 33
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Finding a custom SetUID File called Pandora_Backup",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 47,
            "seconds": 30
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Running strings against the binary shows the tar command without an absolute path, so it is likely vulnerable to command injection, going into Ghidra to confirm",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 49,
            "seconds": 0
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Showing the path traversal",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 50,
            "seconds": 45
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " The exploit didn't work because something isn't letting us do a SetUID. Digging into it",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 52,
            "seconds": 30
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Using SSH to log into the box and then running the exploit and seeing it works",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 56,
            "seconds": 30
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Showing the intended way to exploit Pandora, just finding a valid session cookie, and then a cmd injection vulnerability in ajax.php",
        "machine": "HackTheBox - Pandora",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 59,
            "seconds": 25
        },
        "videoId": "vSnB0AZDvjM"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Start of nmap, checking websites seeing old copyrights",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 54
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Discovering the HTTP Redirect on /login is pretty big, so its likely an EAR Vulnerability",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 4,
            "seconds": 10
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Discovering a LFI that enables us to read source code, chaining it with the proc directory and using wfuzz to discover additional python files",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 8,
            "seconds": 15
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " While our wfuzz runs testing against a login endpoint to discover an XSS in another webapp",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 10,
            "seconds": 50
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Going over the Python Source code",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 14,
            "seconds": 30
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Discovering Hibernate Query Injection (HQL) on the login page on port 8080",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 18,
            "seconds": 35
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Going over HQL (Hibernate) Injection Using boolean injection to login but need the browser fingerprint of the user",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 20,
            "seconds": 30
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Using our XSS to execute the fingerprint function and sending it to our server",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 24,
            "seconds": 0
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Logging into the application with our custom fingerprint and boolean injection, getting a JWT with a Serialized Base64 Encoded Java Object",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 27,
            "seconds": 50
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Examining the Backups Directory and finding Java Sourcecode to the app on port 8080",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 34,
            "seconds": 0
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Going over the javacode we have to discover we can probably craft a deserialization payload to gain code execution",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 42,
            "seconds": 0
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Opening up Eclipse and building our java project which we'll use to create a deserialization gadget",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 51,
            "seconds": 20
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " We can now compile our java project, lets creating the first serialized object which tells the server we are an admin",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 72,
            "seconds": 40
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Creating the second part of the Java Payload which puts the malicious code into our username",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 76,
            "seconds": 20
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Our exploit didn't work right awy, going over it again and finding some mistakes",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 84,
            "seconds": 40
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Got our reverse shell, discovering a binary cmatch which lets is exfil files one byte at a time",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 91,
            "seconds": 48
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Creating a python script to use cmatch to bruteforce the file one byte at a time",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 96,
            "seconds": 40
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Downloading the Java App that runs on port 8080 to see the database credentials, which can decrypt the SSH Key retrieved from cmatch",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 109,
            "seconds": 30
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Discovering a flask backup that is a new version of the Webapp on port 80 that has improved authentication",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 118,
            "seconds": 50
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Explaining the flaw of this webapp, it puts the secret after user controlled data, which enables us to bruteforce this one byte at a time",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 119,
            "seconds": 50
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Poorly explaining the bruteforcing the secret of AES ECB one byte at a time",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 121,
            "seconds": 50
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Using the XSS from earlier to steal cookies, which gives us an unprivileged user on the dev app",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 126,
            "seconds": 10
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Using curl on the /profile endpoint to set a new username and show we can have the server give us a new cookie which lets us bruteforce the secret",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 129,
            "seconds": 8
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Creating a python script to bruteforce the secret the server appends to our username before encrypting",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 136,
            "seconds": 20
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Running our script to bruteforce the data",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 151,
            "seconds": 35
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Creating a new username with the secret, which will trick the server into thinking we are an admin",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 153,
            "seconds": 50
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Now that we are logged in, the server runs as root so we can just get the root ssh key",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 157,
            "seconds": 20
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Going over the HQL a little more to show we could have extracted the fingerprint",
        "machine": "HackTheBox - Fingerprint",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 159,
            "seconds": 0
        },
        "videoId": "YBabDbyk3eo"
    },
    {
        "line": " Intro ",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Registering and logging in and examining what a regular user can do",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 20
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Playing with the file upload capability",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Discovering there is a JWT in our HTTP Request, examining it to see it is RS256 and has a claim",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 20
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Explaining how we are going to exploit the Claim Misuse vulnerability in this JWT",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 55
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Creating a JWT Header that will have a modified URL for the claim, website says its an invalid key but doesn't reach out to us",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 45
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Using the redirect functionality on the web page to allow us to place the websites domain in our JKU Claim ",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 12,
            "seconds": 20
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Modifying the JWK File to place our own RSA Key and generating one with ssh-keygen and openssl",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 10
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Showing us pulling N and E out of the RSA Key",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 0
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Converting the SSH Public key into a Certificate",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 30
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Updating the JWT to change our name to admin and finding a LFI Vulnerability",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 24,
            "seconds": 24
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Attempting to use WFUZZ to bypass the filter",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 27
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Giving up fuzzing wtih wfuzz",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 33,
            "seconds": 40
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Explaining why I'm going to try testing for unicode normalization and what it is, grabbing a payload from HackTricks",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 10
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Exploring /proc/self/ and hunting for the location of the webapp",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 37,
            "seconds": 10
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Finding the python application by using the /proc/self/cwd directory, then grabbing db.yaml and getting SSH Credentials",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 39,
            "seconds": 2
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Discovering a TREPORT Binary, which is a compiled python file",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 42,
            "seconds": 20
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Discovering the TREPORT Binary uses curl, which is weird",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 43,
            "seconds": 45
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Discovering the TREPORT Binary will allow us to use the file wrapper if we bypass the filter",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 20
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Bypassing the space filter in the TREPORT Binary using brace expansion in bash and having curl write the flag to /tmp",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 46,
            "seconds": 50
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Downloading a SSH Key and allowing us to login as root",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 49,
            "seconds": 0
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Examining the Web Application to show the Unicode Normalization Vulnerability",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 50,
            "seconds": 0
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Looking at the user table, to discover admin doesn't exist",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 56,
            "seconds": 30
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Finding out the login form was supposed to display errors but didn't because of a lacking some Jinja2 Templating Code",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 57,
            "seconds": 58
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Flailing around fixing the template to display error messages",
        "machine": "HackTheBox - Unicode",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 61,
            "seconds": 20
        },
        "videoId": "2mH6Ri7EAq0"
    },
    {
        "line": " Intro",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Start of nmap",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 49
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Talking about why dirbusting an API is different. Bruteforce methods instead of extensions and 404 doesn't terminate recursion",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 17
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Installing the latest version of FeroxBuster",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 10
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Running FeroxBuster with Force Recursion and multiple HTTP methods to discover user endpoints",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 40
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Downloading all users, creating a single json file, then using JQ to enable us to filter users",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 45
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Registering an account via the Signup endpoint. Analyzing errors to identify how it wants data",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 8
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Logging into the application in order to get a bearer token",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 55
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Using BurpSuite to add the Bearer Token to our HTTP Request and accessing /docs/",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 13,
            "seconds": 8
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Playing with the edit endpoint in the docs page",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 10
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Testing for Mass Assignment, by editing our profile but adding the is_superuser parameter",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 38
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Using the file endpoint to extract files from the application",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 15
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Creating a bash script to make extracting files easier for us",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 20,
            "seconds": 45
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Using the LFI to examine the /proc/ directory to get cmdline of pid and ppid, along with environment variables",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 45
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Examining the LFI Source Code to identify how the application works and JWT is created",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 35
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Trying to write files, discovering we need to edit our JWT",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 30,
            "seconds": 50
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Creating a bash script that will update the webserver code to include another endpoint to send a reverse shell",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 45
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Reverse shell returned, reviewing the logs to identify a password was entered as a username",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 41,
            "seconds": 50
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Trying to use Sudo and getting to PAM-Wordle",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 44,
            "seconds": 0
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Analyzing timestamps on the filesystem with find to identify a PAM Module that was manually placed on the file system (not put there by APT)",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 5
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Running strings on the PAM Module, discovering the wordlist used for wordle is in a user-readable directory",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 48,
            "seconds": 25
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Using the wordlist to cheat wordle and root the box",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 49,
            "seconds": 0
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Examining the source code of the box to identify why it is vulnerable to the Mass Assignment",
        "machine": "UHC - BackendTwo",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 50,
            "seconds": 10
        },
        "videoId": "QfAh47RlZjw"
    },
    {
        "line": " Intro talking about why we want to parse Bloodhound Data with JQ to create lists",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Just examining the data in Bloodhound",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 43
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Writing a Cipher Query to show all enabled users in Bloodhound",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 28
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Showing Bloodhound Debug Mode which will show Cipher Queries when you run them",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 35
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Start of looking at Bloodhound Data",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 28
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Digging through the JSON Structure with JQ to get to the Properties of a User",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 25
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Showing all the names, if we wanted to remove the quotes, we could use the -r flag for raw",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Using the Select Query in JQ to show only enabled/disabled users",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 50
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Outputting multiple fields in JQ so we can show usernames + descriptions",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 45
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Using JQ to filter out descriptions with null to only show AD Accounts with a description",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 20
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Talking about LastLogon and LastLogonTimeStamp",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 30
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Converting integers to string in JQ so we can output them",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 45
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Outputting all accounts where a PwdLastSet is Greater than the users last logon",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Using JQ to filter out empty array's which lets use find all accounts that are kerberoastable",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 10
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Using JQ to parse the computers and showing operating systems",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 50
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Filtering out Operating Systems which may help us find end of life OS's",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 50
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Using JQ to show each computers last logon which will let us view all active computers",
        "machine": "Manually Parse Bloodhound Data with JQ to Create Lists of Potentially Vulnerable Users and Computers",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 30
        },
        "videoId": "o3W4H0UfDmQ"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 53
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Using Kerbrute to identify valid users ",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 5,
            "seconds": 45
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Finding credentials for Hope.Sharp in an image on the website",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 9,
            "seconds": 40
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Showing Kerbrute paswordspray silently fails when time is out of sync",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 40
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Having troubles running the Python Bloodhound Ingestor, a digestmod error",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Giving up fixing my environment, creating a python virtual environment to run this script",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 15,
            "seconds": 50
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Uploading data to bloodhound, discovering a kerberoastable (web_svc) account, running GetUserSPN and Cracking the hash",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 18,
            "seconds": 0
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Parsing the raw Bloodhound Data with JQ and dumping all the valid usernames",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 23,
            "seconds": 20
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Using JQ select to show only the users that are enabled, its sql like syntax",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 25,
            "seconds": 20
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Running a password spray with kerbrute to find edgar.jacobs has the same credentials as Web_SVC",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 28,
            "seconds": 50
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Using CrackMapExec (CME) with the spider_plus module to dump all file names, then using JQ to parse the results with map_values(keys)",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 25
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Using SMBClient to download files, getting an excel document that has a protected row, modifying the document to remove the password and getting more passwords",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 36,
            "seconds": 0
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Using CME to run a large password spray guessing a single specific password for each user with the no bruteforce flag",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 40,
            "seconds": 0
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Back to Bloodhound, discovering our user can ReadGMSAPassword of an account that can reset password of an administrator",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 41,
            "seconds": 25
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Dumping files as Sierra.Frye with CME, discovering certificates, downloading them and then failing to crack them with John",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 43,
            "seconds": 0
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Using CrackPkcs12 to crack the PFX certificate, then loading it into our browser and accessing a Powershell WebConsole",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 49,
            "seconds": 10
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Gaining a powershell webconsole, flailing around a littlebit trying to read the GMSA Password",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 57,
            "seconds": 20
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Using Get-ADServiceAccount on to read information about the GMSA Account and get the password",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 59,
            "seconds": 43
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Running commands as the GMSA User with Powershell and Invoke-Command to reset Tristan.Davies Password... We could of psexec'd after this but I decided to do it the hard way. ",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 63,
            "seconds": 0
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Getting a Nishang Reverse Shell, thought this would be easy but there's quite a bit of AV Evasion we have to do ",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 68,
            "seconds": 0
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Getting rid of some of the reverse shell output allows nishang to bypass AV",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 74,
            "seconds": 40
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Using John to Crack the PFX File, I forgot to use pfx2john prior.",
        "machine": "HackTheBox - Search",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 80,
            "seconds": 25
        },
        "videoId": "c8Qbloh6Lqg"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 50
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Starting WPSCAN",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 10
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " There's no index.php in wp-content/plugins/, which lets us find a vulnerable plugin (eBook Download 1.1)",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 50
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Playing with the eBook Download LFI",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 5,
            "seconds": 50
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Doing a full nmap portscan",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 7,
            "seconds": 45
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Using the LFI to extract the process names with curling /proc and doing some cut/sed magic",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 20
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Downloading the cmdline for the first 1000 PID's",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Using find to show us files greater than a couple bytes to show us every valid PID",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Examining the final output, discovering screen running and gdb",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 14,
            "seconds": 40
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Using metasploit to exploit GDB",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 16,
            "seconds": 0
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Reverse shell returned, playing with screen to connect to the session",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 21,
            "seconds": 50
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Attaching to the root session, then digging into why this worked",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Digging into wpscan to see how to make it find this",
        "machine": "HackTheBox - Backdoor",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 31,
            "seconds": 40
        },
        "videoId": "4zrypJMVWpc"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 50
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Discovering backup.toby.htb and discovering GOGS",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Discovering a backup project in toby-admin, which is wordpress",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 7,
            "seconds": 40
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Downloading and running php malicious file scanner and finding a backdoor in the web code",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 9,
            "seconds": 38
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Finding the backdoor in comment.php and finding out its packed a bunch of times. Using a loop to get it back to the original code.",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 13,
            "seconds": 30
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Analyzing the depacked malware, to see it will run a function on a specially crafted comment",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Placing the comment which should trigger the backdoor, then analyzing what happens",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 22,
            "seconds": 40
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Wireshark shows the box starts a request on port 20053, listening and discovering it sends us data encryped with our secret",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 23,
            "seconds": 40
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Changing the secret to be 00, so it doesn't xor anything making it a bit easier for us to analyze",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 28,
            "seconds": 20
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Sending it a command by XOR'ing it with the key the server sends back to us",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 29,
            "seconds": 25
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Creating a python script to automate this",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 32,
            "seconds": 0
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Reverse shell returned python isn't there so using script to get our regular TTY",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 40,
            "seconds": 22
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Looking at /proc to see network information since ifconfig and ip are not on the box",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 42,
            "seconds": 15
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Running chisel to setup a proxy back to us",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 50,
            "seconds": 20
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Connecting to the MySQL Database to crack wordpress accounts",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 58,
            "seconds": 0
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Logging into the GOGS instance as toby-admin, downloading personal-webapp source code",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 61,
            "seconds": 10
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Making the webapp talk initiate a MySQL Connection back to us",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 64,
            "seconds": 30
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Editing our mysql instance to allow a host, but first we have to reset our mysql root password",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 66,
            "seconds": 20
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Extracting the SALT + Password from wireshark of MySQL Trying to log into us, figuring out how to convert it so we can crack",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 70,
            "seconds": 0
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Converting the SALTS to hex, which is what hashcat needs, then trying to crack the mysql password but failing",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 76,
            "seconds": 38
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Discovering the password used the password generator which is using the epoch time as a seed for random",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 78,
            "seconds": 35
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Copying the PWGenerator code to create a new wordlist of all potential passwords",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 79,
            "seconds": 30
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " MySQL Password has been cracked, this provides us ssh access to the MySQL Docker container",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 85,
            "seconds": 49
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Running pspy on the MySQL Container discover an SSH key gets temporarily written",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 88,
            "seconds": 17
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Writing a loop that runs cat against a file until it exists, then stops to get the SSH Key, which gets us on the host",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 90,
            "seconds": 36
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Decrypting the SQLite Database we had found earlier",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 93,
            "seconds": 20
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Hunting for a backdoor on the system by looking at full timestamps, since package managers chop simplify the time, which may make backdoors stick out",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 99,
            "seconds": 50
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Discovering the a pam library and /etc/.bd file",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 105,
            "seconds": 0
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Analyzing the pam library in ghidra to discover it allows a BD password to login, but also allows people to bruteforce the backdoor password 1 character at a time",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 107,
            "seconds": 0
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Explaining how we are going to bruteforce this password",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 113,
            "seconds": 20
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Creating a shell script to bruteforce the password",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 116,
            "seconds": 30
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Bruteforcing the password and getting root",
        "machine": "HackTheBox - Toby",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 120,
            "seconds": 45
        },
        "videoId": "XROkuXKgeg8"
    },
    {
        "line": " Intro talking about crowdsec and its multiplayer firewall",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Showing my setup, 3 web servers, 2 attack servers",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 4
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Installing Crowdsec",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 20
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Going over the command line interface, CSCLI showing decisions",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Showing descisions -a to go over every CrowdSec ban list",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 10
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Attacking the webserver, showing it detect the SSH Brute Force",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 45
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Installing the CrowdSec Bouncer, then showing the attack box is now blocked",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 25
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Using iptables and ipset to show how CrowdSec Blocks things (with iptables)",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 10
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Looking at Collections and Scenarios to see how CrowdSec works ",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 20
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Looking at the CrowdSec documentation to understand the inner workings",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 20
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Showing Crowdsec would block us for using GoBuster",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 13
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Installing the dashboard to see the fancy graphical reporting from CrowdSec",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 40
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Logged into the Dashboard",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 20,
            "seconds": 40
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Deleting descisions from CrowdSec to allow IP's to connect again",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 25
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Setting up a local crowdsec cluster, so agents talk to eachother",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 50
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Setting up the bouncers to all share signatures",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 29,
            "seconds": 20
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Looking at the bouncer logs, to see why it was broken. Updating the ApiURL, then our local cluster is setup and working",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 37,
            "seconds": 20
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Showing the cluster is working by having all hosts block simultaniously",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 42,
            "seconds": 50
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Showing a gobuster would cause the host to blocked everywhere",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 45,
            "seconds": 45
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Using the Dashboards SQL Web Client to extract information",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 48,
            "seconds": 0
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Explaining how our honey pot is going to work",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 52,
            "seconds": 0
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Configuring WEB-02 to forward SSH to another host instead of blocking it",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 52,
            "seconds": 56
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " The final iptables commands to forward traffic",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 57,
            "seconds": 15
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Installing Cowrie, the SSH Honey pot",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 58,
            "seconds": 50
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " The final demo, Getting blocked from WEB-01, then attempting to SSH to WEB-02 and immediately going to the honeypot",
        "machine": "Ippsecs First Look and Setting up CrowdSec  - Stealthfully Forward Malicious Users to Honeypots",
        "tag": "",
        "timestamp": {
            "minutes": 66,
            "seconds": 35
        },
        "videoId": "2OEDFCo1VXY"
    },
    {
        "line": " Introduction",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Start of nmap",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 53
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Examining the webpage, just finding json. Running gobuster to discover /docs and /api",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 50
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Examining the user and admin endpoint, showing /user/ has a 404 but we can go into it",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 20
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Talking about why API Discovery differs from normal web, instead of extensions we fuzz methods",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 10
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Using wfuzz to fuzz endpoints in /user/ with POST Requests to discover /login and /signup",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 15
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Fuzzing the signup endpoint, reading error messages to identify the fields it wants",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 50
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Showing that curl behaves differently. Lets troubleshoot this by sending our curl and burpsuite to wireshark and seeing why its behaving differently",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 40
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Attempting to login to the API with the credential we created, discovering we need a urlencoded request",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 24
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Logging in and getting a JWT Token, accessing /docs/ with it which is swagger documentation",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 30
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Authenticating in the swagger, so we can use the web interface to access private functions",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 10
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Changing administrators password with the UpdatePass endpoint, which is an IDOR like vulnerability",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 58
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Logging in with admin, then accessing the admin functionality",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 20,
            "seconds": 30
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Exploring the /proc/self directory with the LFI and finding where the source code to this app lives",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Extracting the JWT Secret Key from app/core/config.py, and adding the debug parameter, which enables us to access the /access endpoint",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 0
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Showing we cannot use slashes or pluses on this endpoint",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 20
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Getting a reverse shell",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 28,
            "seconds": 40
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Discovering the root password in an authentication log, because someone entered a password in a username field",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 29
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Just looking at the code briefly.  Should have prepared more to do this.  Will probably do a separate video showing FastAPI.",
        "machine": "UHC - Backend",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 20
        },
        "videoId": "x6Kpkl0C2xg"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Taking a look at the website",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 2,
            "seconds": 20
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Examining the AUTH Cookie and talking about why its unique",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 3,
            "seconds": 10
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Running FeroxBuster, talking about why I started using it",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 5,
            "seconds": 40
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Examining the length of the cookie with various usernames to discover the cookie length changes",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 8,
            "seconds": 15
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Discovering the block size",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 11,
            "seconds": 30
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Modifying the cookie and getting an Invalid Padding error message. Which indicates it may be vulnerable to Padding Oracle",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 30
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Running padbuster to perform the Padding Oracle attack and decrypt the cookie.  Then creating a new cookie changing our username",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 14,
            "seconds": 20
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Changing our cookie to the forged one and logging into the application as Administrator",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Finding an SQL Injection in the Logs endpoint, using SQLMap to dump everything",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 21,
            "seconds": 5
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Going over the SQLMap history files to view previously dumped data, so we don't have to make more requests to the server",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 29,
            "seconds": 15
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Cannot crack the MD5's in the database, downloading the CMS Made Simple source and doing some quick code review to find out all MD5's have a static salt",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 0
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Cracking the salted MD5 password of the editor user with hashcat",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 42,
            "seconds": 30
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Going to the devbuild-job.overflow.htb and discover there's an upload resume",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 45,
            "seconds": 10
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Uploading a jpeg results in the server giving us the ExifTool version, finding CVE-2021-22204 which is an exploit against ExifTool to run commands. Getting shell",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 49,
            "seconds": 0
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Reverse shell returned, getting developers password and using SSH to login as them",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 54,
            "seconds": 0
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Using find to list files owned by developer to find files owned by developer",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 56,
            "seconds": 35
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Hunting for files owned by tester and discovering commontask.sh, we can exploit this because we have write access over /etc/hosts",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 59,
            "seconds": 20
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Shell as tester",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 62,
            "seconds": 55
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Talking about extended attributes, using getfacl to show them",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 64,
            "seconds": 25
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Discovering a SetUID File, every time running it there is the same PIN Code it is prompting us for. Copy it to our local box and seeing if the pincode is the same",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 66,
            "seconds": 0
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Analyzing the binary in Ghidra, to discover there is no srand(), so the seed is always 1 for rand()",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 68,
            "seconds": 0
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Discovering the pin code by setting a break point on the check in gdb",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 71,
            "seconds": 30
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Discovering the buffer overflow within the decompiled source, then using pattern_create to find where we overwrite EIP",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 74,
            "seconds": 30
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Looking at functions to set EIP to via ROP. Finding the Encrypt Function",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 76,
            "seconds": 30
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Discovering a timing attack in the encrypt function which lets us read any file",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 81,
            "seconds": 0
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Trying to perform the timing attack replacing a file with a symlink",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 84,
            "seconds": 30
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Apparently we cannot just use /tmp/ for this exploit, we need to be in a directory. Performing the attack and getting root",
        "machine": "HackTheBox - Overflow",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 87,
            "seconds": 0
        },
        "videoId": "4d87D4zFMEg"
    },
    {
        "line": " Intro, the stream is here: https://www.twitch.tv/videos/1445106911",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Start of the video, showing what is new about this technique",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 45
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Running through the example, showing we can change the filename in ps to anything we want",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 17
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Showing what this looks like in the ps output",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 15
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Explaining what I don't like about the example used on the website",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 15
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Explaining what process substitution is, which is a really good way to pass arguments to bash scripts when piping with curl",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 55
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Testing process substitution with ddexec locally",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 0
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Showing how to execute this with DirtyPipe",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 45
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Successful execution of DitryPipe",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 45
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Showing a dirtypipe that changes the root password, changing the default password it uses",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 30
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Showing we changed the password, and then trolling myself because this box has PAM_WORDLE installed",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 20
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Finding a DirtyPipe exploit that modifies a SetUID",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 45
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Cheating at our game of Hacker Wordle, to make sure we actually changed the root password earlier.",
        "machine": "Executing Linux Binaries Without Touching Disk - Living Off The Land with DDExec and Dirty Pipe Demo",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 30
        },
        "videoId": "MaBurwnrI4s"
    },
    {
        "line": " Intro",
        "machine": "Basic Linux Memory Forensics - Dumping Memory and Files with DD - Analyzing Metttle/Meterpreter",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "uYWTfWV3dQI"
    },
    {
        "line": " Discovering a weird binary running in /tmp/ but it doesn't exist on disk",
        "machine": "Basic Linux Memory Forensics - Dumping Memory and Files with DD - Analyzing Metttle/Meterpreter",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 47
        },
        "videoId": "uYWTfWV3dQI"
    },
    {
        "line": " Start of explaining dd copying things out of memory",
        "machine": "Basic Linux Memory Forensics - Dumping Memory and Files with DD - Analyzing Metttle/Meterpreter",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 55
        },
        "videoId": "uYWTfWV3dQI"
    },
    {
        "line": " Reading maps to identify where the file is, showing how to covnert hex to decimal in bash",
        "machine": "Basic Linux Memory Forensics - Dumping Memory and Files with DD - Analyzing Metttle/Meterpreter",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "uYWTfWV3dQI"
    },
    {
        "line": " File extracted from memory",
        "machine": "Basic Linux Memory Forensics - Dumping Memory and Files with DD - Analyzing Metttle/Meterpreter",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "uYWTfWV3dQI"
    },
    {
        "line": " Copying the heap from memory and discovering it is mettle/meterpreter based upon strings",
        "machine": "Basic Linux Memory Forensics - Dumping Memory and Files with DD - Analyzing Metttle/Meterpreter",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 15
        },
        "videoId": "uYWTfWV3dQI"
    },
    {
        "line": " Showing we don't need to use DD to extract the file, can just use the \"exe\" file in proc/pid/",
        "machine": "Basic Linux Memory Forensics - Dumping Memory and Files with DD - Analyzing Metttle/Meterpreter",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 55
        },
        "videoId": "uYWTfWV3dQI"
    },
    {
        "line": " Opening the elf in Ghidra and examining its decompiled output",
        "machine": "Basic Linux Memory Forensics - Dumping Memory and Files with DD - Analyzing Metttle/Meterpreter",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 15
        },
        "videoId": "uYWTfWV3dQI"
    },
    {
        "line": " Showing what the file looks like in Cutter, which has a different decompile view",
        "machine": "Basic Linux Memory Forensics - Dumping Memory and Files with DD - Analyzing Metttle/Meterpreter",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "uYWTfWV3dQI"
    },
    {
        "line": " Reading the Metasploit source code to identify what it looked like, to confirm what our findings from reversing",
        "machine": "Basic Linux Memory Forensics - Dumping Memory and Files with DD - Analyzing Metttle/Meterpreter",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 40
        },
        "videoId": "uYWTfWV3dQI"
    },
    {
        "line": " Using MSFVenom to generate our own stager in order to confirm this is indeed what we saw on the box and that we extracted it correctly",
        "machine": "Basic Linux Memory Forensics - Dumping Memory and Files with DD - Analyzing Metttle/Meterpreter",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 0
        },
        "videoId": "uYWTfWV3dQI"
    },
    {
        "line": " Using GDB against the stager to just practice reversing",
        "machine": "Basic Linux Memory Forensics - Dumping Memory and Files with DD - Analyzing Metttle/Meterpreter",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 50
        },
        "videoId": "uYWTfWV3dQI"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Running NMAP",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 57
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " The footer talks about BMC, explaining why I jumped to IPMI when reading this",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 10
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Running a Virtual Host (VHOST) Scan with Wfuzz to try and find a domain that points to an ILO",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 30
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Talking about IPMI",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 20
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Running Metasploit to dump the IPMI Hash and then crack it with hashcat",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Running IPMITool to explore the interface, there isn't anything really here",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 10
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Logging into Zabbix with the credentials and then fumbling around creating a malicious check",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Discovering what we were doing wrong, we didn't want to put quotes in the system.run command",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 50
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Zabbix kills our shell pretty quickly, just running a second command really fast in order to keep a process alive",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 25
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Attempting to get into the Zabbix database, need to switch to the ipmi-svc user",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 0
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Showing a cool MySQL command \\G to display results in a table form, useful when dumping a lot of columns",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 34,
            "seconds": 57
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Running LinPEAS",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 36,
            "seconds": 5
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " No real exploit paths found, checking for exploits in the MYSQL Server and finding CVE-2021-27928 (WSREP)",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 39,
            "seconds": 30
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Performing the MySQL WSREP Exploit and getting root",
        "machine": "HackTheBox - Shibboleth",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 41,
            "seconds": 10
        },
        "videoId": "tVXGM10kRwY"
    },
    {
        "line": " Intro",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Start of nmap",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 55
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Enumerating the web page, finding a way to validate potential users",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 35
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Examining the data the website stores in our browser",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 2,
            "seconds": 50
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Attempting type juggling, finding out its not vulnerable",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 5,
            "seconds": 20
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Before we WFUZZ, just playing with PHP to see how it handles numbers. ",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 6,
            "seconds": 20
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Running WFUZZ with the range payload to bruteforce all possible pin code, find out we get blocked.",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 8,
            "seconds": 15
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Searching for ways to bypass rate limits, testing out the X-FORWARDED-FOR header",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Using WFUZZ with two wordlists in the zip mode, so we can fuzz with pin codes and change the ip address to bypass the ratelimit (FUZ2Z)",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 15
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Logged into the application, discovering the secret parameter which prevents us from tampering with the request",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 17,
            "seconds": 30
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Doing type juggling to bypass the tamper detection and finding SQL Injection",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 45
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Extracting information out of the database with union injections with group_concat and concat",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 20,
            "seconds": 15
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Nothing interesting in the database, dropping a webshell but first we have to view the nginx config to find where the website is",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 26,
            "seconds": 40
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Using the INTO OUTFILE command to write a shell to /srv/altered/public/",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 30,
            "seconds": 30
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Reverse shell returned",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 55
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Explaining some basics around dirty pipe and why people use /etc/passwd",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 35,
            "seconds": 15
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Using the DirtyPipe exploit that resets root's password to aaron",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 38,
            "seconds": 50
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " In order to use the \"su\" command, we need to beat wordle with a custom dictionary... Failing to play wordle",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 39,
            "seconds": 50
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Using a DirtyPipe exploit to overwrite a SetUID Binary, which bypasses our wordle game",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 42,
            "seconds": 50
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Extra: Revisiting wordle, but now we have the dictionary it uses, so we can cheat and win the game",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 45,
            "seconds": 10
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " Extra: Fumbling around in the source code, learning some things but failing to enforce authentication on the GetProfile Endpoint.",
        "machine": "UHC - Altered",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 49,
            "seconds": 30
        },
        "videoId": "a29TXlGO0AA"
    },
    {
        "line": " PowerSiem: https://github.com/IppSec/PowerSiem",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Creating PowerSiem: https://www.twitch.tv/videos/1438252177",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Sysmon: https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Sysmon Configuration File: https://github.com/Neo23x0/sysmon-config",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Intro",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Talking about PowerSIEM",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 36
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Installing Sysmon with Florian Roth's default config",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 40
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Showing what PowerSIEM does by running it and opening a command prompt, browser, etc",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Explaining the PowerSIEM Script, how it works, and all the current sysmon events",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 50
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Setting breakpoints in Powershell ISE",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 50
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Adding data to the Registry Set event",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 48
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Showing just running a SysInternals tool creates a registry key for accepting the EULA",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 58
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Running Impackets PSEXEC, to find out Defender stopps it.  Running Sysinternals Version and showing defender allows it.",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 45
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Using PowerSIEM to show how the Sysinternals PSEXEC works.",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 50
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Disabling AV, Running impacket's version again to show how it differs",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 50
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Creating a Cobalt Strike Beacon and showing some alerts",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 35
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Hiding network connection alerts in PowerSIEM by just commenting out the Write Alert line",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 18,
            "seconds": 25
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Running a shell command in CobaltStrike and showing what it looks like in PowerSIEM",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 20,
            "seconds": 0
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Running Mimikatz and talking about its sacrificial process, pipes, and mimikatz accessing LSASS",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 0
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Showing not everything will be logged",
        "machine": "PowerSIEM - Analyzing Sysmon Events with PowerShell - Dynamic Malware Analysis",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 5
        },
        "videoId": "MvfhIydxFmw"
    },
    {
        "line": " Into",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Start of nmap talking about seeing two ports having the same HTTP Banner",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 4
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Checking out the webpage to discover source code and some docs",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 20
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Always RTFM, Playing with the API to Register a user, login, and check out privilege level.",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Renaming our burp repeater tab by just double clicking on the number",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 5,
            "seconds": 50
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Trying to login with a name instead of email",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Testing our login token to find out it uses JWT's in a non-standard way",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 10
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Analyzing the source code to see the token is used in a header called \"auth-token\"",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 50
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Looking at git commit history to see there is a hard coded secret in an older commit and forging a token",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 12,
            "seconds": 40
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Changing our tokens user, going back to the source code and seeing \"theadmin\" is a hardcoded administrative user",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 13,
            "seconds": 40
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Talking about the importance of rotating secrets in a web application",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 14,
            "seconds": 30
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Analyzing the private.js which shows a logs endpoint that is vulnerable to RCE",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 16,
            "seconds": 30
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Testing command injection and getting a reverse shell",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 17,
            "seconds": 50
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Noticing we are a user on the box, seeing our shell is /bin/bash, dropping a SSH Key for a second way into the box",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 22,
            "seconds": 0
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Checking NGINX Configuration to see if there is any difference between the two websites (port 80 and 3000), there isnt.",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 23,
            "seconds": 40
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Running LinPEAS, discovering a custom SetUID Binary called count",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 25,
            "seconds": 20
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Running the custom count binary against /etc/shadow, discovering it can read files as root, but not write files as root",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 30,
            "seconds": 0
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Examining the source code, to discover it allows for dump files to be created",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 31,
            "seconds": 57
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Failing to kill the linux process with the correct signal",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 33,
            "seconds": 15
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Pulling up the man page to kill and listing all signals, then killing the process with a Segfault (11)",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 34,
            "seconds": 50
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Using apport-unpack to extract the crash report into readable files",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 36,
            "seconds": 40
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Examining the coredump to discover the file read is there!  Then doing the same thing with an SSH Key to get root on the box",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 37,
            "seconds": 23
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Showing how file descriptors (/proc/pid/fd) work and failing to pull the ssh key, because the key isn't readable by us.",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 40,
            "seconds": 0
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Failing to dump the the heap memory with DD as a regular user",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 41,
            "seconds": 30
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Back the examining the fd's in proc, showing if we had permission to read the file, that we could bypass the directory permission by cat'ing the file handle",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 44,
            "seconds": 10
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Dumping the heap of the process as the root user to show we can extract the file from the processes memory",
        "machine": "HackTheBox - Secret",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 48,
            "seconds": 0
        },
        "videoId": "byYZl9CSFtM"
    },
    {
        "line": " Join Intigriti here: https://go.intigriti.com/ippsec",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " Intro ",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " Enumerating the application utilizes Laravel based upon a default cookie name.",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 54
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " Jumping into a PHP Interpreter to show off the Type confusion bug.",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 30
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " Trying the same thing in Python, Javascript, Ruby, and showing that they aren't vulnerable in this way.",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " Talking about the importance of the Laravel API Middleware",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 30
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " Converting the GET request to have JSON Data",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " Changing the JSON Data to pass a boolean for password",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 8,
            "seconds": 40
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " Bypassing login with type confusion",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 50
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " Sponsor highlight Intigriti",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 30
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " End of sponsor highlight",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 12,
            "seconds": 48
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " Looking at the Laravel Code to find where the route is for the custom login function",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 30
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " Showing the vulnerable function",
        "machine": "PHP Type Juggling - Why === is Important - Bug Bounty Tips",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 0
        },
        "videoId": "idC5SAsKhlE"
    },
    {
        "line": " Intro",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " Why DLL Hijack is my favorite persistence, talk about a few others",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 25
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " Going over the source code to our sample applications to talk about DLL Hijacking",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 3
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " Compiling our executable and dll then transfering it to our windows box",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 20
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " Using Process Monitor to show standard DLL Hijacking (when a DLL Does not exist)",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 4,
            "seconds": 50
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " Showing the order windows tries to load the DLL (Directory of binary then PATH)",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 10
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " Talking about a somewhat common mistake when people make edits to the PATH (ex: Java/Python/etc)",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 20
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " Placing the DLL test.exe is looking for and achieving code execution",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " Showing if we can write in c:\\Windows, we can hijack most dll's explorer.exe loads from system32.",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 25
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " Messing up using Process Monitor for a bit, sorry should have prepped a bit more",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 0
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " Showing why explorer is unique, then putting CSCAPI.DLL into c:\\Windows\\... This would get ran anytime a user logs into the system",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 30
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " DLL Hijacking OneDrive for user level persistence",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 55
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " Wrapping up, talking about some videos where I talk more about creating DLL's which can help with this",
        "machine": "All About DLL Hijacking - My Favorite Persistence Method",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "3eROsG_WNpE"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Start of Nmap",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 57
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Start of gobuster to enumerate VHOST and Files",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 3,
            "seconds": 10
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Showing how I like to find the needles in a haystack when it comes to parsing lots of data.",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 7,
            "seconds": 15
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Using google reverse image search to try to identify what a logo means",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 9,
            "seconds": 40
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Hunting for XSS, putting unique URL's in all fields (check for a callback later)",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Going over the Docker Compose file we had downloaded",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 13,
            "seconds": 45
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Discover our XSS Attack worked, looking for LocalStack CVE's and discovering one in the dashboard",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 14,
            "seconds": 50
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Start of exploiting the XSS",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 18,
            "seconds": 15
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Creating a CSRF to force the victim to navigate to pages and send us the date, read his email to discover an S3 Domain",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 20,
            "seconds": 0
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Start of looking at creating an AWS Lambda application",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 30,
            "seconds": 0
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Using aws cli to create a lambda function",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 33,
            "seconds": 20
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Creating a malicious lambda, then using XSS to send the user to the LocalStack dashboard and trigger our code",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 39,
            "seconds": 30
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Reverse shell returned on the docker container. Use PSPY to identify what localstack does when invoking lambda functions and finding an 0day",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 44,
            "seconds": 30
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Testing out our 0day, creating a malicious lambda and injecting when localstack creates a docker to run the code",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 49,
            "seconds": 30
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Got root on the localstack container, abusing our ability to create docker containers to escalate to root on the host system",
        "machine": "HackTheBox - Stacked",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 51,
            "seconds": 50
        },
        "videoId": "aWXfEDIYZu8"
    },
    {
        "line": " Intro",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Start of nmap, getting distribution by googling SSH/HTTP Server headers",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 5
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Checking out the web page and discovering it is a Laravel PHP Application based upon the cookie ",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 40
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Talking a little bit about Laravel Internals, and why our web request is going to the API Middleware is useful",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 10
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Showing that Laravel accepts data in the BODY even if it is a GET Request",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 50
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Changing our content type to JSON which will allow us to send JSON to the Laravel API",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 25
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Setting the password to the boolean true and bypassing login, explaining why === is important",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 42
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Logging into the application and discovering a zip file that is encrypted with ZipCrypto",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 12,
            "seconds": 40
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Showing where I got the inspiration for creating this challenge! An actual leaker made this mistake.",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 13,
            "seconds": 15
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Decrypting the zip with a known plaintext attack with bkcrack",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 15
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Logging into the box with the SSH Key",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 50
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Looking at the Laravel Source Code to find where the login function is and getting the root password for the box",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 30
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Showing the vulnerable function of the applicaiton, and that using three equal signs instead of two would fix it.",
        "machine": "UHC - Ransom",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 30
        },
        "videoId": "YGoR2gSDaI4"
    },
    {
        "line": " Intro ",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 15
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Poking at the SSH Chat Application",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Running a VHOST Scan and discovering pets.devzat.htb",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 10
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Discovering pets.devzat.htb doesn't have a 404 and is a golang webserver",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 30
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Fuzzing the user input on pets",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 55
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Webapp ignores when a semicolon is at the end of user input, indication to command injection [MasterRecon]",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 10
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Using Gobuster to discover the .git directory and working around the issue of the box having no 404 errors. Use git-dumper to extract.",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 20
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Doing some light source code analysis on the Go Binary",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Showing it is also an LFI Vulnerability, just incase command injection was patched",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 15
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Reverse shell returned, examining the git log of the files, don't see anything interesting",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 0
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Discovering from localhost we can login to chat as anyone, but messages are hidden on Reverse Shells. Switch to SSH and read the messages.",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 30,
            "seconds": 50
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Looking for an InfluxDB vulnerability via exploit-db, changelog, and synk",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 36,
            "seconds": 40
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Going to git, and pulling up the issue created for this issue so we can understand how to exploit it",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 39,
            "seconds": 40
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Using JWT.IO to create a token with a blank signature",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 41,
            "seconds": 30
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Testing our authentication bypass with curl, then creating a bash script to make it a bit easier for us to run queries.",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 20
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Using the HTTP API of InfluxDB to show databses, tables, and dump data to get catherines password",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 47,
            "seconds": 0
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Using the find command to find files owned by catherine, to find a backup of the dev source code",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 53,
            "seconds": 20
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Finding all the files that differ between two directories via find, md5sum, and grep",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 55,
            "seconds": 40
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Discovering the hard coded password required for the FILE command in the new devzat application",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 59,
            "seconds": 0
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Grabbing roots SSH Key via an LFI in the FILE Command",
        "machine": "HackTheBox - Devzat",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 60,
            "seconds": 40
        },
        "videoId": "QEgtbzS1Pyc"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Identifying it is a windows box via ping and looking at its TTL, and running Gobuster with a lowercase wordlist since windows is not case sensitive.",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 2,
            "seconds": 25
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Looking at HashPass to see it just generates static passwords based upon Name/Website/Master Password ",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 4,
            "seconds": 30
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Identifying a JSESSIONID cookie given when accessing /maintenance/ which enables a weird path traversal vuln [MasterRecon]",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 8,
            "seconds": 40
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Identifying the Nuxeo application and searching for the web vulnerability",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 15
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Testing for SSTI in an error message, normal SSTI doesn't work since it is java. Going to payloadallthethings to get a valid payload",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 15,
            "seconds": 55
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Testing an java EL SSTI Payload to get code execution. Don't get output but can validate we run code via ping",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 40
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Getting a reverse shell",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 21,
            "seconds": 25
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Looking at listening ports, running a powershell snippet to get process name and the port they listen on",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 24,
            "seconds": 25
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Looking for an exploit with Unified Remote.  Using Chisel to forward the port it listens on to us.",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 29,
            "seconds": 15
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Going over the Unified Remote Exploit script, changing where it writes files to and using msfvenom to generate a malicious exe for us",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 30
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " What i say here is wrong... I did not notice I got a shell back when writing to C:\\Windows\\Temp... lol.",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 37,
            "seconds": 0
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Converting the Unified Remote script to Python3 with some vim macro magic",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 39,
            "seconds": 9
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Running WinPEAS and discovering a Firefox credential",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 42,
            "seconds": 10
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Using HashPash with the creds WinPEAS displayed to get the development users password. Using chisel to forward WinRM to us and accessing the box as development",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 50,
            "seconds": 10
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Start of RE of the MyFirstApp Binary. Opening Ghidra",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 55,
            "seconds": 0
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Searching for Strings to find where Username: is in the program and looking at code around it to see how authentication works",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 55,
            "seconds": 30
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Looking at Encrypt1() and discovering it is just Rot47",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 60,
            "seconds": 40
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Looking at Encrypt2() and discovering it is just AtBash",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 64,
            "seconds": 30
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Logging into the application and discovering what is available to us after auth",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 72,
            "seconds": 45
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Discovering a buffer overflow in the code parameter, then opening it in x32dbg and seeing we overwrite EIP",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 76,
            "seconds": 10
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " EIP Overwrote, looking at ESP we only have 10 bytes of space here. Talking about JMP Backwards to get to a spot where we have more space",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 82,
            "seconds": 55
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Start of pwntools script, using x32dbg to show us a JMP ESP ",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 85,
            "seconds": 0
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Using msf-metasm_shell to generate shellcode for us",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 87,
            "seconds": 0
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Disabling DEP for our process on our windows box",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 92,
            "seconds": 5
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Showing we can use the JMP ESP, to execute our JMP -70 to get back to the start of our userinput. Its still not large enough for a revshell need to use Socket Reuse to increase buffer size",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 95,
            "seconds": 10
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Setting a breakpoint on a recv() call and looking at the stack.. We will have to mirror this.",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 98,
            "seconds": 20
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Getting the location of the Socket Handle which is ESP+0x48, then writing shell code to save that",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 102,
            "seconds": 40
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " When trying to add 48, we get a null byte which is bad.  Using an add/sub call to add 48 without null bytes",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 105,
            "seconds": 50
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Moving ESP to the other side of EIP so we don't have to worry about overwriting EIP and buffer overflowing the program again",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 111,
            "seconds": 20
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Getting 0 on the stack by just xor ebx, ebx - Then pushing the size of data we want",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 115,
            "seconds": 30
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Pointing the memory address recv saves data to within our junk data, as this is where the program returns to after the call",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 120,
            "seconds": 35
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Using Ghidra to get the memory address of the RECV() function, so we can call it",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 123,
            "seconds": 35
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Using MSFVenom to generate the shellcode for a reverse shell and testing out the exploit",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 129,
            "seconds": 45
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Showing by setting EXITFUNC=THREAD we don't kill the program when we exit our shell",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 133,
            "seconds": 50
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Updating our script to point at the hancliffe machine and getting our shell",
        "machine": "HackTheBox - Hancliffe",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 135,
            "seconds": 50
        },
        "videoId": "kA-bkftyyY0"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 5
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Quickly testing SMB, then using CME to get a hostname of the box",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 55
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Testing out the website, discovering admin:admin logs us in. Running gobuster with HTTP Auth ",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " The website allows us to write to a file share. Going over SCF Files and how we can use them to steal NTLMv2 Hashes by having an external icon",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 55
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Using hashcat to crack the NTLMv2 Hash",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Using CME with these credentials to discover we can WinRM to the box",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 45
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Downloading WinPEAS and using our Evil-WinRM shell to execute it",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 11,
            "seconds": 30
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Going over the WinPEAS Output and discovering a Ricoh printer driver",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 14,
            "seconds": 40
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Going over the Ricoh printer driver exploit",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 21,
            "seconds": 50
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Switching to Metasploit, showing an issue with the WinRM Module in MSF",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 23,
            "seconds": 10
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Using MSFVenom to create an executable then having WinRM send us the meterpreter shell",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 26,
            "seconds": 25
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Having trouble getting the exploit to run... Switching to a 32 bit payload... then migrating to a interactive process",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 29,
            "seconds": 30
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Using Meterpreter to migrate to an interactive process then suddenly the exploit works",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 32,
            "seconds": 5
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Using the powershell PrintNightmare to privesc",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 34,
            "seconds": 30
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Showing the two WinRM MSF Scripts operate completely differently.",
        "machine": "HackTheBox - Driver",
        "tag": "windows easy",
        "timestamp": {
            "minutes": 37,
            "seconds": 20
        },
        "videoId": "N2ahkarb-zI"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 50
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Examining the SSL Certificate to find alternative names",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 50
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Discovering PassBolt, but looks like we need an email to login to passbolt",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Checking the bolt.htb and finding a link to download a custom docker image",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 10
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Extracting the docker image and viewing the docker layers",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Showing off \"Dive\" which is a tool to navigate docker images",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 0
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Showing my initial process at analyzing this with a little bash-fu",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 50
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Creating a bash loop to print every file",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 50
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Viewing config.py, and history files by decompressing the layers they are in",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 50
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Viewing information in the SQL Lite Database and grabbing a password hash",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 20
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Logging into the web app",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 0
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Extracting all of the layers so we can view the source code",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 0
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " ash_history is now empty, which shows there were multiple versions of this file",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 30
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Viewing different versions of routes.py in the docker layers",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 0
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Exrtacting the invite code from an old version of routes.py, then registering an account on demo.bolt.htb, which also allows for access to mail.bolt.htb",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 30
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Checking the mail and finding out the SSTI Worked",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 31,
            "seconds": 50
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Finding an SSTI Jinja2 Payload on PayloadAllTheThings that we can use for RCE, then getting a reverse shell",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 34,
            "seconds": 10
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Grabbing passwords from all the web applications",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 36,
            "seconds": 30
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " The PassBolt application doesn't have password hashes for users, but has a PGP Encrypted Secret",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 42,
            "seconds": 0
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Using CME (CrackMapExec) to spray ssh with a list of usernames and passwords and finding Eddie's password which we can use SSH With",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 10
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Extracting information out of Eddie's Google Chrome and finding data a PGP Private Key",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 47,
            "seconds": 10
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Trying to import the PGP Key from chrome with GPG but it is encrypted",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 50,
            "seconds": 15
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Using John The Ripper GPG2John to crack the PGP Key",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 51,
            "seconds": 0
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Importanting the private key, then decrypting the message to get root's password",
        "machine": "HackTheBox - Bolt",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 52,
            "seconds": 45
        },
        "videoId": "hLGS52X_zr4"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Start of nmap, adding earlyaccess.htb to the hostfile",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 5
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Registering an account to see what features are enabled to regular users",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 5,
            "seconds": 20
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Discovering bad characters of username are only checked upon registration, not changing it from the profile page",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 6,
            "seconds": 20
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Testing the Contact Forms for XSS by sending a message to ourself",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 11,
            "seconds": 50
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Using document.location javascript to steal cookies",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 10
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Taking the administrators cookie and discovering some new hosts/functionality/key validation script",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 17,
            "seconds": 5
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Going over the key validaiton script",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 20,
            "seconds": 7
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Breaking the first part of the Key which is a simple Bit Shift and XOR to get KEY01",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 23,
            "seconds": 55
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Breaking the second part of the key which calculating every permutation of when two strings equal eachother",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 30,
            "seconds": 5
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Showing the lazy way to do the second part, since we never actually need to know every combination",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 34,
            "seconds": 20
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Breaking the third part of the key, which has a rotating magic. Discovering the keyspace for magic is only 60",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 36,
            "seconds": 15
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Coding the third part to display valid keys for all 60 combinations",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 38,
            "seconds": 50
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Breaking G4, which is just a simple XOR",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 43,
            "seconds": 30
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Talking about how the CheckSum works and how it is similair to the Luhn Check",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 47,
            "seconds": 0
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Putting everything togather and building a key generator to give us 60 keys",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 48,
            "seconds": 50
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Allowing our script to attempt to register keys on our behalf",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 58,
            "seconds": 50
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Debugging issues in our script",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 71,
            "seconds": 30
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " The issue of our script, we copied the checksum incorrectly",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 78,
            "seconds": 40
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Logging in to play the game and talking about forging scores",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 82,
            "seconds": 50
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Playing with Second Order SQL Injection with our username and scoreboard",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 84,
            "seconds": 20
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Extracting table information from information_schema with our union sql injection ",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 86,
            "seconds": 8
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Extracting hashes from the database than cracking to get the administrators password",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 91,
            "seconds": 50
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Logging into developer admin panel",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 96,
            "seconds": 10
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Fuzzing file.php to discover hidden parameters to find filepath which can be used to extract source code via lfi and php filters",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 99,
            "seconds": 0
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Reading the source code of hash.php to discover we can execute code if we pass a debug parameter",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 102,
            "seconds": 30
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Reverse shell returned",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 105,
            "seconds": 45
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Switching to www-adm user which has the .wgetrc file and can access the api",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 108,
            "seconds": 0
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Downloading a static compile of nmap so we can find the api host",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 109,
            "seconds": 10
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Using python to print the ip address of the box",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 113,
            "seconds": 0
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Parsing the check_db output to get database credentials, which can be used to SSH into the box",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 115,
            "seconds": 40
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Going over linpeas output",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 120,
            "seconds": 0
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Reading the mail to drew, to discover the gameserver will reboot upon crashing. Using static nmap to find the gameserver",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 126,
            "seconds": 0
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Setting up the SSH Port Forward so we can access the gameserver",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 128,
            "seconds": 45
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Creating a script that will execute upon the gameserver restarting to gain root on the docker",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 130,
            "seconds": 20
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Crashing the gameserver by setting the rounds to -1, and getting the root password to docker which is game-adm's password",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 136,
            "seconds": 50
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Abusing the capabilities set on arp to read files on the box",
        "machine": "HackTheBox - EarlyAccess",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 140,
            "seconds": 25
        },
        "videoId": "P4KLqTORmIw"
    },
    {
        "line": " Intro",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Running nmap, discovering wordpress",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 7
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Manually looking at the wordpress site, finding a post that has some dynamic content on it... This is weird",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 40
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Attempting to poison the browser table with php/ssti/etc user agents",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Starting wpscan with enumerating all plugins",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 6,
            "seconds": 0
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " WPScan found a backup of the configuration file",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 8,
            "seconds": 20
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Changing the year on the password of the configuration file and discovering MFA",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Talking about the \"Discover Backup\" argument of gobuster, which does find another wp-config.php backup file",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 11,
            "seconds": 30
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Explaining what the XMLRPC Interface to wordpress",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 13,
            "seconds": 53
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Showing the system.listMethods function on the XMLRPC to list all the methods",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 16,
            "seconds": 30
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Switching over to the Python Wordpress XMLRPC Library to play with this interface, creating an object to login",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 18,
            "seconds": 50
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Showing how to dump users, then examine properties of a user",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 21,
            "seconds": 35
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Attempting to use this library to upload files, discover we can only upload images",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 24,
            "seconds": 40
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Dumping the posts, and discovering the table we found earlier was using the php-everywhere plugin on a post. Using the XMLRPC Interface to edit the post to host malicious PHP",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 28,
            "seconds": 15
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Creating a PHP File that will write another PHP Shell and lock it down to an IP Address",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 40
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Had an issue with my webshell, running it locally to discover what the issue was and re-uploading",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 38,
            "seconds": 40
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Got RCE! However, reverse shells aren't working enumerating the firewall",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 42,
            "seconds": 45
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Explaining why I am going to use my Forward Shell",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 45,
            "seconds": 15
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Grabbing my Forward Shell Skeleton code, modifying it and getting RCE",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 46,
            "seconds": 45
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Forward shell works!  That took next to no time and I explained a lot of it",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 50,
            "seconds": 0
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " The date on pkexec is old, it's probably vulnerable.  Compiling a POC and uploading it through the XMLRPC, then running it to get root",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 53,
            "seconds": 20
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Another PwnKit method, if I didn't have a Forward Shell having pwnkit chmod /root/ to 777 would allow us to read the flag",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 58,
            "seconds": 0
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Going over the WPScan enumerate all plugins to show how beneficial this output would have been",
        "machine": "UHC - Pressed",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 63,
            "seconds": 10
        },
        "videoId": "p8mIdm93mfw"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Start of nmap, examining the page discovering its all static with no user input",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 57
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Examining the source code of the website",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 5,
            "seconds": 20
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Running the javascript through a beutifier so we can easily read this, and finding another web endpoint",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 20
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Going to api-prod.horizontall.htb, running gobuster and examining the endpoints",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 57
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Navigating to /admin brings us to a STRAPI login, searching for exploits and finding an RCE",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Lightly reading the exploit script, we will go more in depth at the end of this video",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 13,
            "seconds": 50
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Getting a reverse shell",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 15,
            "seconds": 15
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Reverse shell returned, looking for how the webapp talks to the database",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 17,
            "seconds": 30
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Explaining why this nginx server uses proxy_pass and has a node app listening on port 1337",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 18,
            "seconds": 50
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Dropping an SSH Key and using SSH to access this box, no privilege escalation yet just wanted a better shell",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 21,
            "seconds": 20
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Having a lot of trouble with getting data out of the MySQL Database, not exactly sure what went wrong here.",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 25,
            "seconds": 20
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Going over the LinPEAS Output and discovering port 8000 running laravel",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 32,
            "seconds": 20
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Going over why we cant see processes from other users",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 33,
            "seconds": 50
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Using SSH to tunnel port 8000 to our box, allowing us to access laravel, finding out laravel is in debug mode",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 35,
            "seconds": 30
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Finding an exploit and executing code as laravel.",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 37,
            "seconds": 52
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " First script didn't work, looking to see if there are others. This one didn't require absolute paths, which allows it to work! Getting root",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 41,
            "seconds": 8
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Looks like there's some bad characters with our reverse shell, switching to a web cradle and getting root",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 42,
            "seconds": 30
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Explaining why this box isn't the box I wanted to show off FeroxBuster (Recursive Searching on API wouldn't work)",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 46,
            "seconds": 0
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Looking at the STRAPI Exploit and showing how the patch worked",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 48,
            "seconds": 40
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Comparing PHP Exploits",
        "machine": "HackTheBox - Horizontall",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 56,
            "seconds": 50
        },
        "videoId": "v0OQowfK9Pk"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Start of nmap, getting hostname and ",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Discovering the Server Header changes for virtualhost, probably navigating to a different box/container/etc [MasterRecon]",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 5,
            "seconds": 20
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Getting a good SSTI Fuzz String then identifying this string causes an error on the webserver. Removing parts of the string until we see the type of SSTI",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 10,
            "seconds": 50
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Playing with ASP Code in this SSTI or ASP Code Injection... Not sure what the vulnerability is",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 13,
            "seconds": 40
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Getting a VBScript One Liner to execute code and then getting a reverse shell",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 15,
            "seconds": 30
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Discovering a x509 certificate, decoding it with openssl, and discovering a second hostname",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Downloading and running chisel to setup a reverse socks proxy so we can attempt to pivot through this container",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 29,
            "seconds": 0
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Running nmap through the chisel socks proxy with proxychains",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 31,
            "seconds": 54
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Setting FoxyProxy to only send specific domains through our proxy",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 34,
            "seconds": 20
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Discovering the softwareportal.windcorp.htb attempts to install software on machines, set it to our machine and wireshark to see how 3it connects back to us",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 36,
            "seconds": 30
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Using responder to intercept the WinRM Connection and then use hashcat to crack the credentials",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 38,
            "seconds": 30
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Using CrackMapExec with our cracked credentials discovering we can access a file share that has Jamovi Files",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 42,
            "seconds": 40
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Installing Jamovi then finding out the XSS and proving RCE with Calc. Setting it to execute javascripts off of our webserver",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 45,
            "seconds": 0
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Creating a web cradle to execute a reverse shell, in typical ippsec fashion have a typo that we will fix later",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 53,
            "seconds": 20
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Fixed up the web cradle, reverse shell returned. Some light enumeration and talking about honey pots that have logon hours set to never",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 56,
            "seconds": 20
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Start of certificate exploit, downloading tools certify, rubeus, ADCS, PowerView",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 60,
            "seconds": 0
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Running Certify to find vulnerable certificates, we can edit the certificate template which enables us to enroll a smart card",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 64,
            "seconds": 45
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Running Get-SmartCardCertificate and then checking certificate store to see we didn't have anything. Showing we need to change the script because a weird thing with UPN's on this box",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 68,
            "seconds": 0
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Running Get-SmartCardCertificate again with our fix, then getting the certificate thumbprint and using Rubeus to get the credential",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 70,
            "seconds": 50
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Enabling RDP on the box so we can visually see the certificate",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 74,
            "seconds": 30
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Opening up MMC to see the certificate",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 79,
            "seconds": 10
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Doing the Certificate Exploit again but stepping through it all manually using Linux instead of Windows when possible",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 83,
            "seconds": 20
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Showing the vulnerable certificate template before modifying and what the certificate usage is",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 84,
            "seconds": 20
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Showing the certificate template after using Set-ADObject to modify the template",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 86,
            "seconds": 30
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Generating a Certificate Request",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 87,
            "seconds": 25
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Using CertReq to sign the certificate we generated",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 89,
            "seconds": 40
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Showing my Kerberos Configuration",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 91,
            "seconds": 30
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Using CertUtil to output the CA Certificate",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 92,
            "seconds": 50
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Setting up our port forwards so we can communicate with Kerberos",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 93,
            "seconds": 50
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Running kinit to login with our X509 Smart Card Certificate, get error show how to debug KINIT with trace",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 97,
            "seconds": 45
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Changing our time to match the DC and then running KINIT again and getting a session",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 99,
            "seconds": 40
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Using Evil-WinRM to get a shell with our kerberos certificate",
        "machine": "HackTheBox - Anubis",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 100,
            "seconds": 50
        },
        "videoId": "tEwH1FeH1mw"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Running nmap finding a filtered port with some open ones",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Running GoBuster to always have something running in the background",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Playing with the Upload Form",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Playing with the Upload from URL to see what library connects back to us (SSRF)",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 20
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " The Upload From URL has a blacklisted address, playing with it to discover what is blacklisted",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 30
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Bypassing the URL Blacklist in the SSRF by changing the case of words",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 55
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Running a virtualhost bruteforce within gobuster to discover vhost",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 45
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Bypassing the URL Blacklist in the SSRF by creating a webserver that will send a redirect",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 13,
            "seconds": 10
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Using the SSRF to download admin.forge.htb and discovering ftp creds and another SSRF",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 50
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Using the SSRF to use FTP ",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 20
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Encoding the IP Address as hex to bypass a blacklist",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 20
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " When specifying a directory in the FTP with SSRF need a trailing slash explaining why",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 10
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Downloading id_rsa and then logging into the machine",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 10
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " The user can sudo run a python script, which stands up a debugger on a random port",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 24,
            "seconds": 10
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Doing a nested tmux so we can run the python script and then use netcat to connect",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 13
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Getting root",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 28,
            "seconds": 50
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Explaining how to harden the blacklist to prevent the easy bypassing",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 30,
            "seconds": 55
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Looking at how admin.forge.htb added FTP Support",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 34,
            "seconds": 30
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Thinking there's an RCE but there isn't, shlex is a good filter",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 36,
            "seconds": 50
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Getting frusterated, lets break this down and see whats stopping our RCE",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 44,
            "seconds": 30
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Playing with Shlex to discover it is what prevents the RCE",
        "machine": "HackTheBox - Forge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 40
        },
        "videoId": "-BL4uevhERg"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 4
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Examining the web page, noticing every URL with admin gets redirected to a django login",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Creating an account and looking at the page to discover CTF Challenges",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " CHALLENGE 1: Phished List, a protected excel spreadsheet. Remove protection to see hidden cells",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 6,
            "seconds": 15
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Submitting a writeup, discovering an old version of Firefox talks to us",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 11,
            "seconds": 50
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Checking for Tab Nabbing vulnerability and explaining it",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 14,
            "seconds": 0
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Creating a phishing page by mirroring the page with wget and then using PHP to log submitted credentials",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 17,
            "seconds": 30
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Phishing worked, got the admin's password. Login to Django to see another website (Sentry)",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 29,
            "seconds": 30
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Creating an error message in Sentry to get an error message, which contains a secret key used to encrypt the cookie",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 0
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Grabbing a django deserialization payload then installing django on python2 to use the payload",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 36,
            "seconds": 10
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Changing the payload in the exploit to a reverse shell, avoiding any bad characters for URL and getting a reverse shell",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 40,
            "seconds": 15
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Setting up the reverse shell in a way that works with ZSH, just need to do stty raw -echo; fg on one line",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 41,
            "seconds": 30
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Logging into Sentry Postgres Databae then enumerating tables and dumping the users table and cracking karl's password",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 46,
            "seconds": 13
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Discovering Karl can execute the authenticator binary with sudo, strings shows it is a rust binary. Copy it back to our box",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 52,
            "seconds": 25
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Examing the binary in Ghidra",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 56,
            "seconds": 55
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Discovering a call to Crypto::AES::CTR, using the rust docs to figure out what our variables are",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 58,
            "seconds": 55
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Showing that AES-CTR does not have defined block sizes",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 61,
            "seconds": 22
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Using GDB to help our analysis, showing how to setup break points around what our decompiler shows",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 65,
            "seconds": 0
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Examining memory to confirm our static analysis was correct",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 70,
            "seconds": 36
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Grabbing the encrypted blob the program is comparing against to get the password and getting root",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 71,
            "seconds": 15
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " CHALLENGE 2: PSE, an dotnet binary that runs a uses PS2EXE to run powershell to encrypt a string",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 75,
            "seconds": 40
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " CHALLENGE 3: Get Lucky, a small binary that rolls a dice.  We exploit it mainly in GDB but after recording, probably could have done LD_PRELOAD, im not sure",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 81,
            "seconds": 20
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " CHALLENGE 4: RevMe.exe, just open the binary in DNSpy and grab the flag, also show doing this with strings if we change the encoding",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 94,
            "seconds": 50
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " CHALLENGE 5: Authentication, another Rust binary. Just have to find the correct spot to set a break point and see the password in memory",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 97,
            "seconds": 10
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " CHALLENGE 6: PwnMe, a simple challenge that we can use GDB to find the password",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 104,
            "seconds": 40
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " CHALLENGE 7: Easy Encryption, a simple XOR Challenge where we can use known plaintext (or bruteforce) to recover the key",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 109,
            "seconds": 30
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " CHALLENGE 8: Triple Wamy, another XOR Challenge where we have to just do the XOR's backwards to get the flag",
        "machine": "HackTheBox - Developer",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 113,
            "seconds": 29
        },
        "videoId": "MjkDCy10BYM"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Running GoBuster, discovering the redirects have filesizes",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Showing the Execute After Read vulnerability (EAR) by using BurpSuite to hit / and discovering the page",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Using grep to show us only what we want (oP)",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Using BurpSuite to intercept the response to the request so we can disable the redirect (EAR). Then using the webform to create an account (IDOR)",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Examining the website source, using grep to look for places with user input",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 0
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Testing the logs.php page for shell injection, then getting a reverse shell",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 11,
            "seconds": 30
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Going into the webconfig to get database creds, then dump and crack creds",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 13,
            "seconds": 30
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Testing local users with the passwords from the database to get m4lwhere's creds",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 19,
            "seconds": 50
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Checking sudo to see something is weird, the env_reset/secure_path is not there. (this is configured in /etc/sudoers)",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 20,
            "seconds": 25
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Explaining Path Injection, then taking advantage of a script in sudo not using absolute paths",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 22,
            "seconds": 10
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Going back to explain things, weird behavior of the webserver always hanging. Maybe it was trying to send me a webshell? idk",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 25,
            "seconds": 30
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Fuzzing parameters of accounts.php to create accounts. But first discovering how important the Content-Type header is!",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 28,
            "seconds": 0
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Using WFUZZ to fuzz the confirmation  parameter",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 30,
            "seconds": 50
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Explaining how the EAR Vulnerability happened in the code and how to fix it",
        "machine": "HackTheBox - Previse",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 35,
            "seconds": 20
        },
        "videoId": "LI9mw1rMKVw"
    },
    {
        "line": " Box will be uploaded to HackTheBox by January 5th.",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 1
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Intro",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Start of nmap",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 8
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Looking at the login, failing normal SQL Injection",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Start of talking about NoSQL/Mongo Injection",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 45
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Using the NE operator to create the NoSQL Injection where password is not equal to admin and bypassing login",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 20
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Showing the REGEX operator and talking about other ones to leak data",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 7,
            "seconds": 0
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Creating a python application to bruteforce passwords from the NoSQL Database one character at a time",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 34
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Script done, running it going over the code",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 21,
            "seconds": 0
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Examining the UPLOAD functionality of the site ",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 24,
            "seconds": 40
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Testing for XXE",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 26,
            "seconds": 10
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Replacing our XXE POC to include a file. Then making the application error to get path of webapp, so we can extract source code",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 29,
            "seconds": 30
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Discoving the application utilizes Node-Serialize which is extremely vulnerable to unserialization/deserialization attacks",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 32,
            "seconds": 10
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Proving we have RCE after URL Encoding our entire payload and using double quotes instead of single",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 39,
            "seconds": 30
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Creating a reverse shell one liner that has minimal bad characters and getting a reverse shell",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 41,
            "seconds": 0
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Reverse shell returned, we already have the password for SUDO!",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 43,
            "seconds": 10
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " ALTERNATE WAY TO GET PASSWORD: Mongodump",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 44,
            "seconds": 10
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Showing application is vulnerable to IDOR's",
        "machine": "UHC - NodeBlog",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 47,
            "seconds": 0
        },
        "videoId": "ahzOprfN--Y"
    },
    {
        "line": " Intro",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Start of nmap",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 4
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Discovering an Apache Tomcat Errror message despite the webserver being Apache",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Looking at Orange Tsai's 2018 Blackhat talk on Path Normalization ",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 15
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Explaining the attack and how to bypass apache blocking access to /manager by using /..;/ or ;name=Stuff",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 55
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Attempting to deploy a WAR File to see that path is blocked by the max upload size being 1 byte",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 20
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Testing for log4j in Tomcat, discovering a callback",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 55
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Finding a twitter post that combines JNDI-Injection-Exploit-Kit and Ysoserial to do deserialization attacks with Log4shell/log4j",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 55
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Explaining whats different about ysoserial modified and why it lets us do reverse shells",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 20
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Running YsoSerial-Modified to generate a CommonsCollections5 payload",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 20
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Running JNDI Injeection Exploit Kit to setup the LDAP Server",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 0
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Running the exploit and getting a reverse shell, then looking at port 21 since it was filtered earlier",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " FTP is running as root and written in Java. Testing for Log4j!",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 30
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Using JD-GUI to examine the FTP Server source to discover credentials are stored in environment variables!",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 15
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Explaining why we are going to use Wireshark to view these environment variable leaks",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Creating a log4j payload that sends us the ftp_user environment variable, then ftp_password",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 20,
            "seconds": 30
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Using log4j to extract the java class path which may be helpful in creating serialized payloads",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 24,
            "seconds": 25
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Using log4j to extract the java version",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 50
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Using log4j to extract OS Information",
        "machine": "UHC - LogForge",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 0
        },
        "videoId": "XG14EstTgQ4"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 5
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Noticing there is weird behavior on /vpn, it doesn't direct to the folder /vpn/ probably reverse proxy [MasterRecon]",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 2,
            "seconds": 50
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Corrupted GZIP, using zcat to view it and fixgz to repair",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 4,
            "seconds": 20
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Building a Python Script to generate TOTP for MFA (the NTPDate failed because i didn't use -q.  Nmap would have worked with -sV)",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 8,
            "seconds": 30
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Talking about things I would be monitoring for on Login Forms [Detection]",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 14,
            "seconds": 20
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Talking about a common issue when layering VPN's (MTU). Won't fix it right now, since I want to display the weird behavior later",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 16,
            "seconds": 45
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " VPN Connection established, looking at routes.  Adding additional routes that don't exist",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 20,
            "seconds": 15
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Going over the NMAP ran from the second VPN",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 28,
            "seconds": 30
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Fully understanding the weird behavior from /vpn earlier on. It is indeed a reverse proxy. [MasterRecon]",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 30,
            "seconds": 40
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Exploiting the fact that XDEBUG is enabled on info.php",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 32,
            "seconds": 0
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Running Chisel to create a pivot rhrough web to access mysql ",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 41,
            "seconds": 40
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " The Multiple VPN MTU Issue explained, demonstrating i can't send big packets because of chunking",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 42,
            "seconds": 10
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Finishing with setting up the chisel tunnel",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 48,
            "seconds": 0
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Switching up chisel to look at PKI.",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 51,
            "seconds": 45
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Running PHuiP-FPizdaM to exploit PHP-FPM/7.1",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 53,
            "seconds": 34
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Changing up our Chisel so we can send a reverse shell through the web box",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 57,
            "seconds": 23
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Looking at the ersatool source code to find a printf/format string vulnerability",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 61,
            "seconds": 45
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Verifying we have the format string vuln and some really basic talk about it",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 64,
            "seconds": 15
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Exploring the memory around our leaked address to defeat ASLR and edit the variable we want",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 67,
            "seconds": 30
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Start of a pwntools script to exploit format string",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 70,
            "seconds": 30
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Pwntools successful leak and calculating offset to the string we want to manipulate... cleaning up the script a little",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 75,
            "seconds": 48
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Explaining how we are going to write to an address and why the null byte is a small problem",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 79,
            "seconds": 5
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Overwriting the ERSA_DIR variable",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 87,
            "seconds": 15
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Tons of funny failing trying to verify this exploit worked",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 93,
            "seconds": 55
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Updating and explaining our chisel tunnel since we are proxying a lot of traffic bidirectionally through this web box",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 98,
            "seconds": 0
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Using cat to transfer a file over /dev/tcp, the trick is to base64 encode",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 105,
            "seconds": 30
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Using socat to have a binary (ersatool) listen on a TCP Port, so we can use pwntools to exploit it",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 110,
            "seconds": 50
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Updating pwntools to use a TCP Socket",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 112,
            "seconds": 45
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " We can't execute out of /dev/shm, updating script to use /tmp",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 115,
            "seconds": 50
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Getting a reverse shell",
        "machine": "HackTheBox - Static",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 131,
            "seconds": 0
        },
        "videoId": "XZd-pQTu4vU"
    },
    {
        "line": " Into",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 49
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Discovering admin login page, running SQLMap and discovering it is SQL Injectable",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 10
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Testing for SQL Injections in the username and password, discovering injection in the username",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 45
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " The adminsitrative interface lets us upload images, failing to upload a PHP Shell",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Using the SQL Union Injection to extract source code via Load_file, then creating a python script to automate it",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 30
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Creating a Regular Expression in Python to grab only the data we want and be multiline",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 35
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Downloading a good LFI Wordlist and then using it with our python script to find interesting files",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 45
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Finding the apache configuration which gives us where the web application lives",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 30
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Updating our LOAD_FILE command to utilize TO_BASE64 in order to get around the web application doing HTML Entity Encoding",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 10
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Discoving an hardcoded password in the python flask web application",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 33,
            "seconds": 30
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Discovering command injection in how the web application handles URL's",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 5
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Simplifying our reverse shell by using a base64 cradle",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 37,
            "seconds": 20
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Having troubles uploading the image, create the image manually on our box, so the image upload form creates the request for us. Then getting a shell",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 40,
            "seconds": 4
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Discovering another database password within the second web application, cracking a password then switching to the Kyle user",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 10
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Using find to find files owned by a group",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 51,
            "seconds": 0
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Examaning the Postfix config to see it executes the Disclaimer script as John and is editable by our gorup.  Edit the file, then sent an email to get shell as John.",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 51,
            "seconds": 45
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Showing John doesn't get all the groups assigned to him from the Postfix shell.  SSH allows this group to be assigned to him",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 55,
            "seconds": 0
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Write access to apt.conf.d, creating a pre-invoke script which is a persistence technique to run code whenever apt is ran",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 57,
            "seconds": 24
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Showing the intended route of this box by editing a python script over SMB",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 61,
            "seconds": 4
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Using the Image Upload form as a SSRF in order to access the second web application listening on localhost",
        "machine": "HackTheBox - Writer",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 64,
            "seconds": 30
        },
        "videoId": "MkvDid7xO7o"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 5
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Discovering the webserver is apache, despite nmap saying it is nginx",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Every request with /admin gets a 401, indication that nginx location may not end with /",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Doing the nginx lfi to grab apache server-stats and leak the /admin_staging/ directory",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Running gobuster in /admin_staging/ to discover more php scripts",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 8,
            "seconds": 30
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Testing index.php for lfi with a php filter",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 9,
            "seconds": 20
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Looking at the source and seeing it is using include() which allows for RCE if we can get it pointed at php code",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Playing with the LFI, eventually finding info.php which tells us open_basedir is set to /var/ which prevents the LFI from going out of that directory",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 13,
            "seconds": 50
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Using wfuzz with an LFI wordlist to search for files we can chain with this LFI, discovering ftp logs",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 16,
            "seconds": 35
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Poisoning the FTP log with a php reverse shell then using the LFI to trigger it",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Looking at the /opt/pokeapi directory to find a LDAP credentials",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 24,
            "seconds": 15
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Using ldapsearch to dump information out of the linux ldap server to get pwnmeow's credentials",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 25,
            "seconds": 45
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Using ftp with pwnmeow's credentials, then running linpeas",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 28,
            "seconds": 25
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Examining the CSVUpdate cron and finding a code injection vulnerability in the perl script",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 32,
            "seconds": 35
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Going over why perl will execute a variable starting or ending with | with an open() command",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 35,
            "seconds": 20
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Creating a revers shell file that begins with | ",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 37,
            "seconds": 30
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Uploading our malicious file via FTP and getting root",
        "machine": "HackTheBox - Pikaboo",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 41,
            "seconds": 30
        },
        "videoId": "4tXFHoeOytE"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Start of nmap, discover Active Directory and a web server",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 2
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Doing some common checks against a Domain Controller",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 45
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Discovering PDF's with filenames based upon the date",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 50
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Building a customized wordlist based upon the date with the date command",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 5,
            "seconds": 25
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Downloading the PDF's with wget and then examining metadata",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 30
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Using Kerbrute to validate the usernames in the metadata are correct",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 25
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Using pdftotext to convert all the PDF's into text files, so we can grep through text",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 12,
            "seconds": 50
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Finding the password NewIntelligenceCorpUser987, then using KerBrute to perfrom a passwordspray",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 20
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Running CrackMapExec Spider_Plus while we do some other CME things",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 40
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Running Python Bloodhound with the credentials we got from the password spray",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 20
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Using JQ to parse the data from CME's spider_plus module to discover a powershell script",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 10
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Importing the bloodhound results and then searching for attack paths",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 50
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Discovering we probably need to get access to the SVC_INT GMSA (Group Managed Service Account)",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 0
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Going back over the powershell script we downloaded, and then creating a DNS Record with krbrelayx's dnstool",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 27,
            "seconds": 50
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Using dnstool to create an A Record on an Active Directory Server",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 28,
            "seconds": 57
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Using the MSF Capture http_ntlm module to capture an NTLMv2 Hash of people that access our webserver (Responder also would work but was broke on my box)",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 30
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Using John to crack the ntlmv2 hash and gaining access to the Ted Graves account",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 36,
            "seconds": 35
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Using gMSA Dumper to extract the svc_int hash",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 42,
            "seconds": 19
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Using impacket's getST to generate a SilverTicket which we can use for impersonating an administrator",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 43,
            "seconds": 43
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Using NTPDate to syncronize the time to our domain controller",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 46,
            "seconds": 0
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Using our ticket with psexec to gain access to the server",
        "machine": "HackTheBox - Intelligence",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 48,
            "seconds": 30
        },
        "videoId": "Jg_BjkxdtsE"
    },
    {
        "line": " Intro the best box to practice SQL Union Injections but I may be bias",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Start of nmap discovering nginx with PHP",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 5
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Doing recon on the website",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 50
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Starting recon in the background GoBuster/SQLMap",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 45
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Manually examining the player submission page",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 15
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Manualling testing for SQL Injection, why its important to test with a query that returns data",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 40
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Testing for union injection, then pulling up MySQL Documentation and looking at the Information_Schema database",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 45
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Testing out the Union Injection by extracting a single database name",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 45
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Showing that we can return more than one row with the GROUP_CONCAT function",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 20
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Changing up the union to extract table and column information",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 0
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Prettying up the output by setting some delimiters with GROUP_CONCAT, then extracting data from the tables",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 30
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Submitting the flag and discovering our IP Address can now ssh into the box",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 50
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Using the LOAD_FILE command to extract files from the server, discovering credentials in the config.php file",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 12,
            "seconds": 40
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Using SSH to access the server and then looking at how the webserver allowed our IP Address access to the server",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 0
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Adding the X-FORWARDED-FOR header to our request to firewall.php and discovering command injection",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 45
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Changing our command injection from sleep to a reverse shell",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 25
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " The www-data user can use sudo to run any command, using sudo to run a shell",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 10
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Going over my filter to break SQLMap",
        "machine": "UHC- Union",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 30
        },
        "videoId": "z5pdizHDvt8"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Running nmap, doing all ports and min-rate",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Poking at the website to discover a static site",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Starting up a gobuster to do some recon in the background",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 25
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Discovering log_submit, and finding out it is vulnerable to XXE (XML Entity Injection)",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 5,
            "seconds": 30
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Verified it is vulnerable to XXE, attempting to extract a file",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 0
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Chaining a PHP Filter to convert files to base64, which lets us avoid bad characters and leak source",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 9,
            "seconds": 50
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Start of coding out a program to automate this LFI",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 11,
            "seconds": 15
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " XXE LFI POC Done, improving it by adding the cmd module",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 17,
            "seconds": 45
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Reading source code of pages, getting nothing",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 20,
            "seconds": 50
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Finding db.php from out gobuster, leaking the source and getting a password",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 21,
            "seconds": 35
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Grabbing /etc/passwd in order to build a userlist to password spray",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 22,
            "seconds": 5
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Using CrackMapExec (cme) to perform a password spray over SSH and discovering creds",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 22,
            "seconds": 45
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " With shell on the box we can do sudo against a python file, doing some manual code analysis",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 23,
            "seconds": 35
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Switching to VSCode to debug our exploit script",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 31,
            "seconds": 0
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Exploit file works, copy it to our target and run it to get a root shell",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 38,
            "seconds": 30
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Taking a step back and Verifying the bad characters in our XXE",
        "machine": "HackTheBox - BountyHunter",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 39,
            "seconds": 44
        },
        "videoId": "5axsDhumfhU"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Begin of nmap ",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Browsing to the website and doing some light fuzzing",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 25
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Adding the uri_hex (url encoder) to our wfuzz to fuzz special characters",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 10
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Taking a look at port 8080, discovering gitbucket and registering an account",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 55
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Exploring the infra repository on gitbucket, going over its Ansible Scripts",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 20
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Taking a look at the Seal Market Repository and discovering NGINX has mutal auth configured",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 12,
            "seconds": 30
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Discovering tomcat credentials in a previous commit",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 0
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Going over an Orange Tsai SSRF Talk from 2018, showing the Tomcat SSRF when behind NGINX",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 45
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Testing the SSRF Exploit to discover we can hit protected pages",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 0
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Logging into tomcat, then showing another SSRF",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 0
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Using MSFVenom to generate a malicious war file to exploit tomcat",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 25
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Reverse shell returned, uploading pspy to discover a cron running a playbook",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 0
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Going over the playbook to show how we can exploit this playbook to copy an ssh private key with a symlink",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 23,
            "seconds": 0
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Creating the symlink to extract the SSH Key",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 0
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " SSH in with Luis, discovering we can run ansible with sudo, then creating a malicious playbook to run a reverse shell",
        "machine": "HackTheBox - Seal",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 28,
            "seconds": 30
        },
        "videoId": "wCfztTcioU8"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Start of nmap, downloading files over FTP",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " The contents of all the PDF's don't really help. Using exiftool to extract authors.",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 5,
            "seconds": 25
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Using Kerbrute to bruteforce valid users and getting ASREP Hash. It is ETYPE 18, which hashcat doesn't support. Use downgrade to generate ETYPE 23 and crack the hash",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 8,
            "seconds": 20
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Going into what ETPE Means",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 11,
            "seconds": 15
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Using CrackMapExec to dump a list of file shares, then using Spider_Plus plugin to dump files",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 16,
            "seconds": 40
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Doing some JQ Magic navigate the Spider_Plus data",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 17,
            "seconds": 30
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Converting the Outlook Message Files (MSG) to plaintext with msgconvert",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 20,
            "seconds": 15
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Running Restart-Oracle.exe with Process Monitor to find out the process is writing to a TEMP Directory",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 25,
            "seconds": 0
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Removing delete permissions on the Windows Temp Directory, so the Restart-Oracle program can't delete the files out of temp, finding based64 and getting another EXE",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 27,
            "seconds": 0
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Running the extracted executable with Process Monitor to discover it loads dotnet",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 32,
            "seconds": 0
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " METHOD 1: Opening the extracted executable in x64debug, setting it to break upon EXIT then examining its memory to find the dotnet executable",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 34,
            "seconds": 50
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " METHOD 1: Opening the dotnet in DNSPY to discover the password",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 38,
            "seconds": 48
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " METHOD 2: Using API MONITOR to examine the API Calls the program makes and finding the password (Sorry for audio glitches here, chrome did weird things)",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 40,
            "seconds": 25
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Fixing the permissions on our TEMP Directory with icacls so our user can delete files again",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 47,
            "seconds": 41
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Using CrackMapExec to dump a list of all users because the Oracle credentials we got from reversing did not work.",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 49,
            "seconds": 45
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Discovering the MSSQL User and changing oracles password scheme to fit MSSQL",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 53,
            "seconds": 0
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Downloading Alamot's MSSQL_Shell and getting a shell on the box (unintended way, do more with this at the end)",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 55,
            "seconds": 25
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Downloading and running MSSQL Proxy, which will let us create a SOCKS Proxy through the MSSQL Service",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 58,
            "seconds": 40
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Setting proxychains up to utilize MSSQL Proxy and using Evil-WinRM to get a shell on the box, then downloading and cracking a Keypass Database",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 72,
            "seconds": 10
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Using SSH to get into the box, the trick here is telling our SSH Client to not use public key authentication",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 80,
            "seconds": 40
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Running Bloodhound.py to get Bloodhound data from Active Directory",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 82,
            "seconds": 15
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Examining bloodhound data to discover our user can reset passwords on several users, and showing Dr.Zaiuss can reset Superfume... Resetting each password to get to Superfume then downloading another exe out of developers",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 87,
            "seconds": 20
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Using DNSpy to edit the compiled dotnet program to print the password after it decrypts it",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 97,
            "seconds": 50
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Back to bloodhound with the new credential! Discovering Jari can reset Gibdeon who can add groups to LAPS",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 99,
            "seconds": 50
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Loading PowerView up in Evil-WinRM and Bypassing AMSI, then resetting Gibdeon's pw and adding him to groups",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 106,
            "seconds": 0
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Attempting to get the LAPS Password with Get-ADComputer and failing",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 113,
            "seconds": 30
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Using a Python Program to dump LAPS Password, then using PSExec to log into the box as administrador!",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 115,
            "seconds": 20
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Unintended method! Unconstrained delegation with the SQL User.  Upload rubeus, use tgtdeleg ",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 120,
            "seconds": 15
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Copying the ticket and using TicketConverter to conver the ticket from KIRBI to CCACHE then setting KRB5CCNAME to the ticket and having impacket use the ticket",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 127,
            "seconds": 20
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Impacket doesn't work because of clock skew, it doesn't tell us the error, showing CrackMapExec will display the error",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 130,
            "seconds": 32
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Using NTPDate to sync our time to the AD Server, then running secretsdump",
        "machine": "HackTheBox - PivotAPI",
        "tag": "windows insane",
        "timestamp": {
            "minutes": 131,
            "seconds": 10
        },
        "videoId": "FbTxPz_GA4o"
    },
    {
        "line": " Intro",
        "machine": "HackThebox - Explore",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "ptJIUHQa4zM"
    },
    {
        "line": " Start of nmap",
        "machine": "HackThebox - Explore",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 45
        },
        "videoId": "ptJIUHQa4zM"
    },
    {
        "line": " Weird SSH Banner saying its Banana Studio, google tells us this is Android",
        "machine": "HackThebox - Explore",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 50
        },
        "videoId": "ptJIUHQa4zM"
    },
    {
        "line": " Doing a script scan against all open ports, and googling what each open port is",
        "machine": "HackThebox - Explore",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "ptJIUHQa4zM"
    },
    {
        "line": " Port 59777, brings us to ES File Explorer which has an exploit out",
        "machine": "HackThebox - Explore",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 45
        },
        "videoId": "ptJIUHQa4zM"
    },
    {
        "line": " Running the ES File Explorer exploit with getDeviceInfo to confirm it works",
        "machine": "HackThebox - Explore",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 5,
            "seconds": 16
        },
        "videoId": "ptJIUHQa4zM"
    },
    {
        "line": " Listing files, pictures, and eventually downloading a picture",
        "machine": "HackThebox - Explore",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 20
        },
        "videoId": "ptJIUHQa4zM"
    },
    {
        "line": " Opening the picture reveals some credentials, can ssh into the box with them",
        "machine": "HackThebox - Explore",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 0
        },
        "videoId": "ptJIUHQa4zM"
    },
    {
        "line": " Installing ADB, so we can do adb connect to port 5555",
        "machine": "HackThebox - Explore",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 10
        },
        "videoId": "ptJIUHQa4zM"
    },
    {
        "line": " Setting up an SSH Port forward so we can access port 5555",
        "machine": "HackThebox - Explore",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 30
        },
        "videoId": "ptJIUHQa4zM"
    },
    {
        "line": " Extra Content: Playing with the exploit script to understand what it does",
        "machine": "HackThebox - Explore",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 14,
            "seconds": 30
        },
        "videoId": "ptJIUHQa4zM"
    },
    {
        "line": " Intro Hacking a Command and Control Server",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Running nmap and discovering two different SSH Instances, guessing one is Docker",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 7
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Looking at robots.txt which includes a link to the implant, looking at the error message and discovering its a cpp binary",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Using Wireshark to discover it makes a DNS Request to Spooktrol.htb, then walking through the C2's handshake",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 5,
            "seconds": 30
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Using BurpSuite and socat to proxy the connection of our binary",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 8,
            "seconds": 45
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Using BurpSuites find and replace to edit the Task that is getting to our C2",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 10
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Opening up the binary in Ghidra",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Looking at the decompiled output for the main function, which calls Spooky.  Setting a break point on the XOR Function and discovering the first flag",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 14,
            "seconds": 15
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Discovering the Case Statement and analyzing Task number 1 (Exec)",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 16,
            "seconds": 45
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Stepping through each other task to discover what each function does",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 50
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " The Perform Upload function builds a curl command",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 22,
            "seconds": 0
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Breaking after the curl string is assembled to show the full command it runs (Using BurpSuite to get to this part of the code)",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 24,
            "seconds": 45
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Accessing Task 3 a different way, breaking at the switch statement and editing the JMP.",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 27,
            "seconds": 50
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Editing the filename in the PUT Command to perform directory traversal and upload an SSH Key",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 32,
            "seconds": 45
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Logging into the C2, and inspecting the database to discover another beacon is running, which is on the Host Operating System",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 34,
            "seconds": 30
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Inserting a task into the database to ask the rogue beacon to execute a reverse shell for us",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 37,
            "seconds": 0
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Extra Content: Exploiting the box with no reverse engineering!  Using an LFI to dump the source code to the application",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 39,
            "seconds": 25
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " The server.py file has been leaked, grabbing all the other python scripts",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 41,
            "seconds": 40
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " The application is now running on our box!  Can identify the file upload functionality and how to exploit it.",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 43,
            "seconds": 20
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Extra Content: Going over the CPP code which shows how the implant works.",
        "machine": "UHC - Spooktrol",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 51,
            "seconds": 45
        },
        "videoId": "pc-_tK6CWnA"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 10
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Adding spider.htb to our host file so we can access the domain name",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 2,
            "seconds": 40
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Playing with the registration of the website and examining the cookie",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 3,
            "seconds": 30
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Putting a bunch of bad characters for our username and discovering odd behaviors",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 6,
            "seconds": 20
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Dumping the configuration via SSTI, can't do a complex SSTI due to username limit",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 5
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " We have the cookie secret, using Flask-Unsign to create malicious cookies and discover SQL Injection",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 30
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Sending our SQL Injection Payload to the server and confirming it is SQL Injectable",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 16,
            "seconds": 25
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Using the Eval Parameter of SQLMap to have SQLMap Sign the payloads it sends and dump the database",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 18,
            "seconds": 5
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Getting Chiv's password from SQLMap then logging into the web application",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 22,
            "seconds": 45
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Testing SSTI on the admin panel that we got to from Chiv and discovering a WAF (Web Application Firewall)",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Using wfuzz to enumerate the bad characters which trigger the WAF",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 26,
            "seconds": 40
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Playing with wfuzz encoders to URLEncode everything from our wordlist",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 29,
            "seconds": 0
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Obfuscating our SSTI Payload so the bad characters are not present and getting a reverse shell",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 50
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Reverse shell returned",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 37,
            "seconds": 10
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Using SSH to setup a port forward which allows us to hit 127.0.0.1:8080 on the remote host",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 41,
            "seconds": 10
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Examining the authentication cookie and discovering a XML within the cookie",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 43,
            "seconds": 0
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Testing for XML Entity Injection",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 44,
            "seconds": 0
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Using Payload All The Things to help us craft an XML Entity Injection payload to read files",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 45,
            "seconds": 50
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Grabbing the SSH Private Key via XML Entity Injection and logging in as root",
        "machine": "HackTheBox - Spider",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 48,
            "seconds": 30
        },
        "videoId": "7vWY60pARUQ"
    },
    {
        "line": " Intro",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Start of nmap discovering the distribution of Ubuntu based upon SSH Headers",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Looking at the WebPage and discovering credentials",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 40
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Checking No-IP's documentation for updating Dynamic DNS Names",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 20
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Using Curl to create a dynamic DNS Name",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Testing for Command Injection",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 10
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Enumerating the bad character and explaining why we could not use periods",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 12,
            "seconds": 45
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Converting the IP Address to a format that won't have periods (Hex)",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 45
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Reverse Shell returned, checking out the web source",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Discovering hosts from *.infra.dyna.htb can ssh into the box if there is a private key and finding the private key in the support directory",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 28,
            "seconds": 0
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Using SSH-Keygen to get the SSH Keys fingerprints to make sure private and public key match",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 15
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Attempting to create the DNS Record with the DNS Key that was in the web source",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 0
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Finding a second DNS Key, which can update Infra's subdomains",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 36,
            "seconds": 35
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " SSH in as bindmgr and discover we can execute a bash script with sudo, exploiting a wild card argument",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 40,
            "seconds": 30
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Testing the cron without doing anything malicious",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 35
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Creating the file --preserve=mode, which the cp command will treat as an argument letting us drop a SetUID Binary and have it owned by root",
        "machine": "HackThebox - Dynstr",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 47,
            "seconds": 55
        },
        "videoId": "csxP6Vpp5js"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 55
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Looking at the webste, getting a VirtualHost and then navigating to the page and confirming Wordpress",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 3,
            "seconds": 5
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " The wp-content/plugins directory doesn't have an index, don't even need to use wpscan",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 4,
            "seconds": 25
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Testing the LFI with the plugin",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 6,
            "seconds": 45
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Using wpscan to enumerate wordpress users",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 55
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Explaining the /proc/ directory and why we can use this to enumerate running processes ",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 20
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Creating a curl script to enumerate all running processes on the box",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 13,
            "seconds": 44
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Pulling apache's configuration to discover another virtual host",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 15,
            "seconds": 15
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Trying the wordpress credentials in cacti for password re-use and then exploiting Cacti with a CVE to get a shell",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 0
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Manually enumerating the SQL Databases, using /G to select large amounts of data in a human readable format",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 24,
            "seconds": 0
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Discovering the .backup directory in Marcus's home but we can't list contents. Grepping directories for .backup to see if any files are referenced",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 29,
            "seconds": 50
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " SSH with the Marcus user and a quick refresher on SSH Port Forwarding",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 34,
            "seconds": 25
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Using gobuster to discover Apache OfBiz was running on 8443",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 36,
            "seconds": 0
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Using ysoserial to exploit Apache OfBiz via java deserialization",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 41,
            "seconds": 0
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Shell returned on the container!  We are root doing some light enumeration to discover cap_sys_module",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 47,
            "seconds": 50
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Compiling the LKM to get a reverse shell",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 52,
            "seconds": 30
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Inserting the kernel module and getting root on the box",
        "machine": "HackTheBox - Monitors",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 55,
            "seconds": 30
        },
        "videoId": "-loZwD39ifc"
    },
    {
        "line": " Intro",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " Showing malleable c2 configs",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 8
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " Creating a Hello World in C++ then creating a 2000 byte variable",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 6,
            "seconds": 55
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " Adding JSON Support to our program",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 25
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " Creating a Struct and function to initialize the config",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 10
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " Having our main function parse the config",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 17,
            "seconds": 55
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " Not sure what happened to my config.h, retyping it",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 19,
            "seconds": 25
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " JSON Parsing done",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 30
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " Creating a Python Program to replace the embedded config",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " XOR'ing our config in python so we avoid strings",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 27,
            "seconds": 30
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " XOR'ing in our agent to read the \"encrypted\" config",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 29,
            "seconds": 10
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " Opening it up in Ghidra and doing some extremely light reversing",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 34,
            "seconds": 34
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " Showing what happens if we strip the binary",
        "machine": "DIY C2 - Malleable Agent Config",
        "tag": "",
        "timestamp": {
            "minutes": 40,
            "seconds": 30
        },
        "videoId": "FiT7-zxQGbo"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Cap",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "O_z6o2xuvlw"
    },
    {
        "line": " Start of nmap and doing some recon against FTP",
        "machine": "HackTheBox - Cap",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 50
        },
        "videoId": "O_z6o2xuvlw"
    },
    {
        "line": " Having trouble finding a release date, using WGET and examining metadata to see how old a page is",
        "machine": "HackTheBox - Cap",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 40
        },
        "videoId": "O_z6o2xuvlw"
    },
    {
        "line": " Examining the web applicaiton",
        "machine": "HackTheBox - Cap",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 45
        },
        "videoId": "O_z6o2xuvlw"
    },
    {
        "line": " Testing and finding the IDOR Vulnerability",
        "machine": "HackTheBox - Cap",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 50
        },
        "videoId": "O_z6o2xuvlw"
    },
    {
        "line": " Examining the PCAP Downloaded through the IDOR Vulnerability to find FTP Creds",
        "machine": "HackTheBox - Cap",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "O_z6o2xuvlw"
    },
    {
        "line": " SSHing into the box with the credentials from FTP",
        "machine": "HackTheBox - Cap",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 12,
            "seconds": 12
        },
        "videoId": "O_z6o2xuvlw"
    },
    {
        "line": " Running LINPEAS, examining the source code of the webapp while it runs",
        "machine": "HackTheBox - Cap",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 13,
            "seconds": 15
        },
        "videoId": "O_z6o2xuvlw"
    },
    {
        "line": " Going over the LINPEAS output finding python has the ability to setuid",
        "machine": "HackTheBox - Cap",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 16,
            "seconds": 45
        },
        "videoId": "O_z6o2xuvlw"
    },
    {
        "line": " Using the os libary to setuid to root",
        "machine": "HackTheBox - Cap",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 21,
            "seconds": 40
        },
        "videoId": "O_z6o2xuvlw"
    },
    {
        "line": " Showing off zeek which would help analyze larger pcaps",
        "machine": "HackTheBox - Cap",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 23,
            "seconds": 30
        },
        "videoId": "O_z6o2xuvlw"
    },
    {
        "line": " Changing the Zeek FTP Configuration to show passwords.",
        "machine": "HackTheBox - Cap",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 24,
            "seconds": 10
        },
        "videoId": "O_z6o2xuvlw"
    },
    {
        "line": " Intro going over the attack chain, SSRF to Protocol Smuggling to OMIGod",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Using nmap and then checking out the website and adding the DNS Names to our host file",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 17
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Running GoBuster to discover the /docs directory, which is swagger documentation",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 4,
            "seconds": 20
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Reading the documentation and explaining JARM Signatures",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 6,
            "seconds": 0
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Explaining the front-end which just makes accessing the backend pretty",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 9,
            "seconds": 45
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Using Shodan to search JARM Hashes, which would be useful if you're looking for specific attack servers or collisions",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 15
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Dumping all the JARMS by abusing sequential ID's with a for loop and curl",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 11,
            "seconds": 55
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Whoops... Copied the wrong JARM, this was not cobalt strike lol.",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 14,
            "seconds": 4
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Running ncat with ssl, and checking if it is malicious... It's not malicious because the metadata was not there",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 15,
            "seconds": 50
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Using metasploit to show it would detect it as malicious",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 16,
            "seconds": 50
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Using IPTables to change the port on every 11th request with iptables -I PREROUTING -t NAT -p tcp --dport 443 -d 192.168.1.230 -m statistic --mode nth --every 11 --packet 10 -j REDIRECT --to-port  8443",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 18,
            "seconds": 40
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Showing Gopher connecting to our ncat ",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 21,
            "seconds": 50
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Finding a way to enumerate ports listening on localhost and discovering 5985 and 5986 are open",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 23,
            "seconds": 25
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Using wfuzz to bruteforce all ports (1-65535)",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 26,
            "seconds": 5
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Downloading the OMIGod Exploit to grab the payload which we will use later",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 29,
            "seconds": 20
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Using openssl to generate private certificates for our python webserver.",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 0
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Creating a python webserver that listens on https",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 33,
            "seconds": 25
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Testing adding a Gopher HTTP Redirect on our custom python webserver ",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 35,
            "seconds": 50
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Explaining that Gopher adds two bytes to the end of the Smuggled Request",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 39,
            "seconds": 50
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Using burpsuite to build the payload for us and convert it all to URL Encoding",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 41,
            "seconds": 50
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Updating our payload to have the correct URL for our gopher request ",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 44,
            "seconds": 0
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Showing how to reset the iptables counter",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 45,
            "seconds": 0
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Showing how to do this exploit with Metasploit by coding a listener",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 46,
            "seconds": 40
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Debugging the MSF Module we created",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 52,
            "seconds": 40
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Our MSF Module is done, running our listener and viewing all its headers",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 56,
            "seconds": 10
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Pasting our MSF Url into burpsuite and getting a reverse shell",
        "machine": "UHC - Jarmis",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 60,
            "seconds": 50
        },
        "videoId": "R5aNxdD0_bs"
    },
    {
        "line": " Intro the important thing about this box is recon",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " Start of nmap discovering an nginx server header",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 28
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " The SSL Certificate leaks an important hostname",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 25
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " Running an SNMPWalk which has a bunch of important information, notably the HTML Directory",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 50
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " Discovering the SeedDms51x Directory, trying to enumerate version (Failing)",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 13,
            "seconds": 30
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " Creating a python script to help with bruteforcing",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 0
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " Script done, looking at SNMP to get other usernames",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 30
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " Brutefocing michelle's password to get in and seeing the SeedDMS Version",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 40
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " The SeedDMS Patch used htaccess, server is nginx so its still vulnerable.  Uploading a shell",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 33,
            "seconds": 30
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " Grabbing the MySQL Password from SeedDMS Config and trying it against other services. Gain access to cockpit which gives access to michelle user",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 42,
            "seconds": 30
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " The SNMP is executing a program every time snmp is ran, we can trick SNMP to execute our code to get root",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 48,
            "seconds": 50
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " Start of Explaining SELinux",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 56,
            "seconds": 20
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " SELinux Using audit2why to show us why reverse shells were blocked from reverse shells",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3600,
            "seconds": 40
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " SELinux Checking why SNMP could not read /root/root.txt",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4080,
            "seconds": 50
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " Explaining more about the SNMP vectors of this box",
        "machine": "HackTheBox - Pit",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 81,
            "seconds": 11
        },
        "videoId": "IF5uhe1qR2I"
    },
    {
        "line": " Intro, how to install and configure auditd",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Installing Auditd",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 15
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Downloading a good baseline ruleset from github ",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 2,
            "seconds": 30
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Going over the baseline file to understand how logging works",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 40
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " What the -p flag does with files. Logging read/write/execute/attribute change events",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " If you want CWD in your logs, uncomment this line",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 10
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Logging priv_esc events",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 20
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Excluding system accounts from log captures",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 14,
            "seconds": 40
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Fun detections to find recon and suspicious activity",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 15,
            "seconds": 40
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Logging when users fail to access files in special directories",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 21,
            "seconds": 40
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Running the omigod exploit and getting a reverse shell echo/base64",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 24,
            "seconds": 16
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Running ausearch to detect what we had done by searching for commands ran by root",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 25,
            "seconds": 5
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Using some bashfu to show only commands ran by a ppid",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 28,
            "seconds": 0
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Looking for the suspicious activity",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 28,
            "seconds": 50
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Analyzing a detection rule for this and understanding the importance of not excluding CWD from logs",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 30,
            "seconds": 40
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Checking if mkfifo is detected... yep",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 34,
            "seconds": 15
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Installing Laurel to convert Auditd's multiline format to singleline JSON",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 36,
            "seconds": 20
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Installing Rust then compiling Laurel",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 38,
            "seconds": 50
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Removing End Of Event from Auditd config to see if that fixes the Laurel bug (IT DOES!)",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 43,
            "seconds": 40
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Viewing our Auditd logs in JSON Format!  SIEMS will love this!",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 46,
            "seconds": 56
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Going over aureport to show some things",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 48,
            "seconds": 30
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Looking for why we have so many syscall failures",
        "machine": "Detecting Exploits - OMIGod (Linux Logging with Auditd)",
        "tag": "",
        "timestamp": {
            "minutes": 50,
            "seconds": 30
        },
        "videoId": "lc1i9h1GyMA"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Start of nmap, finding version of gunicorn is from 2019",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Enumerating the Gitea version (the 404 error page shows it)",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 6,
            "seconds": 15
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Trying to find the Gitea version another way (HTTP Files)",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 8,
            "seconds": 10
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Downloading jquery.js, grabbing the md5, then using VirusTotal to get an idea when it was released",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 9,
            "seconds": 30
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Looking at the second website (Running on gunicorn)",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 11,
            "seconds": 30
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Testing for IDOR Vulnerabilities in the /notes/, can confirm a note exists but not read anything",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 13,
            "seconds": 20
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Start of explaining the HTTP Smuggling",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 14,
            "seconds": 40
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Adding non-ascii characters to Burpsuite Requests via Base64 Decoding",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 17,
            "seconds": 30
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Explaining HTTP Chunking",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 19,
            "seconds": 40
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Smuggling request created, re-explaining the attack and importance of Content-Length",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Sending the Smuggling request in BurpSuite then getting the cookie of another user",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 26,
            "seconds": 55
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Explaining why the attack is unreliable in BurpSuite then using Python to do it",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 28,
            "seconds": 25
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " The administrator can read three new notes with some saved credentials. Logging into Gitea",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 40,
            "seconds": 15
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Looking at git history to find an SSH Key, then logging into the server",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 44,
            "seconds": 40
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Enumerating AWS using the CLI",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 49,
            "seconds": 40
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Enumerating AWS logs using the CLI to identify some secret rotation events",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 50,
            "seconds": 40
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Enumerating AWS SecretsManager using the CLI to get another users password",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 54,
            "seconds": 30
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Utilizing AWS KMS to Decrypt a file",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 58,
            "seconds": 45
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Extra Content, explaining some unique iptables routing that went into this box to make it stable",
        "machine": "HackTheBox - Sink",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 69,
            "seconds": 20
        },
        "videoId": "8gf5YvvY1yc"
    },
    {
        "line": " Intro",
        "machine": "Playing with Exploits - OMIGod",
        "tag": "",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "TXqi1BKtcyM"
    },
    {
        "line": " Start of installing OMI Locally",
        "machine": "Playing with Exploits - OMIGod",
        "tag": "",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "TXqi1BKtcyM"
    },
    {
        "line": " Downloading the exploit, but get a connection error because it cannot talk to OMI",
        "machine": "Playing with Exploits - OMIGod",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "TXqi1BKtcyM"
    },
    {
        "line": " Editing the OMI Configuration to set it to listen on 5986",
        "machine": "Playing with Exploits - OMIGod",
        "tag": "",
        "timestamp": {
            "minutes": 3,
            "seconds": 45
        },
        "videoId": "TXqi1BKtcyM"
    },
    {
        "line": " The exploit still isn't working debugging to find it is missing a namespace",
        "machine": "Playing with Exploits - OMIGod",
        "tag": "",
        "timestamp": {
            "minutes": 5,
            "seconds": 45
        },
        "videoId": "TXqi1BKtcyM"
    },
    {
        "line": " Finding the SCX Package Name and using a Index.Of Google Dork to find it on an open HTTP directory",
        "machine": "Playing with Exploits - OMIGod",
        "tag": "",
        "timestamp": {
            "minutes": 7,
            "seconds": 50
        },
        "videoId": "TXqi1BKtcyM"
    },
    {
        "line": " Installing the SCX Agent and getting code execution",
        "machine": "Playing with Exploits - OMIGod",
        "tag": "",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "TXqi1BKtcyM"
    },
    {
        "line": " Setting the exploit to go through BurpSuite so we can understand how it works",
        "machine": "Playing with Exploits - OMIGod",
        "tag": "",
        "timestamp": {
            "minutes": 11,
            "seconds": 13
        },
        "videoId": "TXqi1BKtcyM"
    },
    {
        "line": " Going over the blog post to understand why it was vulnerable",
        "machine": "Playing with Exploits - OMIGod",
        "tag": "",
        "timestamp": {
            "minutes": 13,
            "seconds": 40
        },
        "videoId": "TXqi1BKtcyM"
    },
    {
        "line": " Talking about how the researchers may have found it.  MS Patched it without major announcement and it was in the Git Changelog!",
        "machine": "Playing with Exploits - OMIGod",
        "tag": "",
        "timestamp": {
            "minutes": 16,
            "seconds": 35
        },
        "videoId": "TXqi1BKtcyM"
    },
    {
        "line": " Intro, sorry for double upload.  First one missed the last 5 minutes.",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Start of nmap, discovering SSH/HTTP are different operating systems",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 38
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Testing the website",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 0
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Intercepting the registration and testing for SQL Injection on the Country",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 45
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Discovering a static cookie is returned that is a MD5Sum of the UserName",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 19
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Our single quote country caused an Second Order SQL Injection testing Union Injection",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 5,
            "seconds": 20
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Using our Union Injection to drop a webshell",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 8
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Revrse Shell Returned",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 10
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Getting the database password out of the webconfig, and its also the root user",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 11,
            "seconds": 50
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Explaining how I gave \"dedicated\" containers to each player",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 12,
            "seconds": 30
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Going over the Kernel Module I wrote to do routing based upon the last octet of an IP Address",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 13,
            "seconds": 35
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Going over the code around SQL Injection and how to do prepared statements in PHP with SQL",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 18,
            "seconds": 30
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Creating middleware with Flask so SQLMap can exploit this second order sql injection",
        "machine": "UHC - Validation",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 23,
            "seconds": 40
        },
        "videoId": "UqoVQ4dbYaI"
    },
    {
        "line": " Intro FreeBSD Box",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Start of nmap explaining why versions are useful",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 8
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Discovering hostname on the box, then adding it to our host file",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 54
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Using GoBuster to bruteforce virtual hosts and discovering moodle",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 20
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Searching Moodle on github to find a way to identify Moodle Version",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 20
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Reading the Moodle Security Announcements since the Moodle Version",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 27
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Enrolling in the Math Course the announcement hints at XSS",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 50
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Testing for XSS in our Moodle Net Profile",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 20
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Changing our HTML to load an external script and then stealing cookies via document.write",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 55
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Performing CVE-2020-14321 to escalate from Teacher to Manager in moodle",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 0
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Enabling plugin installation, then uploading a malicious moodle plugin",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 20
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Reverse shell returned",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 43,
            "seconds": 40
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Pulling ht MySQL Password from Moodle's configuration and then cracking hashes for users",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 45,
            "seconds": 50
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " SSH as Jamie, and then using gtfobins and fpm to privesc without setting up a repository",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 51,
            "seconds": 10
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Doing the privesc the intended way by setting up a pkg repository",
        "machine": "HackTheBox - Schooled",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 58,
            "seconds": 40
        },
        "videoId": "bUfZlBMFJ2I"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 10
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Downloading and installing the deb package with dpkg, then fixing the host file",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 5,
            "seconds": 0
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Running wireshark when examining the unobtainium application then examining the HTTP Requests",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 6,
            "seconds": 35
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Proxying the unobtainium app through Burpsuite by creating a new proxy listener and updating the host file",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 9,
            "seconds": 25
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Playing with the LFI on /todo and discovering we can only cause errors or include files in the local directory",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 40
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Using FFUF to attempt to find other JS Files with this LFI",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 30
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Copying the index.js source code and looking for vulnerabilities",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 14,
            "seconds": 50
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Discovering hard coded credentials, examining the administrator password to see there would be too much entropy to bruteforce",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 15,
            "seconds": 50
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Analyzing the upload functionality to discover an RCE if we can upload",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 17,
            "seconds": 45
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Discovering a merge command and looking up Prototype Pollution to potentially update our user object with the upload permission",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 40
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Giving ourself the Upload Functionality then performing the RCE in Upload",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 23,
            "seconds": 55
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Ping works, now lets get a reverse shell",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 25,
            "seconds": 53
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Reverse shell returned, confirming we are in kubernetes downloading peirates and kubectl",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 28,
            "seconds": 15
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Using kubectl to do basic enumeration of kubernetes, switching our namespace then listing pods",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 32,
            "seconds": 49
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Demonstrating Peirates which makes the enumeration of kubernetes easier by providing a menu to list/switch namespaces and get pods",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 36,
            "seconds": 15
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Exploiting the same application in dev which gets us a different kubernetes token",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 38,
            "seconds": 15
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Doing the enumeration with kubectl again but this time we can utilize the Kube-System namespace to list secrets and taking an admin token",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 41,
            "seconds": 15
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Using our stolen token and discovering we can create pods using kubectl auth can-i create pods -n kube-system -token=(token)",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 43,
            "seconds": 45
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Explaining the attack we are about to do to create a pod with host disk mounted in the pod, then doing it in Peirates",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 44,
            "seconds": 22
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Looking at the Peirates source code to see how the attack works",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 47,
            "seconds": 0
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Doing the attack manually with kubectl",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 48,
            "seconds": 55
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " The malicious pod is created now lets go into it and look at the root disk",
        "machine": "HackTheBox - Unobtainium",
        "tag": "linux hard",
        "timestamp": {
            "minutes": 52,
            "seconds": 55
        },
        "videoId": "UgHt_Y3vdNg"
    },
    {
        "line": " Intro, box is playable on HackTheBox!",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Start of nmap and enumerating the page on port 80",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 1,
            "seconds": 9
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Discovering Port 8080",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 45
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Using ffuf to fuzz and discover SSTI",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 0
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Showing wfuzz doesn't need nearly as many parameters",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 50
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Reading up on GoLang SSTI",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 30
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Using GoLang {{ . }} to dump all variables and get password",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 40
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Logging in to get the Source Code and finding the DebugCmd Function",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 11,
            "seconds": 54
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Showing RCE through the GoLang SSTI",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 13,
            "seconds": 0
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " The Docker is an internal docker, showing a bunch of hints towards AWS",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 0
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Using the aws commands to list buckets and upload a webshell via S3",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 17,
            "seconds": 20
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Getting a reverse shell",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 30
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Examining the NGINX Configuration -- LocalStack (used for s3) hack to enable authentication",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 0
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " The \"Command on\" flag is for port 8000 in nginx config, googling it to see its a backdoor (NginxExecute)",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 26
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " The backdoor isn't working, running strings against the module to see system.run was changed to ippsec.run and getting RCE as root",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 28,
            "seconds": 28
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Converting the RCE to a shell by uploading an SSH Key",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 40
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Entering the golang container to show some more about the SSTI Configuration, hoping to make the first step make sense",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 33,
            "seconds": 40
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Opening the nginx module in Ghidra",
        "machine": "UHC - Gobox",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 36,
            "seconds": 20
        },
        "videoId": "sbUqjCPDk2k"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Knife",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "93JnRTF5sQM"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Knife",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 50
        },
        "videoId": "93JnRTF5sQM"
    },
    {
        "line": " Running GoBuster before we start poking at the site",
        "machine": "HackTheBox - Knife",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 20
        },
        "videoId": "93JnRTF5sQM"
    },
    {
        "line": " Discover the x-powered-by header says its a weird php version, going to google",
        "machine": "HackTheBox - Knife",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 33
        },
        "videoId": "93JnRTF5sQM"
    },
    {
        "line": " Finding a blog post about php-8.1.0-dev being backdoored",
        "machine": "HackTheBox - Knife",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 5
        },
        "videoId": "93JnRTF5sQM"
    },
    {
        "line": " Looking at the backdoor",
        "machine": "HackTheBox - Knife",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 30
        },
        "videoId": "93JnRTF5sQM"
    },
    {
        "line": " Failing to use the backdoor because of a bad header",
        "machine": "HackTheBox - Knife",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 5,
            "seconds": 55
        },
        "videoId": "93JnRTF5sQM"
    },
    {
        "line": " Finding the issue, the backdoor uses the header User-Agentt (note the two t's)",
        "machine": "HackTheBox - Knife",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 24
        },
        "videoId": "93JnRTF5sQM"
    },
    {
        "line": " Shell returned",
        "machine": "HackTheBox - Knife",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "93JnRTF5sQM"
    },
    {
        "line": " Discovering we can run knife with sudo, and finding a GTFOBin",
        "machine": "HackTheBox - Knife",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 11,
            "seconds": 25
        },
        "videoId": "93JnRTF5sQM"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Start of nmap and checking the website",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 1,
            "seconds": 5
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Looking at the web console which shows the page making a request to Products-Ajax.php then playing with the parameters",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 4,
            "seconds": 10
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " If the hash parameter is missing the application errors and leaks the secret key and identifying how it signs",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 10,
            "seconds": 5
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Using SQLMaps Eval parameter to automate the secure hash generation (Calculated Parameter Bypass)",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 14,
            "seconds": 0
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Logging into the application with a password from the database and discovering a LFI",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Creating a python script to automate the LFI Exploitation",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 23,
            "seconds": 50
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Script done attempting to perform RFI",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 32,
            "seconds": 0
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Another Stack Trace, identifying a race condition in their check for examining malicious php files",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 34,
            "seconds": 50
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Using SMB to steal the hash of the user running the webserver",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 35,
            "seconds": 40
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Exploiting the race condition with inotify to get the server in order to execute our PHP Code",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 40,
            "seconds": 50
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Reverse shell returned!  Finding the GoLang Program",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 48,
            "seconds": 40
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Opening the binaries in Ghidra (prior to installing the golang plugin)",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 53,
            "seconds": 0
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Installing GoTools to make reversing goland suck less",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 55,
            "seconds": 40
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Start of reversing the client binary, explaining some golang oddities",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 61,
            "seconds": 30
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Running the programs on our local windows machine to identify if we reversed it correctly",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 72,
            "seconds": 0
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Back to Ghidra and reversing server.exe to see what it does to clean files",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 74,
            "seconds": 15
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Using IO Ninja Pipe Monitor to snoop in on the pipes",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 79,
            "seconds": 50
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " METHOD 1: Stealing the flag by cleaning, copying off, then decrypting locally",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 87,
            "seconds": 50
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " METHOD 2: Creating symlinks to trick the server in copying root.txt to a directory we own",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 95,
            "seconds": 50
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " METHOD 3: Tricking server.exe into writing into system32, then using WerTrigger to elevate privileges",
        "machine": "HackTheBox - Proper",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 110,
            "seconds": 15
        },
        "videoId": "yqNSTM9oGZE"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Start of nmap and poking at website.  Browser Developer Window shows WebSockets + Hostname",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 1,
            "seconds": 10
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Setting up full portscan and gobuster while we poke at the box, to always have recon running",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 6,
            "seconds": 50
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Ussing ffuf to fuzz for emails (Forgot to set header here, we look at it later)",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 9,
            "seconds": 10
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Playing with the websockets in BurpSuite, discovering SQL Injection",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 11,
            "seconds": 20
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Creating a python program to aid our SQL Injection",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 21,
            "seconds": 40
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " SQL Injection: Enumerating information_schema to pull out table information",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 29,
            "seconds": 15
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Going back to test our previous ffuf to find out i forgot the header flag",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 35,
            "seconds": 45
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Using ffuf to fuzz parameters for the passwordreset php script and trying the token from Sql Injection",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 42,
            "seconds": 0
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Enumerating our SQL Users permissions and then including files",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 44,
            "seconds": 0
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " RelayD configuration shows a new domain crossfit-club.htb, failing to sign up with an account",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 49,
            "seconds": 20
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Using grep to extract /api/ endoings from javascript files",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 57,
            "seconds": 40
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Discover the signup endpoint, only administrators can create accounts.",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 63,
            "seconds": 0
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Grabbing unbound secret keys which will let us create DNS Entries on the box",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 66,
            "seconds": 20
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Creating a domain name with unbound and then editing the Host header in the password reset",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 70,
            "seconds": 8
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Explaining the DNS Rebind attack to get around the server examining our DNS Name",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 73,
            "seconds": 0
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Start of XSS to have the user register an account for us",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 79,
            "seconds": 30
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Hitting the start of our XSS to debug, explain bypassing CORS based upon not escaping the period in the URL",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 86,
            "seconds": 40
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Changing our unbound request to use a domain name that bypasses CORS ",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 94,
            "seconds": 20
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Appending a slash to the host header to bypass a regex",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 97,
            "seconds": 15
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " The final XSS Payload to have an administrator create an account for us.  Checking out the chat applicaiton",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 99,
            "seconds": 5
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Start of creating XSS to steal Direct Messages from chat application",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 107,
            "seconds": 20
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Creating a  second account, so we can examine how DM's work in the chat application (use wireshark to do this)",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 111,
            "seconds": 0
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Finishing off the XSS Script to steal DM's by hooking private_recv",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 114,
            "seconds": 50
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Finding a message that contains a password and SSHing into the box",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 121,
            "seconds": 10
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Using find to show files owned by a group",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 123,
            "seconds": 50
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Examining the Statbot NodeJS Script, then exploiting a library injection vulnerability",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 125,
            "seconds": 0
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Reverse shell returned, finding another binary to reverse",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 132,
            "seconds": 30
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Going over why i hate reversing BSD Binaries, comparing Ghidra and Cutter decompiler output",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 136,
            "seconds": 20
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Viewing backups on BSD and discovering root's ssh key is being backed up to /var, so the log binary can read it!",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 143,
            "seconds": 15
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " SSH is still asking for a password after using SSH Key, confirming it accepted our key, then viewing sshd/login config on BSD to see what its asking for",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 145,
            "seconds": 0
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Downloading YubiKey Secrets then failing to get it to generate a key for a bit",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 147,
            "seconds": 0
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Using YKPARSE to examine our key, then change the session and generate a valid MFA",
        "machine": "HackTheBox - Crossfit2",
        "tag": "linux insane",
        "timestamp": {
            "minutes": 163,
            "seconds": 0
        },
        "videoId": "OUjdPa11tGw"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Running nmap against all ports",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 2
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Attempting to enumerate the initial web page (Voting System)",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 55
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Nmap finished, checking staging.love.htb from the SSL Certificate",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 0
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Finding an SSRF Vulnerability in the file scanner",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 10,
            "seconds": 5
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Having trouble using WFUZZ to fuzz all ports",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 12,
            "seconds": 30
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Switching to FFUF and still having trouble to fuzz all ports",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 17,
            "seconds": 45
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Fuzzing takes too long, trying ports from nmap to see if any page is restricted by IP and findig creds",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 24,
            "seconds": 30
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Attempting to use an exploit script for Voting System (More at end of video)",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 29,
            "seconds": 45
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Enough with the exploit script, manually exploiting the application with an image upload",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 39,
            "seconds": 40
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Using Nishang to get a reverse shell, then running WinPEAS",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 43,
            "seconds": 43
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Seeing AlwaysInstallElevated is set on the system, using msfvenom to build an msi",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 52,
            "seconds": 30
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Box Done - Going back to the exploit script and getting it working",
        "machine": "HackTheBox - Love",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 54,
            "seconds": 45
        },
        "videoId": "V_7ubkfnPK4"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Start of nmap ",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 50
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Checking out the webpage, trying to identify the language running the page",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 40
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Exploring how Add Note works and testing SSTI/SQL/XSS",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 50
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Checking out the cookie to see how the JWT is encoded",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " JWT.IO shows the JWT is RS256 and there's a URL for the privKey",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Editing the PrivKEy, I'm not sure why i didn't do this within the JWT.IO website...",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 30
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Confirming the server goes to us to get the PrivateKey",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 0
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Using ssh-rsa/openssl to create a RSA Key and forging the JWT",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 10,
            "seconds": 45
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Exploring the IDOR Vulnerability to see if unauthenticated users can access notes",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 55
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Uploading a PHP File to confirm code execution then a reverse shell.",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 45
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Identifying when the box was created by looking at SSH Host Keys, then using find to list files created around that time",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 23
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " My reverse shell keeps crashing, doing the finds without the PTY Trick to find a backup that has an SSH Key",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 26,
            "seconds": 20
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " SSH into the box with the SSH Key and discovering we can use sudo to access Docker",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 30,
            "seconds": 50
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Exploring the docker for sensitive information that could be used to access other users on the box ",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 31,
            "seconds": 40
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Looking at the Docker Version to see it from 2018 and finding a vulnerability",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 34,
            "seconds": 25
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Performing CVE-2019-5736 to get root",
        "machine": "HackTheBox - TheNotebook",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 36,
            "seconds": 10
        },
        "videoId": "S4FrlMTY0GY"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Start of the box, showing a quick way to nmap",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 50
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Looking at web page",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 2,
            "seconds": 15
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Looking for Drupal Scanners",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Showing how I would fingerprint opensource apps if there was no scanner",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Using DroopeScan to scan the site",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Starting to use Drupalgeddon2 to get a shell",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 7,
            "seconds": 50
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Installing gems so DrupalGeddon works",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 11,
            "seconds": 40
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Drupalgeddon2 works, going from a webshell to reverse shell",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 12,
            "seconds": 15
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Confused about OSError: out of pty devices when improving the shell, give up eventually",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 16,
            "seconds": 0
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Looking for users on the box, then hunting for the Drupal configuration",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 17,
            "seconds": 50
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Cannot find the drupal configuration, going to google and asking for how to change the SQL Password",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 21,
            "seconds": 0
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Logging into the Drupal MySQL Database then dumping the Drupal Hash but have trouble getting it to work since we don't have a TTY",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 22,
            "seconds": 45
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Cracking the Joomla Password, then testing the password with ssh and logging in",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 29,
            "seconds": 0
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Our user can install Snap Packages with sudo, so building a malicious snap",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 30,
            "seconds": 0
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Installing FPM which lets us build packages, building a lot of bad packages until we find one that works",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 31,
            "seconds": 20
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Our malicious packages aren't working, switching to a non-malicious one to test the exploit",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 36,
            "seconds": 20
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Having our snap attempt to grab the root flag, turns out i was just impatient before",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 40,
            "seconds": 16
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Moving bash to avoid system directories and setting it to setuid",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 43,
            "seconds": 43
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Explaining what snap is",
        "machine": "HackTheBox - Armageddon",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 45,
            "seconds": 10
        },
        "videoId": "8ikdbyOQsLg"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 0,
            "seconds": 45
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Poking at the website",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 3,
            "seconds": 50
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Quickly testing for SQL Injection and coming up with nothing",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 5,
            "seconds": 20
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Creating an account and checking what regular users can do",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 12,
            "seconds": 30
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Using BurpSuite Sequencer to identify low entropy within login cookies",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 14,
            "seconds": 15
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Finding the 302 redirect still outputs the page, its just that the browser doesn't want to show it",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 18,
            "seconds": 30
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Creating a simple PHP File to be uploaded",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 21,
            "seconds": 10
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Finding the /books/ url and checking the book search page again to find LFI",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 23,
            "seconds": 0
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Building a quick python script to automate the LFI",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 28,
            "seconds": 0
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Windows is really weird with SSH, need to disable PubKeyAuth in order to login with a password",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 38,
            "seconds": 0
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Looking at the fileController php file to see who can upload files",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 39,
            "seconds": 50
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Looking around the source code to examine how PHP Sessions are built, so we can impersonate Paul",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 43,
            "seconds": 0
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Running makesession with all permutations so we can get Pauls login cookie",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 46,
            "seconds": 35
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Logged in as Paul, now we need to modify the JWT token to say we are Paul",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 50,
            "seconds": 15
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " We can now upload php files!  Some light AV Evasion and have a reverse shell with Nishang",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 53,
            "seconds": 50
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Finding Juliette's password within the web application and SSH'ing into Windows",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 59,
            "seconds": 50
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Hunting for Microsoft Sticky Notes and finding the Developer Password",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 62,
            "seconds": 20
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Logged in as Development, finding a linux app to reverse in ghidra",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 70,
            "seconds": 50
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Mimicing the curl requests by the linux app to port localhost:1234, so using SSH to forward that. (the localhost screws things up)",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 74,
            "seconds": 50
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Our curl still isn't working, figuring out the master key to see if the linux application works.",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 79,
            "seconds": 3
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " The localhost in our SSH Port Forward is causing weird issues, changing it to 127.0.0.1 fixes it",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 81,
            "seconds": 50
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " The app works, testing for SQL Injection",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 83,
            "seconds": 10
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Using information_schema to dump information about the database (databases, tables, columns), then extracting all info",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 85,
            "seconds": 10
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Using cyberchef to decrypt the AES Blob from the database",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 88,
            "seconds": 40
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " PSExec isn't working (av?), switching to wmiexec and getting a shell.",
        "machine": "HackTheBox - Breadcrumbs",
        "tag": "windows hard",
        "timestamp": {
            "minutes": 90,
            "seconds": 45
        },
        "videoId": "gLPnIIGa0FU"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Start of nmap",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 50
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Running RPCDump which shows if this is vulnerable to PrintNightmare (Exploit it later)",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 2,
            "seconds": 15
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Examining the webpage",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Explaining why i use lowercase wordlists on against Windows Webservers",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 15
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Listing shares with smbclient to find an open share",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 0
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Decompiling the Electron installer/app with asar",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 7,
            "seconds": 30
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Everything is extracted looking at package.json and main.js to find electron-updater",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 12,
            "seconds": 0
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Searching for exploits within Electron",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 14,
            "seconds": 10
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Using MSFVENOM to build a reverse shell",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 15,
            "seconds": 30
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Editing our installer YAML to point to our reverse shell",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 16,
            "seconds": 45
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Putting the files on the share and getting our reverse shell",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 19,
            "seconds": 30
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Exploring the box to find PortableKanban ",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 21,
            "seconds": 30
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Copying the config to our box so we can extract the database password",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 30
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Using CyberChef to decrypt the Portable Kanban password",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 40
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Authenticating to Redit-CLI and dumping the user information to get administrator password",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 28,
            "seconds": 20
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Using rundll32 to create a memory dump of LSASS so we can extract a password",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 30,
            "seconds": 30
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Downloading lsass.dmp with evil-winrm",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 30
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Using Pypykatz to parse the dump file and get Jason's password",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 35,
            "seconds": 30
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Building our environment to perform CVE-2021-1675 (PrintNightmare)",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 38,
            "seconds": 30
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Using PrintNightmare to connect to our netcat to verify it is vulnerable",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 42,
            "seconds": 50
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Building a DLL to send a reverse shell",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 44,
            "seconds": 20
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Having trouble with Impacket's SMBServer, configuring our local SMBD to work with this exploit",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 46,
            "seconds": 50
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Reading more errors from impacket to verify we do have code execution",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 49,
            "seconds": 20
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Giving a file that doesn't exist to see another error... More verifying that this is working",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 50,
            "seconds": 10
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Giving it our ReverseShell DLL to get a reverse shell",
        "machine": "HackTheBox - Atom",
        "tag": "windows medium",
        "timestamp": {
            "minutes": 51,
            "seconds": 20
        },
        "videoId": "1OC2eRVX0ic"
    },
    {
        "line": " Intro",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Start of nmap, looking at release date of tomcat",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 0,
            "seconds": 45
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Starting a bruteforce of /manager login to run in the background",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Playing with the YAML Parser, sending special characters leads to a stack trace showing the library",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 6,
            "seconds": 55
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Testing a YAML Deserialization payload for Snake YAML",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 8,
            "seconds": 15
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Start of weaponizing the payload",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 9,
            "seconds": 15
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Having a lot of trouble with building out a payload due to special characters",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 13,
            "seconds": 20
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Making it simple, just downloading a script then executing it",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 18,
            "seconds": 50
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Finally got a shell",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 22,
            "seconds": 20
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Going into how we know the sudoers file is non-default by date or filesize",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 24,
            "seconds": 10
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Finding out install date of a linux machine by SSH Host Key",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 0
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Finding where tomcat is installed and then grabbing the password out of the config tomcat-users",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 25,
            "seconds": 50
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Trying the tomcat password with the admin user",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 29,
            "seconds": 0
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Going over the go source code which can be ran with sudo",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 30,
            "seconds": 0
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Downloading the web assembly so we can decompile the wasm into a wat then edit it",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 32,
            "seconds": 0
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Got Root, showing why i used metasploit to bruteforce tomcat password (lockouts)",
        "machine": "HackTheBox - Ophiuchi",
        "tag": "linux medium",
        "timestamp": {
            "minutes": 37,
            "seconds": 0
        },
        "videoId": "9-AQQkJA1X4"
    },
    {
        "line": " Start",
        "machine": "HackTheBox - Spectra",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 0,
            "seconds": 0
        },
        "videoId": "mC7G3i2gV54"
    },
    {
        "line": " Nmaping the box",
        "machine": "HackTheBox - Spectra",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 1,
            "seconds": 0
        },
        "videoId": "mC7G3i2gV54"
    },
    {
        "line": " Checking out the web pages, discovering Wordpress",
        "machine": "HackTheBox - Spectra",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 3,
            "seconds": 0
        },
        "videoId": "mC7G3i2gV54"
    },
    {
        "line": " Getting the username of wordpress by looking at the blog post author",
        "machine": "HackTheBox - Spectra",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 4,
            "seconds": 0
        },
        "videoId": "mC7G3i2gV54"
    },
    {
        "line": " Running WpScan with Plugins-detection",
        "machine": "HackTheBox - Spectra",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 6,
            "seconds": 30
        },
        "videoId": "mC7G3i2gV54"
    },
    {
        "line": " Finding an open directory on the testing site, accessing a backup",
        "machine": "HackTheBox - Spectra",
        "tag": "linux easy",
        "timestamp": {
            "minutes": 8,
            "seconds": 25
        },
        "videoId": "mC7G3i2gV54"
    }
]